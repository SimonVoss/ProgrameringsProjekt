
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002234  08002234  00012234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080022d8  080022d8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d8  080022d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080022e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000090  08002370  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002370  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005874  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f3f  00000000  00000000  00025934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00026878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00026f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fdcf  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000606c  00000000  00000000  0003736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a891  00000000  00000000  0003d3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00097c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  00097cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800221c 	.word	0x0800221c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800221c 	.word	0x0800221c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	4608      	mov	r0, r1
 800027a:	4611      	mov	r1, r2
 800027c:	461a      	mov	r2, r3
 800027e:	4603      	mov	r3, r0
 8000280:	70fb      	strb	r3, [r7, #3]
 8000282:	460b      	mov	r3, r1
 8000284:	70bb      	strb	r3, [r7, #2]
 8000286:	4613      	mov	r3, r2
 8000288:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b04      	cmp	r3, #4
 8000296:	d821      	bhi.n	80002dc <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 800029e:	78ba      	ldrb	r2, [r7, #2]
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	461a      	mov	r2, r3
 80002aa:	231f      	movs	r3, #31
 80002ac:	4093      	lsls	r3, r2
 80002ae:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	43db      	mvns	r3, r3
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	4013      	ands	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	78ba      	ldrb	r2, [r7, #2]
 80002be:	4613      	mov	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4413      	add	r3, r2
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	631a      	str	r2, [r3, #48]	; 0x30
 80002da:	e074      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80002dc:	78bb      	ldrb	r3, [r7, #2]
 80002de:	2b09      	cmp	r3, #9
 80002e0:	d823      	bhi.n	800032a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002e6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80002e8:	78bb      	ldrb	r3, [r7, #2]
 80002ea:	1f5a      	subs	r2, r3, #5
 80002ec:	4613      	mov	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	461a      	mov	r2, r3
 80002f6:	231f      	movs	r3, #31
 80002f8:	4093      	lsls	r3, r2
 80002fa:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	43db      	mvns	r3, r3
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4013      	ands	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000306:	78f9      	ldrb	r1, [r7, #3]
 8000308:	78bb      	ldrb	r3, [r7, #2]
 800030a:	1f5a      	subs	r2, r3, #5
 800030c:	4613      	mov	r3, r2
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
 8000320:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
 8000328:	e04d      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 800032a:	78bb      	ldrb	r3, [r7, #2]
 800032c:	2b0e      	cmp	r3, #14
 800032e:	d825      	bhi.n	800037c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000334:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000336:	78bb      	ldrb	r3, [r7, #2]
 8000338:	f1a3 020a 	sub.w	r2, r3, #10
 800033c:	4613      	mov	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	461a      	mov	r2, r3
 8000346:	231f      	movs	r3, #31
 8000348:	4093      	lsls	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	43db      	mvns	r3, r3
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000356:	78f9      	ldrb	r1, [r7, #3]
 8000358:	78bb      	ldrb	r3, [r7, #2]
 800035a:	f1a3 020a 	sub.w	r2, r3, #10
 800035e:	4613      	mov	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	4313      	orrs	r3, r2
 8000372:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	639a      	str	r2, [r3, #56]	; 0x38
 800037a:	e024      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000380:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000382:	78bb      	ldrb	r3, [r7, #2]
 8000384:	f1a3 020f 	sub.w	r2, r3, #15
 8000388:	4613      	mov	r3, r2
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	4413      	add	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	461a      	mov	r2, r3
 8000392:	231f      	movs	r3, #31
 8000394:	4093      	lsls	r3, r2
 8000396:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	43db      	mvns	r3, r3
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80003a2:	78f9      	ldrb	r1, [r7, #3]
 80003a4:	78bb      	ldrb	r3, [r7, #2]
 80003a6:	f1a3 020f 	sub.w	r2, r3, #15
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	4313      	orrs	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2b09      	cmp	r3, #9
 80003ca:	d923      	bls.n	8000414 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	f1a3 020a 	sub.w	r2, r3, #10
 80003d8:	4613      	mov	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	4413      	add	r3, r2
 80003de:	2207      	movs	r2, #7
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6999      	ldr	r1, [r3, #24]
 80003f8:	7878      	ldrb	r0, [r7, #1]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	f1a3 020a 	sub.w	r2, r3, #10
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	fa00 f303 	lsl.w	r3, r0, r3
 800040a:	ea41 0203 	orr.w	r2, r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000412:	e01f      	b.n	8000454 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	1e5a      	subs	r2, r3, #1
 800041e:	4613      	mov	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4413      	add	r3, r2
 8000424:	2238      	movs	r2, #56	; 0x38
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6959      	ldr	r1, [r3, #20]
 800043e:	7878      	ldrb	r0, [r7, #1]
 8000440:	78fa      	ldrb	r2, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	fa00 f303 	lsl.w	r3, r0, r3
 800044c:	ea41 0203 	orr.w	r2, r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	615a      	str	r2, [r3, #20]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f043 0204 	orr.w	r2, r3, #4
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	b29b      	uxth	r3, r3
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800049a:	b480      	push	{r7}
 800049c:	b085      	sub	sp, #20
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	4013      	ands	r3, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e001      	b.n	80004be <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004be:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004f4:	4b8b      	ldr	r3, [pc, #556]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f003 030c 	and.w	r3, r3, #12
 80004fc:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	2b08      	cmp	r3, #8
 8000502:	d011      	beq.n	8000528 <RCC_GetClocksFreq+0x5c>
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	2b08      	cmp	r3, #8
 8000508:	d837      	bhi.n	800057a <RCC_GetClocksFreq+0xae>
 800050a:	6a3b      	ldr	r3, [r7, #32]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <RCC_GetClocksFreq+0x4c>
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d004      	beq.n	8000520 <RCC_GetClocksFreq+0x54>
 8000516:	e030      	b.n	800057a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a83      	ldr	r2, [pc, #524]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800051c:	601a      	str	r2, [r3, #0]
      break;
 800051e:	e030      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a81      	ldr	r2, [pc, #516]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000524:	601a      	str	r2, [r3, #0]
      break;
 8000526:	e02c      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000528:	4b7e      	ldr	r3, [pc, #504]	; (8000724 <RCC_GetClocksFreq+0x258>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000530:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000532:	4b7c      	ldr	r3, [pc, #496]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800053a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	0c9b      	lsrs	r3, r3, #18
 8000540:	3302      	adds	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	4a77      	ldr	r2, [pc, #476]	; (800072c <RCC_GetClocksFreq+0x260>)
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	e00d      	b.n	8000572 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000556:	4b73      	ldr	r3, [pc, #460]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000562:	4a71      	ldr	r2, [pc, #452]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fbb2 f2f3 	udiv	r2, r2, r3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000576:	601a      	str	r2, [r3, #0]
      break;
 8000578:	e003      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800057e:	601a      	str	r2, [r3, #0]
      break;
 8000580:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000582:	4b68      	ldr	r3, [pc, #416]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800058a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800058c:	6a3b      	ldr	r3, [r7, #32]
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000592:	4a67      	ldr	r2, [pc, #412]	; (8000730 <RCC_GetClocksFreq+0x264>)
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005aa:	4b5e      	ldr	r3, [pc, #376]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005b2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005ba:	4a5d      	ldr	r2, [pc, #372]	; (8000730 <RCC_GetClocksFreq+0x264>)
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005da:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80005dc:	6a3b      	ldr	r3, [r7, #32]
 80005de:	0adb      	lsrs	r3, r3, #11
 80005e0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80005e2:	4a53      	ldr	r2, [pc, #332]	; (8000730 <RCC_GetClocksFreq+0x264>)
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80005fa:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000602:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000604:	6a3b      	ldr	r3, [r7, #32]
 8000606:	091b      	lsrs	r3, r3, #4
 8000608:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800060a:	4a4a      	ldr	r2, [pc, #296]	; (8000734 <RCC_GetClocksFreq+0x268>)
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000612:	b29b      	uxth	r3, r3
 8000614:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	fbb2 f2f3 	udiv	r2, r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	e003      	b.n	8000636 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800063e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000646:	4a3b      	ldr	r2, [pc, #236]	; (8000734 <RCC_GetClocksFreq+0x268>)
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	b29b      	uxth	r3, r3
 8000650:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800065c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	fbb2 f2f3 	udiv	r2, r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	e003      	b.n	8000672 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	2b10      	cmp	r3, #16
 800067c:	d003      	beq.n	8000686 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	e003      	b.n	800068e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	2b20      	cmp	r3, #32
 8000698:	d003      	beq.n	80006a2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800069e:	61da      	str	r2, [r3, #28]
 80006a0:	e003      	b.n	80006aa <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006b6:	d10d      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006be:	429a      	cmp	r2, r3
 80006c0:	d108      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d104      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	005a      	lsls	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	621a      	str	r2, [r3, #32]
 80006d2:	e003      	b.n	80006dc <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e8:	d10d      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d108      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d104      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	005a      	lsls	r2, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
 8000704:	e003      	b.n	800070e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68da      	ldr	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10e      	bne.n	8000738 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
 8000722:	e028      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
 8000724:	40021000 	.word	0x40021000
 8000728:	007a1200 	.word	0x007a1200
 800072c:	003d0900 	.word	0x003d0900
 8000730:	20000000 	.word	0x20000000
 8000734:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000738:	4b6c      	ldr	r3, [pc, #432]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	2b01      	cmp	r3, #1
 8000742:	d104      	bne.n	800074e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
 800074c:	e013      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800074e:	4b67      	ldr	r3, [pc, #412]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0303 	and.w	r3, r3, #3
 8000756:	2b02      	cmp	r3, #2
 8000758:	d104      	bne.n	8000764 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
 8000762:	e008      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000764:	4b61      	ldr	r3, [pc, #388]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0303 	and.w	r3, r3, #3
 800076c:	2b03      	cmp	r3, #3
 800076e:	d102      	bne.n	8000776 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a5f      	ldr	r2, [pc, #380]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000776:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
 800078a:	e021      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800078c:	4b57      	ldr	r3, [pc, #348]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d104      	bne.n	80007a4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a2:	e015      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80007a4:	4b51      	ldr	r3, [pc, #324]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007b0:	d104      	bne.n	80007bc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ba:	e009      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80007bc:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007c8:	d102      	bne.n	80007d0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d104      	bne.n	80007e6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689a      	ldr	r2, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
 80007e4:	e021      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007f2:	d104      	bne.n	80007fe <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
 80007fc:	e015      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800080a:	d104      	bne.n	8000816 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
 8000814:	e009      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800081e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000822:	d102      	bne.n	800082a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	e021      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800084c:	d104      	bne.n	8000858 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
 8000856:	e015      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000864:	d104      	bne.n	8000870 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	e009      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800087c:	d102      	bne.n	8000884 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000898:	e021      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008a6:	d104      	bne.n	80008b2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008b0:	e015      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008be:	d104      	bne.n	80008ca <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008c8:	e009      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80008d6:	d102      	bne.n	80008de <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008de:	bf00      	nop
 80008e0:	372c      	adds	r7, #44	; 0x2c
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	007a1200 	.word	0x007a1200

080008f4 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	b29b      	uxth	r3, r3
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800094a:	2201      	movs	r2, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d103      	bne.n	8000962 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	e005      	b.n	800096e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d102      	bne.n	800096e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	3308      	adds	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d006      	beq.n	8000982 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000980:	e006      	b.n	8000990 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	43da      	mvns	r2, r3
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	400a      	ands	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3724      	adds	r7, #36	; 0x24
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e001      	b.n	80009c0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2201      	movs	r2, #1
 80009e2:	fa02 f103 	lsl.w	r1, r2, r3
 80009e6:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <NVIC_EnableIRQ+0x30>)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <uart_put_char+0x30>)
 8000a16:	f7ff ff6d 	bl	80008f4 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a1a:	bf00      	nop
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <uart_put_char+0x30>)
 8000a20:	f7ff ffbc 	bl	800099c <USART_GetFlagStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f8      	beq.n	8000a1c <uart_put_char+0x18>
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400

08000a38 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e012      	b.n	8000a72 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b0a      	cmp	r3, #10
 8000a56:	d102      	bne.n	8000a5e <_write_r+0x26>
            uart_put_char('\r');
 8000a58:	200d      	movs	r0, #13
 8000a5a:	f7ff ffd3 	bl	8000a04 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffcc 	bl	8000a04 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbe8      	blt.n	8000a4c <_write_r+0x14>
    }

    return len;
 8000a7a:	683b      	ldr	r3, [r7, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000a8c:	4b86      	ldr	r3, [pc, #536]	; (8000ca8 <uart_init+0x224>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fb87 	bl	80011a8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000a9a:	4b83      	ldr	r3, [pc, #524]	; (8000ca8 <uart_init+0x224>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fb80 	bl	80011a8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000aa8:	4b80      	ldr	r3, [pc, #512]	; (8000cac <uart_init+0x228>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a7f      	ldr	r2, [pc, #508]	; (8000cac <uart_init+0x228>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000ab4:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <uart_init+0x228>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a7c      	ldr	r2, [pc, #496]	; (8000cac <uart_init+0x228>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000ac0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ace:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ade:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000aee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000afa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000afe:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b0e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b1a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b1e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b24:	889b      	ldrh	r3, [r3, #4]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b2c:	f023 030c 	bic.w	r3, r3, #12
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000b34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b3c:	8892      	ldrh	r2, [r2, #4]
 8000b3e:	b292      	uxth	r2, r2
 8000b40:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000b42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b50:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000b52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b60:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b70:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b80:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <uart_init+0x22c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a4a      	ldr	r2, [pc, #296]	; (8000cb0 <uart_init+0x22c>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000b8e:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <uart_init+0x22c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a47      	ldr	r2, [pc, #284]	; (8000cb0 <uart_init+0x22c>)
 8000b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b98:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <uart_init+0x22c>)
 8000b9c:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <uart_init+0x22c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000ba2:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <uart_init+0x22c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <uart_init+0x22c>)
 8000ba8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bac:	f023 030c 	bic.w	r3, r3, #12
 8000bb0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <uart_init+0x22c>)
 8000bb4:	4a3e      	ldr	r2, [pc, #248]	; (8000cb0 <uart_init+0x22c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <uart_init+0x22c>)
 8000bbc:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <uart_init+0x22c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <uart_init+0x22c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <uart_init+0x22c>)
 8000bc8:	f043 030c 	orr.w	r3, r3, #12
 8000bcc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <uart_init+0x22c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4a37      	ldr	r2, [pc, #220]	; (8000cb0 <uart_init+0x22c>)
 8000bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bd8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <uart_init+0x22c>)
 8000bdc:	4a34      	ldr	r2, [pc, #208]	; (8000cb0 <uart_init+0x22c>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be6:	2300      	movs	r3, #0
 8000be8:	647b      	str	r3, [r7, #68]	; 0x44
 8000bea:	2300      	movs	r3, #0
 8000bec:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc6a 	bl	80004cc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <uart_init+0x22c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d010      	beq.n	8000c2a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0a:	005a      	lsls	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	fb01 f202 	mul.w	r2, r1, r2
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c28:	e00d      	b.n	8000c46 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	fb01 f202 	mul.w	r2, r1, r2
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d302      	bcc.n	8000c56 <uart_init+0x1d2>
        divider++;
 8000c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c52:	3301      	adds	r3, #1
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <uart_init+0x22c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00b      	beq.n	8000c7a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c6e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c72:	4013      	ands	r3, r2
 8000c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c76:	4313      	orrs	r3, r2
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <uart_init+0x22c>)
 8000c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <uart_init+0x22c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <uart_init+0x22c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <uart_init+0x230>)
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <uart_init+0x22c>)
 8000c94:	f7ff fe40 	bl	8000918 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000c98:	2026      	movs	r0, #38	; 0x26
 8000c9a:	f7ff fe99 	bl	80009d0 <NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3750      	adds	r7, #80	; 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000002c 	.word	0x2000002c
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	00050105 	.word	0x00050105

08000cb8 <ADCread>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int ADCread(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cc8:	f7ff fad2 	bl	8000270 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8000ccc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cd0:	f7ff fbc6 	bl	8000460 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8000cd4:	bf00      	nop
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cdc:	f7ff fbdd 	bl	800049a <ADC_GetFlagStatus>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f7      	beq.n	8000cd6 <ADCread+0x1e>

	uint16_t JoystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 8000ce6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cea:	f7ff fbc9 	bl	8000480 <ADC_GetConversionValue>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]

	if(JoystickWay > 2048){
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf8:	d901      	bls.n	8000cfe <ADCread+0x46>
		return 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e005      	b.n	8000d0a <ADCread+0x52>
	}
	if(JoystickWay < 2048){
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d04:	d201      	bcs.n	8000d0a <ADCread+0x52>
		return 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e7ff      	b.n	8000d0a <ADCread+0x52>
	}
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <ADCConfig>:
#include "ex2.h"


//Initialicering af Programmer Start

void ADCConfig(void) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8000d1a:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <ADCConfig+0x158>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a53      	ldr	r2, [pc, #332]	; (8000e6c <ADCConfig+0x158>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
	//PA0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000d26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000d36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8000d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d4c:	f023 0303 	bic.w	r3, r3, #3
 8000d50:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8000d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//PA1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8000d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d6c:	f023 030c 	bic.w	r3, r3, #12
 8000d70:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8000d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d88:	f023 030c 	bic.w	r3, r3, #12
 8000d8c:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 8000d8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <ADCConfig+0x158>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <ADCConfig+0x158>)
 8000da4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8000daa:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <ADCConfig+0x158>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <ADCConfig+0x158>)
 8000db0:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8000db4:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <ADCConfig+0x158>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <ADCConfig+0x158>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 8000dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8000dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <ADCConfig+0x15c>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8000dda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000de4:	f023 030f 	bic.w	r3, r3, #15
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8000dea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	e002      	b.n	8000e06 <ADCConfig+0xf2>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e0c:	dbf8      	blt.n	8000e00 <ADCConfig+0xec>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8000e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e1c:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8000e1e:	bf00      	nop
 8000e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dafa      	bge.n	8000e20 <ADCConfig+0x10c>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	e002      	b.n	8000e36 <ADCConfig+0x122>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b63      	cmp	r3, #99	; 0x63
 8000e3a:	ddf9      	ble.n	8000e30 <ADCConfig+0x11c>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8000e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8000e4c:	bf00      	nop
 8000e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <ADCConfig+0x13a>

}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	fdffc007 	.word	0xfdffc007

08000e74 <main>:
//Initialicering af Programmer Slut


int main(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	//Initialicering af forbindelse
	uart_init(9600);
 8000e7a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000e7e:	f7ff fe01 	bl	8000a84 <uart_init>


	//Initialicering af Programmer i main Start
	ADCConfig();
 8000e82:	f7ff ff47 	bl	8000d14 <ADCConfig>

	//Initialicering af Programmer i main Slut

	//Hentning af info Start

	int JoystickWay = ADCread();
 8000e86:	f7ff ff17 	bl	8000cb8 <ADCread>
 8000e8a:	6078      	str	r0, [r7, #4]

	//Hentning af info Slut


//	Testområde
	printf("Value = %d\n", JoystickWay);
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4802      	ldr	r0, [pc, #8]	; (8000e98 <main+0x24>)
 8000e90:	f000 f972 	bl	8001178 <iprintf>



	while(1){}
 8000e94:	e7fe      	b.n	8000e94 <main+0x20>
 8000e96:	bf00      	nop
 8000e98:	08002234 	.word	0x08002234

08000e9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00a      	b.n	8000ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eae:	f3af 8000 	nop.w
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	b2ca      	uxtb	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf0      	blt.n	8000eae <_read+0x12>
	}

return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x50>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x16>
		heap_end = &end;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <_sbrk+0x50>)
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <_sbrk+0x54>)
 8000f54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <_sbrk+0x50>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <_sbrk+0x50>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	466a      	mov	r2, sp
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d907      	bls.n	8000f7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f6a:	f000 f8d3 	bl	8001114 <__errno>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	220c      	movs	r2, #12
 8000f72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	e006      	b.n	8000f88 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <_sbrk+0x50>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <_sbrk+0x50>)
 8000f84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	200000c0 	.word	0x200000c0

08000f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemInit+0x84>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <SystemInit+0x84>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <SystemInit+0x88>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <SystemInit+0x88>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SystemInit+0x88>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4918      	ldr	r1, [pc, #96]	; (8001020 <SystemInit+0x88>)
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <SystemInit+0x8c>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <SystemInit+0x88>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <SystemInit+0x88>)
 8000fca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SystemInit+0x88>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <SystemInit+0x88>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <SystemInit+0x88>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <SystemInit+0x88>)
 8000fe6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fea:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0x88>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <SystemInit+0x88>)
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <SystemInit+0x88>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <SystemInit+0x88>)
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <SystemInit+0x90>)
 8001000:	4013      	ands	r3, r2
 8001002:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x88>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800100a:	f000 f80f 	bl	800102c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800100e:	4b03      	ldr	r3, [pc, #12]	; (800101c <SystemInit+0x84>)
 8001010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001014:	609a      	str	r2, [r3, #8]
#endif  
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	40021000 	.word	0x40021000
 8001024:	f87fc00c 	.word	0xf87fc00c
 8001028:	ff00fccc 	.word	0xff00fccc

0800102c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <SetSysClock+0x8c>)
 8001032:	2212      	movs	r2, #18
 8001034:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <SetSysClock+0x90>)
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <SetSysClock+0x90>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SetSysClock+0x90>)
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <SetSysClock+0x90>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <SetSysClock+0x90>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <SetSysClock+0x90>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <SetSysClock+0x90>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <SetSysClock+0x90>)
 8001058:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800105c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <SetSysClock+0x90>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <SetSysClock+0x90>)
 8001064:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001068:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <SetSysClock+0x90>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <SetSysClock+0x90>)
 8001070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001074:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001076:	bf00      	nop
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <SetSysClock+0x90>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f9      	beq.n	8001078 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <SetSysClock+0x90>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <SetSysClock+0x90>)
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <SetSysClock+0x90>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <SetSysClock+0x90>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800109c:	bf00      	nop
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <SetSysClock+0x90>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d1f9      	bne.n	800109e <SetSysClock+0x72>
  {
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000
 80010bc:	40021000 	.word	0x40021000

080010c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0b      	ldr	r4, [pc, #44]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010ea:	f7ff ff55 	bl	8000f98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ee:	f000 f817 	bl	8001120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff febf 	bl	8000e74 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001104:	080022e0 	.word	0x080022e0
  ldr r2, =_sbss
 8001108:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800110c:	200000c0 	.word	0x200000c0

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <__errno>:
 8001114:	4b01      	ldr	r3, [pc, #4]	; (800111c <__errno+0x8>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000002c 	.word	0x2000002c

08001120 <__libc_init_array>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	4d0d      	ldr	r5, [pc, #52]	; (8001158 <__libc_init_array+0x38>)
 8001124:	4c0d      	ldr	r4, [pc, #52]	; (800115c <__libc_init_array+0x3c>)
 8001126:	1b64      	subs	r4, r4, r5
 8001128:	10a4      	asrs	r4, r4, #2
 800112a:	2600      	movs	r6, #0
 800112c:	42a6      	cmp	r6, r4
 800112e:	d109      	bne.n	8001144 <__libc_init_array+0x24>
 8001130:	4d0b      	ldr	r5, [pc, #44]	; (8001160 <__libc_init_array+0x40>)
 8001132:	4c0c      	ldr	r4, [pc, #48]	; (8001164 <__libc_init_array+0x44>)
 8001134:	f001 f872 	bl	800221c <_init>
 8001138:	1b64      	subs	r4, r4, r5
 800113a:	10a4      	asrs	r4, r4, #2
 800113c:	2600      	movs	r6, #0
 800113e:	42a6      	cmp	r6, r4
 8001140:	d105      	bne.n	800114e <__libc_init_array+0x2e>
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	f855 3b04 	ldr.w	r3, [r5], #4
 8001148:	4798      	blx	r3
 800114a:	3601      	adds	r6, #1
 800114c:	e7ee      	b.n	800112c <__libc_init_array+0xc>
 800114e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001152:	4798      	blx	r3
 8001154:	3601      	adds	r6, #1
 8001156:	e7f2      	b.n	800113e <__libc_init_array+0x1e>
 8001158:	080022d8 	.word	0x080022d8
 800115c:	080022d8 	.word	0x080022d8
 8001160:	080022d8 	.word	0x080022d8
 8001164:	080022dc 	.word	0x080022dc

08001168 <memset>:
 8001168:	4402      	add	r2, r0
 800116a:	4603      	mov	r3, r0
 800116c:	4293      	cmp	r3, r2
 800116e:	d100      	bne.n	8001172 <memset+0xa>
 8001170:	4770      	bx	lr
 8001172:	f803 1b01 	strb.w	r1, [r3], #1
 8001176:	e7f9      	b.n	800116c <memset+0x4>

08001178 <iprintf>:
 8001178:	b40f      	push	{r0, r1, r2, r3}
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <iprintf+0x2c>)
 800117c:	b513      	push	{r0, r1, r4, lr}
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	b124      	cbz	r4, 800118c <iprintf+0x14>
 8001182:	69a3      	ldr	r3, [r4, #24]
 8001184:	b913      	cbnz	r3, 800118c <iprintf+0x14>
 8001186:	4620      	mov	r0, r4
 8001188:	f000 f9f6 	bl	8001578 <__sinit>
 800118c:	ab05      	add	r3, sp, #20
 800118e:	9a04      	ldr	r2, [sp, #16]
 8001190:	68a1      	ldr	r1, [r4, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	4620      	mov	r0, r4
 8001196:	f000 fc07 	bl	80019a8 <_vfiprintf_r>
 800119a:	b002      	add	sp, #8
 800119c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a0:	b004      	add	sp, #16
 80011a2:	4770      	bx	lr
 80011a4:	2000002c 	.word	0x2000002c

080011a8 <setbuf>:
 80011a8:	2900      	cmp	r1, #0
 80011aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ae:	bf0c      	ite	eq
 80011b0:	2202      	moveq	r2, #2
 80011b2:	2200      	movne	r2, #0
 80011b4:	f000 b800 	b.w	80011b8 <setvbuf>

080011b8 <setvbuf>:
 80011b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80011bc:	461d      	mov	r5, r3
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <setvbuf+0x17c>)
 80011c0:	681f      	ldr	r7, [r3, #0]
 80011c2:	4604      	mov	r4, r0
 80011c4:	460e      	mov	r6, r1
 80011c6:	4690      	mov	r8, r2
 80011c8:	b127      	cbz	r7, 80011d4 <setvbuf+0x1c>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	b913      	cbnz	r3, 80011d4 <setvbuf+0x1c>
 80011ce:	4638      	mov	r0, r7
 80011d0:	f000 f9d2 	bl	8001578 <__sinit>
 80011d4:	4b58      	ldr	r3, [pc, #352]	; (8001338 <setvbuf+0x180>)
 80011d6:	429c      	cmp	r4, r3
 80011d8:	d167      	bne.n	80012aa <setvbuf+0xf2>
 80011da:	687c      	ldr	r4, [r7, #4]
 80011dc:	f1b8 0f02 	cmp.w	r8, #2
 80011e0:	d006      	beq.n	80011f0 <setvbuf+0x38>
 80011e2:	f1b8 0f01 	cmp.w	r8, #1
 80011e6:	f200 809f 	bhi.w	8001328 <setvbuf+0x170>
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	f2c0 809c 	blt.w	8001328 <setvbuf+0x170>
 80011f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011f2:	07db      	lsls	r3, r3, #31
 80011f4:	d405      	bmi.n	8001202 <setvbuf+0x4a>
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	0598      	lsls	r0, r3, #22
 80011fa:	d402      	bmi.n	8001202 <setvbuf+0x4a>
 80011fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011fe:	f000 fa59 	bl	80016b4 <__retarget_lock_acquire_recursive>
 8001202:	4621      	mov	r1, r4
 8001204:	4638      	mov	r0, r7
 8001206:	f000 f923 	bl	8001450 <_fflush_r>
 800120a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800120c:	b141      	cbz	r1, 8001220 <setvbuf+0x68>
 800120e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001212:	4299      	cmp	r1, r3
 8001214:	d002      	beq.n	800121c <setvbuf+0x64>
 8001216:	4638      	mov	r0, r7
 8001218:	f000 fabc 	bl	8001794 <_free_r>
 800121c:	2300      	movs	r3, #0
 800121e:	6363      	str	r3, [r4, #52]	; 0x34
 8001220:	2300      	movs	r3, #0
 8001222:	61a3      	str	r3, [r4, #24]
 8001224:	6063      	str	r3, [r4, #4]
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	0619      	lsls	r1, r3, #24
 800122a:	d503      	bpl.n	8001234 <setvbuf+0x7c>
 800122c:	6921      	ldr	r1, [r4, #16]
 800122e:	4638      	mov	r0, r7
 8001230:	f000 fab0 	bl	8001794 <_free_r>
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	f1b8 0f02 	cmp.w	r8, #2
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	d06c      	beq.n	8001320 <setvbuf+0x168>
 8001246:	ab01      	add	r3, sp, #4
 8001248:	466a      	mov	r2, sp
 800124a:	4621      	mov	r1, r4
 800124c:	4638      	mov	r0, r7
 800124e:	f000 fa33 	bl	80016b8 <__swhatbuf_r>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	4318      	orrs	r0, r3
 8001256:	81a0      	strh	r0, [r4, #12]
 8001258:	2d00      	cmp	r5, #0
 800125a:	d130      	bne.n	80012be <setvbuf+0x106>
 800125c:	9d00      	ldr	r5, [sp, #0]
 800125e:	4628      	mov	r0, r5
 8001260:	f000 fa90 	bl	8001784 <malloc>
 8001264:	4606      	mov	r6, r0
 8001266:	2800      	cmp	r0, #0
 8001268:	d155      	bne.n	8001316 <setvbuf+0x15e>
 800126a:	f8dd 9000 	ldr.w	r9, [sp]
 800126e:	45a9      	cmp	r9, r5
 8001270:	d14a      	bne.n	8001308 <setvbuf+0x150>
 8001272:	f04f 35ff 	mov.w	r5, #4294967295
 8001276:	2200      	movs	r2, #0
 8001278:	60a2      	str	r2, [r4, #8]
 800127a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800127e:	6022      	str	r2, [r4, #0]
 8001280:	6122      	str	r2, [r4, #16]
 8001282:	2201      	movs	r2, #1
 8001284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001288:	6162      	str	r2, [r4, #20]
 800128a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	07d2      	lsls	r2, r2, #31
 8001292:	81a3      	strh	r3, [r4, #12]
 8001294:	d405      	bmi.n	80012a2 <setvbuf+0xea>
 8001296:	f413 7f00 	tst.w	r3, #512	; 0x200
 800129a:	d102      	bne.n	80012a2 <setvbuf+0xea>
 800129c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800129e:	f000 fa0a 	bl	80016b6 <__retarget_lock_release_recursive>
 80012a2:	4628      	mov	r0, r5
 80012a4:	b003      	add	sp, #12
 80012a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <setvbuf+0x184>)
 80012ac:	429c      	cmp	r4, r3
 80012ae:	d101      	bne.n	80012b4 <setvbuf+0xfc>
 80012b0:	68bc      	ldr	r4, [r7, #8]
 80012b2:	e793      	b.n	80011dc <setvbuf+0x24>
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <setvbuf+0x188>)
 80012b6:	429c      	cmp	r4, r3
 80012b8:	bf08      	it	eq
 80012ba:	68fc      	ldreq	r4, [r7, #12]
 80012bc:	e78e      	b.n	80011dc <setvbuf+0x24>
 80012be:	2e00      	cmp	r6, #0
 80012c0:	d0cd      	beq.n	800125e <setvbuf+0xa6>
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	b913      	cbnz	r3, 80012cc <setvbuf+0x114>
 80012c6:	4638      	mov	r0, r7
 80012c8:	f000 f956 	bl	8001578 <__sinit>
 80012cc:	f1b8 0f01 	cmp.w	r8, #1
 80012d0:	bf08      	it	eq
 80012d2:	89a3      	ldrheq	r3, [r4, #12]
 80012d4:	6026      	str	r6, [r4, #0]
 80012d6:	bf04      	itt	eq
 80012d8:	f043 0301 	orreq.w	r3, r3, #1
 80012dc:	81a3      	strheq	r3, [r4, #12]
 80012de:	89a2      	ldrh	r2, [r4, #12]
 80012e0:	f012 0308 	ands.w	r3, r2, #8
 80012e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80012e8:	d01c      	beq.n	8001324 <setvbuf+0x16c>
 80012ea:	07d3      	lsls	r3, r2, #31
 80012ec:	bf41      	itttt	mi
 80012ee:	2300      	movmi	r3, #0
 80012f0:	426d      	negmi	r5, r5
 80012f2:	60a3      	strmi	r3, [r4, #8]
 80012f4:	61a5      	strmi	r5, [r4, #24]
 80012f6:	bf58      	it	pl
 80012f8:	60a5      	strpl	r5, [r4, #8]
 80012fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80012fc:	f015 0501 	ands.w	r5, r5, #1
 8001300:	d115      	bne.n	800132e <setvbuf+0x176>
 8001302:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001306:	e7c8      	b.n	800129a <setvbuf+0xe2>
 8001308:	4648      	mov	r0, r9
 800130a:	f000 fa3b 	bl	8001784 <malloc>
 800130e:	4606      	mov	r6, r0
 8001310:	2800      	cmp	r0, #0
 8001312:	d0ae      	beq.n	8001272 <setvbuf+0xba>
 8001314:	464d      	mov	r5, r9
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	81a3      	strh	r3, [r4, #12]
 800131e:	e7d0      	b.n	80012c2 <setvbuf+0x10a>
 8001320:	2500      	movs	r5, #0
 8001322:	e7a8      	b.n	8001276 <setvbuf+0xbe>
 8001324:	60a3      	str	r3, [r4, #8]
 8001326:	e7e8      	b.n	80012fa <setvbuf+0x142>
 8001328:	f04f 35ff 	mov.w	r5, #4294967295
 800132c:	e7b9      	b.n	80012a2 <setvbuf+0xea>
 800132e:	2500      	movs	r5, #0
 8001330:	e7b7      	b.n	80012a2 <setvbuf+0xea>
 8001332:	bf00      	nop
 8001334:	2000002c 	.word	0x2000002c
 8001338:	08002264 	.word	0x08002264
 800133c:	08002284 	.word	0x08002284
 8001340:	08002244 	.word	0x08002244

08001344 <__sflush_r>:
 8001344:	898a      	ldrh	r2, [r1, #12]
 8001346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134a:	4605      	mov	r5, r0
 800134c:	0710      	lsls	r0, r2, #28
 800134e:	460c      	mov	r4, r1
 8001350:	d458      	bmi.n	8001404 <__sflush_r+0xc0>
 8001352:	684b      	ldr	r3, [r1, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dc05      	bgt.n	8001364 <__sflush_r+0x20>
 8001358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	dc02      	bgt.n	8001364 <__sflush_r+0x20>
 800135e:	2000      	movs	r0, #0
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001366:	2e00      	cmp	r6, #0
 8001368:	d0f9      	beq.n	800135e <__sflush_r+0x1a>
 800136a:	2300      	movs	r3, #0
 800136c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001370:	682f      	ldr	r7, [r5, #0]
 8001372:	602b      	str	r3, [r5, #0]
 8001374:	d032      	beq.n	80013dc <__sflush_r+0x98>
 8001376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001378:	89a3      	ldrh	r3, [r4, #12]
 800137a:	075a      	lsls	r2, r3, #29
 800137c:	d505      	bpl.n	800138a <__sflush_r+0x46>
 800137e:	6863      	ldr	r3, [r4, #4]
 8001380:	1ac0      	subs	r0, r0, r3
 8001382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001384:	b10b      	cbz	r3, 800138a <__sflush_r+0x46>
 8001386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001388:	1ac0      	subs	r0, r0, r3
 800138a:	2300      	movs	r3, #0
 800138c:	4602      	mov	r2, r0
 800138e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001390:	6a21      	ldr	r1, [r4, #32]
 8001392:	4628      	mov	r0, r5
 8001394:	47b0      	blx	r6
 8001396:	1c43      	adds	r3, r0, #1
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	d106      	bne.n	80013aa <__sflush_r+0x66>
 800139c:	6829      	ldr	r1, [r5, #0]
 800139e:	291d      	cmp	r1, #29
 80013a0:	d82c      	bhi.n	80013fc <__sflush_r+0xb8>
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <__sflush_r+0x108>)
 80013a4:	40ca      	lsrs	r2, r1
 80013a6:	07d6      	lsls	r6, r2, #31
 80013a8:	d528      	bpl.n	80013fc <__sflush_r+0xb8>
 80013aa:	2200      	movs	r2, #0
 80013ac:	6062      	str	r2, [r4, #4]
 80013ae:	04d9      	lsls	r1, r3, #19
 80013b0:	6922      	ldr	r2, [r4, #16]
 80013b2:	6022      	str	r2, [r4, #0]
 80013b4:	d504      	bpl.n	80013c0 <__sflush_r+0x7c>
 80013b6:	1c42      	adds	r2, r0, #1
 80013b8:	d101      	bne.n	80013be <__sflush_r+0x7a>
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	b903      	cbnz	r3, 80013c0 <__sflush_r+0x7c>
 80013be:	6560      	str	r0, [r4, #84]	; 0x54
 80013c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013c2:	602f      	str	r7, [r5, #0]
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d0ca      	beq.n	800135e <__sflush_r+0x1a>
 80013c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d002      	beq.n	80013d6 <__sflush_r+0x92>
 80013d0:	4628      	mov	r0, r5
 80013d2:	f000 f9df 	bl	8001794 <_free_r>
 80013d6:	2000      	movs	r0, #0
 80013d8:	6360      	str	r0, [r4, #52]	; 0x34
 80013da:	e7c1      	b.n	8001360 <__sflush_r+0x1c>
 80013dc:	6a21      	ldr	r1, [r4, #32]
 80013de:	2301      	movs	r3, #1
 80013e0:	4628      	mov	r0, r5
 80013e2:	47b0      	blx	r6
 80013e4:	1c41      	adds	r1, r0, #1
 80013e6:	d1c7      	bne.n	8001378 <__sflush_r+0x34>
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0c4      	beq.n	8001378 <__sflush_r+0x34>
 80013ee:	2b1d      	cmp	r3, #29
 80013f0:	d001      	beq.n	80013f6 <__sflush_r+0xb2>
 80013f2:	2b16      	cmp	r3, #22
 80013f4:	d101      	bne.n	80013fa <__sflush_r+0xb6>
 80013f6:	602f      	str	r7, [r5, #0]
 80013f8:	e7b1      	b.n	800135e <__sflush_r+0x1a>
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001400:	81a3      	strh	r3, [r4, #12]
 8001402:	e7ad      	b.n	8001360 <__sflush_r+0x1c>
 8001404:	690f      	ldr	r7, [r1, #16]
 8001406:	2f00      	cmp	r7, #0
 8001408:	d0a9      	beq.n	800135e <__sflush_r+0x1a>
 800140a:	0793      	lsls	r3, r2, #30
 800140c:	680e      	ldr	r6, [r1, #0]
 800140e:	bf08      	it	eq
 8001410:	694b      	ldreq	r3, [r1, #20]
 8001412:	600f      	str	r7, [r1, #0]
 8001414:	bf18      	it	ne
 8001416:	2300      	movne	r3, #0
 8001418:	eba6 0807 	sub.w	r8, r6, r7
 800141c:	608b      	str	r3, [r1, #8]
 800141e:	f1b8 0f00 	cmp.w	r8, #0
 8001422:	dd9c      	ble.n	800135e <__sflush_r+0x1a>
 8001424:	6a21      	ldr	r1, [r4, #32]
 8001426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001428:	4643      	mov	r3, r8
 800142a:	463a      	mov	r2, r7
 800142c:	4628      	mov	r0, r5
 800142e:	47b0      	blx	r6
 8001430:	2800      	cmp	r0, #0
 8001432:	dc06      	bgt.n	8001442 <__sflush_r+0xfe>
 8001434:	89a3      	ldrh	r3, [r4, #12]
 8001436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143a:	81a3      	strh	r3, [r4, #12]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	e78e      	b.n	8001360 <__sflush_r+0x1c>
 8001442:	4407      	add	r7, r0
 8001444:	eba8 0800 	sub.w	r8, r8, r0
 8001448:	e7e9      	b.n	800141e <__sflush_r+0xda>
 800144a:	bf00      	nop
 800144c:	20400001 	.word	0x20400001

08001450 <_fflush_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	690b      	ldr	r3, [r1, #16]
 8001454:	4605      	mov	r5, r0
 8001456:	460c      	mov	r4, r1
 8001458:	b913      	cbnz	r3, 8001460 <_fflush_r+0x10>
 800145a:	2500      	movs	r5, #0
 800145c:	4628      	mov	r0, r5
 800145e:	bd38      	pop	{r3, r4, r5, pc}
 8001460:	b118      	cbz	r0, 800146a <_fflush_r+0x1a>
 8001462:	6983      	ldr	r3, [r0, #24]
 8001464:	b90b      	cbnz	r3, 800146a <_fflush_r+0x1a>
 8001466:	f000 f887 	bl	8001578 <__sinit>
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <_fflush_r+0x6c>)
 800146c:	429c      	cmp	r4, r3
 800146e:	d11b      	bne.n	80014a8 <_fflush_r+0x58>
 8001470:	686c      	ldr	r4, [r5, #4]
 8001472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ef      	beq.n	800145a <_fflush_r+0xa>
 800147a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800147c:	07d0      	lsls	r0, r2, #31
 800147e:	d404      	bmi.n	800148a <_fflush_r+0x3a>
 8001480:	0599      	lsls	r1, r3, #22
 8001482:	d402      	bmi.n	800148a <_fflush_r+0x3a>
 8001484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001486:	f000 f915 	bl	80016b4 <__retarget_lock_acquire_recursive>
 800148a:	4628      	mov	r0, r5
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff ff59 	bl	8001344 <__sflush_r>
 8001492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001494:	07da      	lsls	r2, r3, #31
 8001496:	4605      	mov	r5, r0
 8001498:	d4e0      	bmi.n	800145c <_fflush_r+0xc>
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	059b      	lsls	r3, r3, #22
 800149e:	d4dd      	bmi.n	800145c <_fflush_r+0xc>
 80014a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014a2:	f000 f908 	bl	80016b6 <__retarget_lock_release_recursive>
 80014a6:	e7d9      	b.n	800145c <_fflush_r+0xc>
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <_fflush_r+0x70>)
 80014aa:	429c      	cmp	r4, r3
 80014ac:	d101      	bne.n	80014b2 <_fflush_r+0x62>
 80014ae:	68ac      	ldr	r4, [r5, #8]
 80014b0:	e7df      	b.n	8001472 <_fflush_r+0x22>
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <_fflush_r+0x74>)
 80014b4:	429c      	cmp	r4, r3
 80014b6:	bf08      	it	eq
 80014b8:	68ec      	ldreq	r4, [r5, #12]
 80014ba:	e7da      	b.n	8001472 <_fflush_r+0x22>
 80014bc:	08002264 	.word	0x08002264
 80014c0:	08002284 	.word	0x08002284
 80014c4:	08002244 	.word	0x08002244

080014c8 <std>:
 80014c8:	2300      	movs	r3, #0
 80014ca:	b510      	push	{r4, lr}
 80014cc:	4604      	mov	r4, r0
 80014ce:	e9c0 3300 	strd	r3, r3, [r0]
 80014d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014d6:	6083      	str	r3, [r0, #8]
 80014d8:	8181      	strh	r1, [r0, #12]
 80014da:	6643      	str	r3, [r0, #100]	; 0x64
 80014dc:	81c2      	strh	r2, [r0, #14]
 80014de:	6183      	str	r3, [r0, #24]
 80014e0:	4619      	mov	r1, r3
 80014e2:	2208      	movs	r2, #8
 80014e4:	305c      	adds	r0, #92	; 0x5c
 80014e6:	f7ff fe3f 	bl	8001168 <memset>
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <std+0x38>)
 80014ec:	6263      	str	r3, [r4, #36]	; 0x24
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <std+0x3c>)
 80014f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <std+0x40>)
 80014f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <std+0x44>)
 80014f8:	6224      	str	r4, [r4, #32]
 80014fa:	6323      	str	r3, [r4, #48]	; 0x30
 80014fc:	bd10      	pop	{r4, pc}
 80014fe:	bf00      	nop
 8001500:	08001f51 	.word	0x08001f51
 8001504:	08001f73 	.word	0x08001f73
 8001508:	08001fab 	.word	0x08001fab
 800150c:	08001fcf 	.word	0x08001fcf

08001510 <_cleanup_r>:
 8001510:	4901      	ldr	r1, [pc, #4]	; (8001518 <_cleanup_r+0x8>)
 8001512:	f000 b8af 	b.w	8001674 <_fwalk_reent>
 8001516:	bf00      	nop
 8001518:	08001451 	.word	0x08001451

0800151c <__sfmoreglue>:
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	2268      	movs	r2, #104	; 0x68
 8001520:	1e4d      	subs	r5, r1, #1
 8001522:	4355      	muls	r5, r2
 8001524:	460e      	mov	r6, r1
 8001526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800152a:	f000 f99f 	bl	800186c <_malloc_r>
 800152e:	4604      	mov	r4, r0
 8001530:	b140      	cbz	r0, 8001544 <__sfmoreglue+0x28>
 8001532:	2100      	movs	r1, #0
 8001534:	e9c0 1600 	strd	r1, r6, [r0]
 8001538:	300c      	adds	r0, #12
 800153a:	60a0      	str	r0, [r4, #8]
 800153c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001540:	f7ff fe12 	bl	8001168 <memset>
 8001544:	4620      	mov	r0, r4
 8001546:	bd70      	pop	{r4, r5, r6, pc}

08001548 <__sfp_lock_acquire>:
 8001548:	4801      	ldr	r0, [pc, #4]	; (8001550 <__sfp_lock_acquire+0x8>)
 800154a:	f000 b8b3 	b.w	80016b4 <__retarget_lock_acquire_recursive>
 800154e:	bf00      	nop
 8001550:	200000b1 	.word	0x200000b1

08001554 <__sfp_lock_release>:
 8001554:	4801      	ldr	r0, [pc, #4]	; (800155c <__sfp_lock_release+0x8>)
 8001556:	f000 b8ae 	b.w	80016b6 <__retarget_lock_release_recursive>
 800155a:	bf00      	nop
 800155c:	200000b1 	.word	0x200000b1

08001560 <__sinit_lock_acquire>:
 8001560:	4801      	ldr	r0, [pc, #4]	; (8001568 <__sinit_lock_acquire+0x8>)
 8001562:	f000 b8a7 	b.w	80016b4 <__retarget_lock_acquire_recursive>
 8001566:	bf00      	nop
 8001568:	200000b2 	.word	0x200000b2

0800156c <__sinit_lock_release>:
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <__sinit_lock_release+0x8>)
 800156e:	f000 b8a2 	b.w	80016b6 <__retarget_lock_release_recursive>
 8001572:	bf00      	nop
 8001574:	200000b2 	.word	0x200000b2

08001578 <__sinit>:
 8001578:	b510      	push	{r4, lr}
 800157a:	4604      	mov	r4, r0
 800157c:	f7ff fff0 	bl	8001560 <__sinit_lock_acquire>
 8001580:	69a3      	ldr	r3, [r4, #24]
 8001582:	b11b      	cbz	r3, 800158c <__sinit+0x14>
 8001584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001588:	f7ff bff0 	b.w	800156c <__sinit_lock_release>
 800158c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001590:	6523      	str	r3, [r4, #80]	; 0x50
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <__sinit+0x68>)
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <__sinit+0x6c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	62a2      	str	r2, [r4, #40]	; 0x28
 800159a:	42a3      	cmp	r3, r4
 800159c:	bf04      	itt	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	61a3      	streq	r3, [r4, #24]
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 f820 	bl	80015e8 <__sfp>
 80015a8:	6060      	str	r0, [r4, #4]
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 f81c 	bl	80015e8 <__sfp>
 80015b0:	60a0      	str	r0, [r4, #8]
 80015b2:	4620      	mov	r0, r4
 80015b4:	f000 f818 	bl	80015e8 <__sfp>
 80015b8:	2200      	movs	r2, #0
 80015ba:	60e0      	str	r0, [r4, #12]
 80015bc:	2104      	movs	r1, #4
 80015be:	6860      	ldr	r0, [r4, #4]
 80015c0:	f7ff ff82 	bl	80014c8 <std>
 80015c4:	68a0      	ldr	r0, [r4, #8]
 80015c6:	2201      	movs	r2, #1
 80015c8:	2109      	movs	r1, #9
 80015ca:	f7ff ff7d 	bl	80014c8 <std>
 80015ce:	68e0      	ldr	r0, [r4, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	2112      	movs	r1, #18
 80015d4:	f7ff ff78 	bl	80014c8 <std>
 80015d8:	2301      	movs	r3, #1
 80015da:	61a3      	str	r3, [r4, #24]
 80015dc:	e7d2      	b.n	8001584 <__sinit+0xc>
 80015de:	bf00      	nop
 80015e0:	08002240 	.word	0x08002240
 80015e4:	08001511 	.word	0x08001511

080015e8 <__sfp>:
 80015e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ea:	4607      	mov	r7, r0
 80015ec:	f7ff ffac 	bl	8001548 <__sfp_lock_acquire>
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <__sfp+0x84>)
 80015f2:	681e      	ldr	r6, [r3, #0]
 80015f4:	69b3      	ldr	r3, [r6, #24]
 80015f6:	b913      	cbnz	r3, 80015fe <__sfp+0x16>
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff ffbd 	bl	8001578 <__sinit>
 80015fe:	3648      	adds	r6, #72	; 0x48
 8001600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001604:	3b01      	subs	r3, #1
 8001606:	d503      	bpl.n	8001610 <__sfp+0x28>
 8001608:	6833      	ldr	r3, [r6, #0]
 800160a:	b30b      	cbz	r3, 8001650 <__sfp+0x68>
 800160c:	6836      	ldr	r6, [r6, #0]
 800160e:	e7f7      	b.n	8001600 <__sfp+0x18>
 8001610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001614:	b9d5      	cbnz	r5, 800164c <__sfp+0x64>
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <__sfp+0x88>)
 8001618:	60e3      	str	r3, [r4, #12]
 800161a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800161e:	6665      	str	r5, [r4, #100]	; 0x64
 8001620:	f000 f847 	bl	80016b2 <__retarget_lock_init_recursive>
 8001624:	f7ff ff96 	bl	8001554 <__sfp_lock_release>
 8001628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800162c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001630:	6025      	str	r5, [r4, #0]
 8001632:	61a5      	str	r5, [r4, #24]
 8001634:	2208      	movs	r2, #8
 8001636:	4629      	mov	r1, r5
 8001638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800163c:	f7ff fd94 	bl	8001168 <memset>
 8001640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001648:	4620      	mov	r0, r4
 800164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800164c:	3468      	adds	r4, #104	; 0x68
 800164e:	e7d9      	b.n	8001604 <__sfp+0x1c>
 8001650:	2104      	movs	r1, #4
 8001652:	4638      	mov	r0, r7
 8001654:	f7ff ff62 	bl	800151c <__sfmoreglue>
 8001658:	4604      	mov	r4, r0
 800165a:	6030      	str	r0, [r6, #0]
 800165c:	2800      	cmp	r0, #0
 800165e:	d1d5      	bne.n	800160c <__sfp+0x24>
 8001660:	f7ff ff78 	bl	8001554 <__sfp_lock_release>
 8001664:	230c      	movs	r3, #12
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	e7ee      	b.n	8001648 <__sfp+0x60>
 800166a:	bf00      	nop
 800166c:	08002240 	.word	0x08002240
 8001670:	ffff0001 	.word	0xffff0001

08001674 <_fwalk_reent>:
 8001674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001678:	4606      	mov	r6, r0
 800167a:	4688      	mov	r8, r1
 800167c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001680:	2700      	movs	r7, #0
 8001682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001686:	f1b9 0901 	subs.w	r9, r9, #1
 800168a:	d505      	bpl.n	8001698 <_fwalk_reent+0x24>
 800168c:	6824      	ldr	r4, [r4, #0]
 800168e:	2c00      	cmp	r4, #0
 8001690:	d1f7      	bne.n	8001682 <_fwalk_reent+0xe>
 8001692:	4638      	mov	r0, r7
 8001694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001698:	89ab      	ldrh	r3, [r5, #12]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d907      	bls.n	80016ae <_fwalk_reent+0x3a>
 800169e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016a2:	3301      	adds	r3, #1
 80016a4:	d003      	beq.n	80016ae <_fwalk_reent+0x3a>
 80016a6:	4629      	mov	r1, r5
 80016a8:	4630      	mov	r0, r6
 80016aa:	47c0      	blx	r8
 80016ac:	4307      	orrs	r7, r0
 80016ae:	3568      	adds	r5, #104	; 0x68
 80016b0:	e7e9      	b.n	8001686 <_fwalk_reent+0x12>

080016b2 <__retarget_lock_init_recursive>:
 80016b2:	4770      	bx	lr

080016b4 <__retarget_lock_acquire_recursive>:
 80016b4:	4770      	bx	lr

080016b6 <__retarget_lock_release_recursive>:
 80016b6:	4770      	bx	lr

080016b8 <__swhatbuf_r>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	460e      	mov	r6, r1
 80016bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c0:	2900      	cmp	r1, #0
 80016c2:	b096      	sub	sp, #88	; 0x58
 80016c4:	4614      	mov	r4, r2
 80016c6:	461d      	mov	r5, r3
 80016c8:	da08      	bge.n	80016dc <__swhatbuf_r+0x24>
 80016ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	602a      	str	r2, [r5, #0]
 80016d2:	061a      	lsls	r2, r3, #24
 80016d4:	d410      	bmi.n	80016f8 <__swhatbuf_r+0x40>
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	e00e      	b.n	80016fa <__swhatbuf_r+0x42>
 80016dc:	466a      	mov	r2, sp
 80016de:	f000 fd4b 	bl	8002178 <_fstat_r>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	dbf1      	blt.n	80016ca <__swhatbuf_r+0x12>
 80016e6:	9a01      	ldr	r2, [sp, #4]
 80016e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016f0:	425a      	negs	r2, r3
 80016f2:	415a      	adcs	r2, r3
 80016f4:	602a      	str	r2, [r5, #0]
 80016f6:	e7ee      	b.n	80016d6 <__swhatbuf_r+0x1e>
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	2000      	movs	r0, #0
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	b016      	add	sp, #88	; 0x58
 8001700:	bd70      	pop	{r4, r5, r6, pc}
	...

08001704 <__smakebuf_r>:
 8001704:	898b      	ldrh	r3, [r1, #12]
 8001706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001708:	079d      	lsls	r5, r3, #30
 800170a:	4606      	mov	r6, r0
 800170c:	460c      	mov	r4, r1
 800170e:	d507      	bpl.n	8001720 <__smakebuf_r+0x1c>
 8001710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	6123      	str	r3, [r4, #16]
 8001718:	2301      	movs	r3, #1
 800171a:	6163      	str	r3, [r4, #20]
 800171c:	b002      	add	sp, #8
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	ab01      	add	r3, sp, #4
 8001722:	466a      	mov	r2, sp
 8001724:	f7ff ffc8 	bl	80016b8 <__swhatbuf_r>
 8001728:	9900      	ldr	r1, [sp, #0]
 800172a:	4605      	mov	r5, r0
 800172c:	4630      	mov	r0, r6
 800172e:	f000 f89d 	bl	800186c <_malloc_r>
 8001732:	b948      	cbnz	r0, 8001748 <__smakebuf_r+0x44>
 8001734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001738:	059a      	lsls	r2, r3, #22
 800173a:	d4ef      	bmi.n	800171c <__smakebuf_r+0x18>
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	e7e3      	b.n	8001710 <__smakebuf_r+0xc>
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <__smakebuf_r+0x7c>)
 800174a:	62b3      	str	r3, [r6, #40]	; 0x28
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	6020      	str	r0, [r4, #0]
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	9b00      	ldr	r3, [sp, #0]
 8001758:	6163      	str	r3, [r4, #20]
 800175a:	9b01      	ldr	r3, [sp, #4]
 800175c:	6120      	str	r0, [r4, #16]
 800175e:	b15b      	cbz	r3, 8001778 <__smakebuf_r+0x74>
 8001760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001764:	4630      	mov	r0, r6
 8001766:	f000 fd19 	bl	800219c <_isatty_r>
 800176a:	b128      	cbz	r0, 8001778 <__smakebuf_r+0x74>
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	81a3      	strh	r3, [r4, #12]
 8001778:	89a0      	ldrh	r0, [r4, #12]
 800177a:	4305      	orrs	r5, r0
 800177c:	81a5      	strh	r5, [r4, #12]
 800177e:	e7cd      	b.n	800171c <__smakebuf_r+0x18>
 8001780:	08001511 	.word	0x08001511

08001784 <malloc>:
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <malloc+0xc>)
 8001786:	4601      	mov	r1, r0
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	f000 b86f 	b.w	800186c <_malloc_r>
 800178e:	bf00      	nop
 8001790:	2000002c 	.word	0x2000002c

08001794 <_free_r>:
 8001794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001796:	2900      	cmp	r1, #0
 8001798:	d044      	beq.n	8001824 <_free_r+0x90>
 800179a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179e:	9001      	str	r0, [sp, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f1a1 0404 	sub.w	r4, r1, #4
 80017a6:	bfb8      	it	lt
 80017a8:	18e4      	addlt	r4, r4, r3
 80017aa:	f000 fd19 	bl	80021e0 <__malloc_lock>
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <_free_r+0x94>)
 80017b0:	9801      	ldr	r0, [sp, #4]
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	b933      	cbnz	r3, 80017c4 <_free_r+0x30>
 80017b6:	6063      	str	r3, [r4, #4]
 80017b8:	6014      	str	r4, [r2, #0]
 80017ba:	b003      	add	sp, #12
 80017bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017c0:	f000 bd14 	b.w	80021ec <__malloc_unlock>
 80017c4:	42a3      	cmp	r3, r4
 80017c6:	d908      	bls.n	80017da <_free_r+0x46>
 80017c8:	6825      	ldr	r5, [r4, #0]
 80017ca:	1961      	adds	r1, r4, r5
 80017cc:	428b      	cmp	r3, r1
 80017ce:	bf01      	itttt	eq
 80017d0:	6819      	ldreq	r1, [r3, #0]
 80017d2:	685b      	ldreq	r3, [r3, #4]
 80017d4:	1949      	addeq	r1, r1, r5
 80017d6:	6021      	streq	r1, [r4, #0]
 80017d8:	e7ed      	b.n	80017b6 <_free_r+0x22>
 80017da:	461a      	mov	r2, r3
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	b10b      	cbz	r3, 80017e4 <_free_r+0x50>
 80017e0:	42a3      	cmp	r3, r4
 80017e2:	d9fa      	bls.n	80017da <_free_r+0x46>
 80017e4:	6811      	ldr	r1, [r2, #0]
 80017e6:	1855      	adds	r5, r2, r1
 80017e8:	42a5      	cmp	r5, r4
 80017ea:	d10b      	bne.n	8001804 <_free_r+0x70>
 80017ec:	6824      	ldr	r4, [r4, #0]
 80017ee:	4421      	add	r1, r4
 80017f0:	1854      	adds	r4, r2, r1
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	d1e0      	bne.n	80017ba <_free_r+0x26>
 80017f8:	681c      	ldr	r4, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	6053      	str	r3, [r2, #4]
 80017fe:	4421      	add	r1, r4
 8001800:	6011      	str	r1, [r2, #0]
 8001802:	e7da      	b.n	80017ba <_free_r+0x26>
 8001804:	d902      	bls.n	800180c <_free_r+0x78>
 8001806:	230c      	movs	r3, #12
 8001808:	6003      	str	r3, [r0, #0]
 800180a:	e7d6      	b.n	80017ba <_free_r+0x26>
 800180c:	6825      	ldr	r5, [r4, #0]
 800180e:	1961      	adds	r1, r4, r5
 8001810:	428b      	cmp	r3, r1
 8001812:	bf04      	itt	eq
 8001814:	6819      	ldreq	r1, [r3, #0]
 8001816:	685b      	ldreq	r3, [r3, #4]
 8001818:	6063      	str	r3, [r4, #4]
 800181a:	bf04      	itt	eq
 800181c:	1949      	addeq	r1, r1, r5
 800181e:	6021      	streq	r1, [r4, #0]
 8001820:	6054      	str	r4, [r2, #4]
 8001822:	e7ca      	b.n	80017ba <_free_r+0x26>
 8001824:	b003      	add	sp, #12
 8001826:	bd30      	pop	{r4, r5, pc}
 8001828:	200000b4 	.word	0x200000b4

0800182c <sbrk_aligned>:
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	4e0e      	ldr	r6, [pc, #56]	; (8001868 <sbrk_aligned+0x3c>)
 8001830:	460c      	mov	r4, r1
 8001832:	6831      	ldr	r1, [r6, #0]
 8001834:	4605      	mov	r5, r0
 8001836:	b911      	cbnz	r1, 800183e <sbrk_aligned+0x12>
 8001838:	f000 fb7a 	bl	8001f30 <_sbrk_r>
 800183c:	6030      	str	r0, [r6, #0]
 800183e:	4621      	mov	r1, r4
 8001840:	4628      	mov	r0, r5
 8001842:	f000 fb75 	bl	8001f30 <_sbrk_r>
 8001846:	1c43      	adds	r3, r0, #1
 8001848:	d00a      	beq.n	8001860 <sbrk_aligned+0x34>
 800184a:	1cc4      	adds	r4, r0, #3
 800184c:	f024 0403 	bic.w	r4, r4, #3
 8001850:	42a0      	cmp	r0, r4
 8001852:	d007      	beq.n	8001864 <sbrk_aligned+0x38>
 8001854:	1a21      	subs	r1, r4, r0
 8001856:	4628      	mov	r0, r5
 8001858:	f000 fb6a 	bl	8001f30 <_sbrk_r>
 800185c:	3001      	adds	r0, #1
 800185e:	d101      	bne.n	8001864 <sbrk_aligned+0x38>
 8001860:	f04f 34ff 	mov.w	r4, #4294967295
 8001864:	4620      	mov	r0, r4
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	200000b8 	.word	0x200000b8

0800186c <_malloc_r>:
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001870:	1ccd      	adds	r5, r1, #3
 8001872:	f025 0503 	bic.w	r5, r5, #3
 8001876:	3508      	adds	r5, #8
 8001878:	2d0c      	cmp	r5, #12
 800187a:	bf38      	it	cc
 800187c:	250c      	movcc	r5, #12
 800187e:	2d00      	cmp	r5, #0
 8001880:	4607      	mov	r7, r0
 8001882:	db01      	blt.n	8001888 <_malloc_r+0x1c>
 8001884:	42a9      	cmp	r1, r5
 8001886:	d905      	bls.n	8001894 <_malloc_r+0x28>
 8001888:	230c      	movs	r3, #12
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	2600      	movs	r6, #0
 800188e:	4630      	mov	r0, r6
 8001890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001894:	4e2e      	ldr	r6, [pc, #184]	; (8001950 <_malloc_r+0xe4>)
 8001896:	f000 fca3 	bl	80021e0 <__malloc_lock>
 800189a:	6833      	ldr	r3, [r6, #0]
 800189c:	461c      	mov	r4, r3
 800189e:	bb34      	cbnz	r4, 80018ee <_malloc_r+0x82>
 80018a0:	4629      	mov	r1, r5
 80018a2:	4638      	mov	r0, r7
 80018a4:	f7ff ffc2 	bl	800182c <sbrk_aligned>
 80018a8:	1c43      	adds	r3, r0, #1
 80018aa:	4604      	mov	r4, r0
 80018ac:	d14d      	bne.n	800194a <_malloc_r+0xde>
 80018ae:	6834      	ldr	r4, [r6, #0]
 80018b0:	4626      	mov	r6, r4
 80018b2:	2e00      	cmp	r6, #0
 80018b4:	d140      	bne.n	8001938 <_malloc_r+0xcc>
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	4631      	mov	r1, r6
 80018ba:	4638      	mov	r0, r7
 80018bc:	eb04 0803 	add.w	r8, r4, r3
 80018c0:	f000 fb36 	bl	8001f30 <_sbrk_r>
 80018c4:	4580      	cmp	r8, r0
 80018c6:	d13a      	bne.n	800193e <_malloc_r+0xd2>
 80018c8:	6821      	ldr	r1, [r4, #0]
 80018ca:	3503      	adds	r5, #3
 80018cc:	1a6d      	subs	r5, r5, r1
 80018ce:	f025 0503 	bic.w	r5, r5, #3
 80018d2:	3508      	adds	r5, #8
 80018d4:	2d0c      	cmp	r5, #12
 80018d6:	bf38      	it	cc
 80018d8:	250c      	movcc	r5, #12
 80018da:	4629      	mov	r1, r5
 80018dc:	4638      	mov	r0, r7
 80018de:	f7ff ffa5 	bl	800182c <sbrk_aligned>
 80018e2:	3001      	adds	r0, #1
 80018e4:	d02b      	beq.n	800193e <_malloc_r+0xd2>
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	442b      	add	r3, r5
 80018ea:	6023      	str	r3, [r4, #0]
 80018ec:	e00e      	b.n	800190c <_malloc_r+0xa0>
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	1b52      	subs	r2, r2, r5
 80018f2:	d41e      	bmi.n	8001932 <_malloc_r+0xc6>
 80018f4:	2a0b      	cmp	r2, #11
 80018f6:	d916      	bls.n	8001926 <_malloc_r+0xba>
 80018f8:	1961      	adds	r1, r4, r5
 80018fa:	42a3      	cmp	r3, r4
 80018fc:	6025      	str	r5, [r4, #0]
 80018fe:	bf18      	it	ne
 8001900:	6059      	strne	r1, [r3, #4]
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	bf08      	it	eq
 8001906:	6031      	streq	r1, [r6, #0]
 8001908:	5162      	str	r2, [r4, r5]
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	4638      	mov	r0, r7
 800190e:	f104 060b 	add.w	r6, r4, #11
 8001912:	f000 fc6b 	bl	80021ec <__malloc_unlock>
 8001916:	f026 0607 	bic.w	r6, r6, #7
 800191a:	1d23      	adds	r3, r4, #4
 800191c:	1af2      	subs	r2, r6, r3
 800191e:	d0b6      	beq.n	800188e <_malloc_r+0x22>
 8001920:	1b9b      	subs	r3, r3, r6
 8001922:	50a3      	str	r3, [r4, r2]
 8001924:	e7b3      	b.n	800188e <_malloc_r+0x22>
 8001926:	6862      	ldr	r2, [r4, #4]
 8001928:	42a3      	cmp	r3, r4
 800192a:	bf0c      	ite	eq
 800192c:	6032      	streq	r2, [r6, #0]
 800192e:	605a      	strne	r2, [r3, #4]
 8001930:	e7ec      	b.n	800190c <_malloc_r+0xa0>
 8001932:	4623      	mov	r3, r4
 8001934:	6864      	ldr	r4, [r4, #4]
 8001936:	e7b2      	b.n	800189e <_malloc_r+0x32>
 8001938:	4634      	mov	r4, r6
 800193a:	6876      	ldr	r6, [r6, #4]
 800193c:	e7b9      	b.n	80018b2 <_malloc_r+0x46>
 800193e:	230c      	movs	r3, #12
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4638      	mov	r0, r7
 8001944:	f000 fc52 	bl	80021ec <__malloc_unlock>
 8001948:	e7a1      	b.n	800188e <_malloc_r+0x22>
 800194a:	6025      	str	r5, [r4, #0]
 800194c:	e7de      	b.n	800190c <_malloc_r+0xa0>
 800194e:	bf00      	nop
 8001950:	200000b4 	.word	0x200000b4

08001954 <__sfputc_r>:
 8001954:	6893      	ldr	r3, [r2, #8]
 8001956:	3b01      	subs	r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	b410      	push	{r4}
 800195c:	6093      	str	r3, [r2, #8]
 800195e:	da08      	bge.n	8001972 <__sfputc_r+0x1e>
 8001960:	6994      	ldr	r4, [r2, #24]
 8001962:	42a3      	cmp	r3, r4
 8001964:	db01      	blt.n	800196a <__sfputc_r+0x16>
 8001966:	290a      	cmp	r1, #10
 8001968:	d103      	bne.n	8001972 <__sfputc_r+0x1e>
 800196a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800196e:	f000 bb33 	b.w	8001fd8 <__swbuf_r>
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	1c58      	adds	r0, r3, #1
 8001976:	6010      	str	r0, [r2, #0]
 8001978:	7019      	strb	r1, [r3, #0]
 800197a:	4608      	mov	r0, r1
 800197c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001980:	4770      	bx	lr

08001982 <__sfputs_r>:
 8001982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001984:	4606      	mov	r6, r0
 8001986:	460f      	mov	r7, r1
 8001988:	4614      	mov	r4, r2
 800198a:	18d5      	adds	r5, r2, r3
 800198c:	42ac      	cmp	r4, r5
 800198e:	d101      	bne.n	8001994 <__sfputs_r+0x12>
 8001990:	2000      	movs	r0, #0
 8001992:	e007      	b.n	80019a4 <__sfputs_r+0x22>
 8001994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001998:	463a      	mov	r2, r7
 800199a:	4630      	mov	r0, r6
 800199c:	f7ff ffda 	bl	8001954 <__sfputc_r>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	d1f3      	bne.n	800198c <__sfputs_r+0xa>
 80019a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019a8 <_vfiprintf_r>:
 80019a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ac:	460d      	mov	r5, r1
 80019ae:	b09d      	sub	sp, #116	; 0x74
 80019b0:	4614      	mov	r4, r2
 80019b2:	4698      	mov	r8, r3
 80019b4:	4606      	mov	r6, r0
 80019b6:	b118      	cbz	r0, 80019c0 <_vfiprintf_r+0x18>
 80019b8:	6983      	ldr	r3, [r0, #24]
 80019ba:	b90b      	cbnz	r3, 80019c0 <_vfiprintf_r+0x18>
 80019bc:	f7ff fddc 	bl	8001578 <__sinit>
 80019c0:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <_vfiprintf_r+0x240>)
 80019c2:	429d      	cmp	r5, r3
 80019c4:	d11b      	bne.n	80019fe <_vfiprintf_r+0x56>
 80019c6:	6875      	ldr	r5, [r6, #4]
 80019c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019ca:	07d9      	lsls	r1, r3, #31
 80019cc:	d405      	bmi.n	80019da <_vfiprintf_r+0x32>
 80019ce:	89ab      	ldrh	r3, [r5, #12]
 80019d0:	059a      	lsls	r2, r3, #22
 80019d2:	d402      	bmi.n	80019da <_vfiprintf_r+0x32>
 80019d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019d6:	f7ff fe6d 	bl	80016b4 <__retarget_lock_acquire_recursive>
 80019da:	89ab      	ldrh	r3, [r5, #12]
 80019dc:	071b      	lsls	r3, r3, #28
 80019de:	d501      	bpl.n	80019e4 <_vfiprintf_r+0x3c>
 80019e0:	692b      	ldr	r3, [r5, #16]
 80019e2:	b9eb      	cbnz	r3, 8001a20 <_vfiprintf_r+0x78>
 80019e4:	4629      	mov	r1, r5
 80019e6:	4630      	mov	r0, r6
 80019e8:	f000 fb48 	bl	800207c <__swsetup_r>
 80019ec:	b1c0      	cbz	r0, 8001a20 <_vfiprintf_r+0x78>
 80019ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019f0:	07dc      	lsls	r4, r3, #31
 80019f2:	d50e      	bpl.n	8001a12 <_vfiprintf_r+0x6a>
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	b01d      	add	sp, #116	; 0x74
 80019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <_vfiprintf_r+0x244>)
 8001a00:	429d      	cmp	r5, r3
 8001a02:	d101      	bne.n	8001a08 <_vfiprintf_r+0x60>
 8001a04:	68b5      	ldr	r5, [r6, #8]
 8001a06:	e7df      	b.n	80019c8 <_vfiprintf_r+0x20>
 8001a08:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <_vfiprintf_r+0x248>)
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	bf08      	it	eq
 8001a0e:	68f5      	ldreq	r5, [r6, #12]
 8001a10:	e7da      	b.n	80019c8 <_vfiprintf_r+0x20>
 8001a12:	89ab      	ldrh	r3, [r5, #12]
 8001a14:	0598      	lsls	r0, r3, #22
 8001a16:	d4ed      	bmi.n	80019f4 <_vfiprintf_r+0x4c>
 8001a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a1a:	f7ff fe4c 	bl	80016b6 <__retarget_lock_release_recursive>
 8001a1e:	e7e9      	b.n	80019f4 <_vfiprintf_r+0x4c>
 8001a20:	2300      	movs	r3, #0
 8001a22:	9309      	str	r3, [sp, #36]	; 0x24
 8001a24:	2320      	movs	r3, #32
 8001a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a2e:	2330      	movs	r3, #48	; 0x30
 8001a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001bf4 <_vfiprintf_r+0x24c>
 8001a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a38:	f04f 0901 	mov.w	r9, #1
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	469a      	mov	sl, r3
 8001a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a44:	b10a      	cbz	r2, 8001a4a <_vfiprintf_r+0xa2>
 8001a46:	2a25      	cmp	r2, #37	; 0x25
 8001a48:	d1f9      	bne.n	8001a3e <_vfiprintf_r+0x96>
 8001a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8001a4e:	d00b      	beq.n	8001a68 <_vfiprintf_r+0xc0>
 8001a50:	465b      	mov	r3, fp
 8001a52:	4622      	mov	r2, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	4630      	mov	r0, r6
 8001a58:	f7ff ff93 	bl	8001982 <__sfputs_r>
 8001a5c:	3001      	adds	r0, #1
 8001a5e:	f000 80aa 	beq.w	8001bb6 <_vfiprintf_r+0x20e>
 8001a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a64:	445a      	add	r2, fp
 8001a66:	9209      	str	r2, [sp, #36]	; 0x24
 8001a68:	f89a 3000 	ldrb.w	r3, [sl]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80a2 	beq.w	8001bb6 <_vfiprintf_r+0x20e>
 8001a72:	2300      	movs	r3, #0
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a7c:	f10a 0a01 	add.w	sl, sl, #1
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	9307      	str	r3, [sp, #28]
 8001a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a88:	931a      	str	r3, [sp, #104]	; 0x68
 8001a8a:	4654      	mov	r4, sl
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a92:	4858      	ldr	r0, [pc, #352]	; (8001bf4 <_vfiprintf_r+0x24c>)
 8001a94:	f7fe fb9c 	bl	80001d0 <memchr>
 8001a98:	9a04      	ldr	r2, [sp, #16]
 8001a9a:	b9d8      	cbnz	r0, 8001ad4 <_vfiprintf_r+0x12c>
 8001a9c:	06d1      	lsls	r1, r2, #27
 8001a9e:	bf44      	itt	mi
 8001aa0:	2320      	movmi	r3, #32
 8001aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aa6:	0713      	lsls	r3, r2, #28
 8001aa8:	bf44      	itt	mi
 8001aaa:	232b      	movmi	r3, #43	; 0x2b
 8001aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ab6:	d015      	beq.n	8001ae4 <_vfiprintf_r+0x13c>
 8001ab8:	9a07      	ldr	r2, [sp, #28]
 8001aba:	4654      	mov	r4, sl
 8001abc:	2000      	movs	r0, #0
 8001abe:	f04f 0c0a 	mov.w	ip, #10
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ac8:	3b30      	subs	r3, #48	; 0x30
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	d94e      	bls.n	8001b6c <_vfiprintf_r+0x1c4>
 8001ace:	b1b0      	cbz	r0, 8001afe <_vfiprintf_r+0x156>
 8001ad0:	9207      	str	r2, [sp, #28]
 8001ad2:	e014      	b.n	8001afe <_vfiprintf_r+0x156>
 8001ad4:	eba0 0308 	sub.w	r3, r0, r8
 8001ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	46a2      	mov	sl, r4
 8001ae2:	e7d2      	b.n	8001a8a <_vfiprintf_r+0xe2>
 8001ae4:	9b03      	ldr	r3, [sp, #12]
 8001ae6:	1d19      	adds	r1, r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	9103      	str	r1, [sp, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bfbb      	ittet	lt
 8001af0:	425b      	neglt	r3, r3
 8001af2:	f042 0202 	orrlt.w	r2, r2, #2
 8001af6:	9307      	strge	r3, [sp, #28]
 8001af8:	9307      	strlt	r3, [sp, #28]
 8001afa:	bfb8      	it	lt
 8001afc:	9204      	strlt	r2, [sp, #16]
 8001afe:	7823      	ldrb	r3, [r4, #0]
 8001b00:	2b2e      	cmp	r3, #46	; 0x2e
 8001b02:	d10c      	bne.n	8001b1e <_vfiprintf_r+0x176>
 8001b04:	7863      	ldrb	r3, [r4, #1]
 8001b06:	2b2a      	cmp	r3, #42	; 0x2a
 8001b08:	d135      	bne.n	8001b76 <_vfiprintf_r+0x1ce>
 8001b0a:	9b03      	ldr	r3, [sp, #12]
 8001b0c:	1d1a      	adds	r2, r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	9203      	str	r2, [sp, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bfb8      	it	lt
 8001b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b1a:	3402      	adds	r4, #2
 8001b1c:	9305      	str	r3, [sp, #20]
 8001b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001c04 <_vfiprintf_r+0x25c>
 8001b22:	7821      	ldrb	r1, [r4, #0]
 8001b24:	2203      	movs	r2, #3
 8001b26:	4650      	mov	r0, sl
 8001b28:	f7fe fb52 	bl	80001d0 <memchr>
 8001b2c:	b140      	cbz	r0, 8001b40 <_vfiprintf_r+0x198>
 8001b2e:	2340      	movs	r3, #64	; 0x40
 8001b30:	eba0 000a 	sub.w	r0, r0, sl
 8001b34:	fa03 f000 	lsl.w	r0, r3, r0
 8001b38:	9b04      	ldr	r3, [sp, #16]
 8001b3a:	4303      	orrs	r3, r0
 8001b3c:	3401      	adds	r4, #1
 8001b3e:	9304      	str	r3, [sp, #16]
 8001b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b44:	482c      	ldr	r0, [pc, #176]	; (8001bf8 <_vfiprintf_r+0x250>)
 8001b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	f7fe fb40 	bl	80001d0 <memchr>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d03f      	beq.n	8001bd4 <_vfiprintf_r+0x22c>
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <_vfiprintf_r+0x254>)
 8001b56:	bb1b      	cbnz	r3, 8001ba0 <_vfiprintf_r+0x1f8>
 8001b58:	9b03      	ldr	r3, [sp, #12]
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	f023 0307 	bic.w	r3, r3, #7
 8001b60:	3308      	adds	r3, #8
 8001b62:	9303      	str	r3, [sp, #12]
 8001b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b66:	443b      	add	r3, r7
 8001b68:	9309      	str	r3, [sp, #36]	; 0x24
 8001b6a:	e767      	b.n	8001a3c <_vfiprintf_r+0x94>
 8001b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b70:	460c      	mov	r4, r1
 8001b72:	2001      	movs	r0, #1
 8001b74:	e7a5      	b.n	8001ac2 <_vfiprintf_r+0x11a>
 8001b76:	2300      	movs	r3, #0
 8001b78:	3401      	adds	r4, #1
 8001b7a:	9305      	str	r3, [sp, #20]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 0c0a 	mov.w	ip, #10
 8001b82:	4620      	mov	r0, r4
 8001b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b88:	3a30      	subs	r2, #48	; 0x30
 8001b8a:	2a09      	cmp	r2, #9
 8001b8c:	d903      	bls.n	8001b96 <_vfiprintf_r+0x1ee>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0c5      	beq.n	8001b1e <_vfiprintf_r+0x176>
 8001b92:	9105      	str	r1, [sp, #20]
 8001b94:	e7c3      	b.n	8001b1e <_vfiprintf_r+0x176>
 8001b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e7f0      	b.n	8001b82 <_vfiprintf_r+0x1da>
 8001ba0:	ab03      	add	r3, sp, #12
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <_vfiprintf_r+0x258>)
 8001ba8:	a904      	add	r1, sp, #16
 8001baa:	4630      	mov	r0, r6
 8001bac:	f3af 8000 	nop.w
 8001bb0:	4607      	mov	r7, r0
 8001bb2:	1c78      	adds	r0, r7, #1
 8001bb4:	d1d6      	bne.n	8001b64 <_vfiprintf_r+0x1bc>
 8001bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bb8:	07d9      	lsls	r1, r3, #31
 8001bba:	d405      	bmi.n	8001bc8 <_vfiprintf_r+0x220>
 8001bbc:	89ab      	ldrh	r3, [r5, #12]
 8001bbe:	059a      	lsls	r2, r3, #22
 8001bc0:	d402      	bmi.n	8001bc8 <_vfiprintf_r+0x220>
 8001bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bc4:	f7ff fd77 	bl	80016b6 <__retarget_lock_release_recursive>
 8001bc8:	89ab      	ldrh	r3, [r5, #12]
 8001bca:	065b      	lsls	r3, r3, #25
 8001bcc:	f53f af12 	bmi.w	80019f4 <_vfiprintf_r+0x4c>
 8001bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bd2:	e711      	b.n	80019f8 <_vfiprintf_r+0x50>
 8001bd4:	ab03      	add	r3, sp, #12
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	462a      	mov	r2, r5
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <_vfiprintf_r+0x258>)
 8001bdc:	a904      	add	r1, sp, #16
 8001bde:	4630      	mov	r0, r6
 8001be0:	f000 f880 	bl	8001ce4 <_printf_i>
 8001be4:	e7e4      	b.n	8001bb0 <_vfiprintf_r+0x208>
 8001be6:	bf00      	nop
 8001be8:	08002264 	.word	0x08002264
 8001bec:	08002284 	.word	0x08002284
 8001bf0:	08002244 	.word	0x08002244
 8001bf4:	080022a4 	.word	0x080022a4
 8001bf8:	080022ae 	.word	0x080022ae
 8001bfc:	00000000 	.word	0x00000000
 8001c00:	08001983 	.word	0x08001983
 8001c04:	080022aa 	.word	0x080022aa

08001c08 <_printf_common>:
 8001c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c0c:	4616      	mov	r6, r2
 8001c0e:	4699      	mov	r9, r3
 8001c10:	688a      	ldr	r2, [r1, #8]
 8001c12:	690b      	ldr	r3, [r1, #16]
 8001c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bfb8      	it	lt
 8001c1c:	4613      	movlt	r3, r2
 8001c1e:	6033      	str	r3, [r6, #0]
 8001c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c24:	4607      	mov	r7, r0
 8001c26:	460c      	mov	r4, r1
 8001c28:	b10a      	cbz	r2, 8001c2e <_printf_common+0x26>
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	6033      	str	r3, [r6, #0]
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	0699      	lsls	r1, r3, #26
 8001c32:	bf42      	ittt	mi
 8001c34:	6833      	ldrmi	r3, [r6, #0]
 8001c36:	3302      	addmi	r3, #2
 8001c38:	6033      	strmi	r3, [r6, #0]
 8001c3a:	6825      	ldr	r5, [r4, #0]
 8001c3c:	f015 0506 	ands.w	r5, r5, #6
 8001c40:	d106      	bne.n	8001c50 <_printf_common+0x48>
 8001c42:	f104 0a19 	add.w	sl, r4, #25
 8001c46:	68e3      	ldr	r3, [r4, #12]
 8001c48:	6832      	ldr	r2, [r6, #0]
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	42ab      	cmp	r3, r5
 8001c4e:	dc26      	bgt.n	8001c9e <_printf_common+0x96>
 8001c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c54:	1e13      	subs	r3, r2, #0
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	bf18      	it	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	0692      	lsls	r2, r2, #26
 8001c5e:	d42b      	bmi.n	8001cb8 <_printf_common+0xb0>
 8001c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c64:	4649      	mov	r1, r9
 8001c66:	4638      	mov	r0, r7
 8001c68:	47c0      	blx	r8
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	d01e      	beq.n	8001cac <_printf_common+0xa4>
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	68e5      	ldr	r5, [r4, #12]
 8001c72:	6832      	ldr	r2, [r6, #0]
 8001c74:	f003 0306 	and.w	r3, r3, #6
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	bf08      	it	eq
 8001c7c:	1aad      	subeq	r5, r5, r2
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	6922      	ldr	r2, [r4, #16]
 8001c82:	bf0c      	ite	eq
 8001c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c88:	2500      	movne	r5, #0
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfc4      	itt	gt
 8001c8e:	1a9b      	subgt	r3, r3, r2
 8001c90:	18ed      	addgt	r5, r5, r3
 8001c92:	2600      	movs	r6, #0
 8001c94:	341a      	adds	r4, #26
 8001c96:	42b5      	cmp	r5, r6
 8001c98:	d11a      	bne.n	8001cd0 <_printf_common+0xc8>
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e008      	b.n	8001cb0 <_printf_common+0xa8>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4652      	mov	r2, sl
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	4638      	mov	r0, r7
 8001ca6:	47c0      	blx	r8
 8001ca8:	3001      	adds	r0, #1
 8001caa:	d103      	bne.n	8001cb4 <_printf_common+0xac>
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb4:	3501      	adds	r5, #1
 8001cb6:	e7c6      	b.n	8001c46 <_printf_common+0x3e>
 8001cb8:	18e1      	adds	r1, r4, r3
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	2030      	movs	r0, #48	; 0x30
 8001cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cc2:	4422      	add	r2, r4
 8001cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ccc:	3302      	adds	r3, #2
 8001cce:	e7c7      	b.n	8001c60 <_printf_common+0x58>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	47c0      	blx	r8
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d0e6      	beq.n	8001cac <_printf_common+0xa4>
 8001cde:	3601      	adds	r6, #1
 8001ce0:	e7d9      	b.n	8001c96 <_printf_common+0x8e>
	...

08001ce4 <_printf_i>:
 8001ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ce8:	7e0f      	ldrb	r7, [r1, #24]
 8001cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cec:	2f78      	cmp	r7, #120	; 0x78
 8001cee:	4691      	mov	r9, r2
 8001cf0:	4680      	mov	r8, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	469a      	mov	sl, r3
 8001cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001cfa:	d807      	bhi.n	8001d0c <_printf_i+0x28>
 8001cfc:	2f62      	cmp	r7, #98	; 0x62
 8001cfe:	d80a      	bhi.n	8001d16 <_printf_i+0x32>
 8001d00:	2f00      	cmp	r7, #0
 8001d02:	f000 80d8 	beq.w	8001eb6 <_printf_i+0x1d2>
 8001d06:	2f58      	cmp	r7, #88	; 0x58
 8001d08:	f000 80a3 	beq.w	8001e52 <_printf_i+0x16e>
 8001d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d14:	e03a      	b.n	8001d8c <_printf_i+0xa8>
 8001d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d1a:	2b15      	cmp	r3, #21
 8001d1c:	d8f6      	bhi.n	8001d0c <_printf_i+0x28>
 8001d1e:	a101      	add	r1, pc, #4	; (adr r1, 8001d24 <_printf_i+0x40>)
 8001d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d24:	08001d7d 	.word	0x08001d7d
 8001d28:	08001d91 	.word	0x08001d91
 8001d2c:	08001d0d 	.word	0x08001d0d
 8001d30:	08001d0d 	.word	0x08001d0d
 8001d34:	08001d0d 	.word	0x08001d0d
 8001d38:	08001d0d 	.word	0x08001d0d
 8001d3c:	08001d91 	.word	0x08001d91
 8001d40:	08001d0d 	.word	0x08001d0d
 8001d44:	08001d0d 	.word	0x08001d0d
 8001d48:	08001d0d 	.word	0x08001d0d
 8001d4c:	08001d0d 	.word	0x08001d0d
 8001d50:	08001e9d 	.word	0x08001e9d
 8001d54:	08001dc1 	.word	0x08001dc1
 8001d58:	08001e7f 	.word	0x08001e7f
 8001d5c:	08001d0d 	.word	0x08001d0d
 8001d60:	08001d0d 	.word	0x08001d0d
 8001d64:	08001ebf 	.word	0x08001ebf
 8001d68:	08001d0d 	.word	0x08001d0d
 8001d6c:	08001dc1 	.word	0x08001dc1
 8001d70:	08001d0d 	.word	0x08001d0d
 8001d74:	08001d0d 	.word	0x08001d0d
 8001d78:	08001e87 	.word	0x08001e87
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	1d1a      	adds	r2, r3, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	602a      	str	r2, [r5, #0]
 8001d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0a3      	b.n	8001ed8 <_printf_i+0x1f4>
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	6829      	ldr	r1, [r5, #0]
 8001d94:	0606      	lsls	r6, r0, #24
 8001d96:	f101 0304 	add.w	r3, r1, #4
 8001d9a:	d50a      	bpl.n	8001db2 <_printf_i+0xce>
 8001d9c:	680e      	ldr	r6, [r1, #0]
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	2e00      	cmp	r6, #0
 8001da2:	da03      	bge.n	8001dac <_printf_i+0xc8>
 8001da4:	232d      	movs	r3, #45	; 0x2d
 8001da6:	4276      	negs	r6, r6
 8001da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dac:	485e      	ldr	r0, [pc, #376]	; (8001f28 <_printf_i+0x244>)
 8001dae:	230a      	movs	r3, #10
 8001db0:	e019      	b.n	8001de6 <_printf_i+0x102>
 8001db2:	680e      	ldr	r6, [r1, #0]
 8001db4:	602b      	str	r3, [r5, #0]
 8001db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001dba:	bf18      	it	ne
 8001dbc:	b236      	sxthne	r6, r6
 8001dbe:	e7ef      	b.n	8001da0 <_printf_i+0xbc>
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	1d19      	adds	r1, r3, #4
 8001dc6:	6029      	str	r1, [r5, #0]
 8001dc8:	0601      	lsls	r1, r0, #24
 8001dca:	d501      	bpl.n	8001dd0 <_printf_i+0xec>
 8001dcc:	681e      	ldr	r6, [r3, #0]
 8001dce:	e002      	b.n	8001dd6 <_printf_i+0xf2>
 8001dd0:	0646      	lsls	r6, r0, #25
 8001dd2:	d5fb      	bpl.n	8001dcc <_printf_i+0xe8>
 8001dd4:	881e      	ldrh	r6, [r3, #0]
 8001dd6:	4854      	ldr	r0, [pc, #336]	; (8001f28 <_printf_i+0x244>)
 8001dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8001dda:	bf0c      	ite	eq
 8001ddc:	2308      	moveq	r3, #8
 8001dde:	230a      	movne	r3, #10
 8001de0:	2100      	movs	r1, #0
 8001de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001de6:	6865      	ldr	r5, [r4, #4]
 8001de8:	60a5      	str	r5, [r4, #8]
 8001dea:	2d00      	cmp	r5, #0
 8001dec:	bfa2      	ittt	ge
 8001dee:	6821      	ldrge	r1, [r4, #0]
 8001df0:	f021 0104 	bicge.w	r1, r1, #4
 8001df4:	6021      	strge	r1, [r4, #0]
 8001df6:	b90e      	cbnz	r6, 8001dfc <_printf_i+0x118>
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	d04d      	beq.n	8001e98 <_printf_i+0x1b4>
 8001dfc:	4615      	mov	r5, r2
 8001dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e02:	fb03 6711 	mls	r7, r3, r1, r6
 8001e06:	5dc7      	ldrb	r7, [r0, r7]
 8001e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e0c:	4637      	mov	r7, r6
 8001e0e:	42bb      	cmp	r3, r7
 8001e10:	460e      	mov	r6, r1
 8001e12:	d9f4      	bls.n	8001dfe <_printf_i+0x11a>
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d10b      	bne.n	8001e30 <_printf_i+0x14c>
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	07de      	lsls	r6, r3, #31
 8001e1c:	d508      	bpl.n	8001e30 <_printf_i+0x14c>
 8001e1e:	6923      	ldr	r3, [r4, #16]
 8001e20:	6861      	ldr	r1, [r4, #4]
 8001e22:	4299      	cmp	r1, r3
 8001e24:	bfde      	ittt	le
 8001e26:	2330      	movle	r3, #48	; 0x30
 8001e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e30:	1b52      	subs	r2, r2, r5
 8001e32:	6122      	str	r2, [r4, #16]
 8001e34:	f8cd a000 	str.w	sl, [sp]
 8001e38:	464b      	mov	r3, r9
 8001e3a:	aa03      	add	r2, sp, #12
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f7ff fee2 	bl	8001c08 <_printf_common>
 8001e44:	3001      	adds	r0, #1
 8001e46:	d14c      	bne.n	8001ee2 <_printf_i+0x1fe>
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	b004      	add	sp, #16
 8001e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e52:	4835      	ldr	r0, [pc, #212]	; (8001f28 <_printf_i+0x244>)
 8001e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e58:	6829      	ldr	r1, [r5, #0]
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e60:	6029      	str	r1, [r5, #0]
 8001e62:	061d      	lsls	r5, r3, #24
 8001e64:	d514      	bpl.n	8001e90 <_printf_i+0x1ac>
 8001e66:	07df      	lsls	r7, r3, #31
 8001e68:	bf44      	itt	mi
 8001e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8001e6e:	6023      	strmi	r3, [r4, #0]
 8001e70:	b91e      	cbnz	r6, 8001e7a <_printf_i+0x196>
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f023 0320 	bic.w	r3, r3, #32
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	2310      	movs	r3, #16
 8001e7c:	e7b0      	b.n	8001de0 <_printf_i+0xfc>
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	2378      	movs	r3, #120	; 0x78
 8001e88:	4828      	ldr	r0, [pc, #160]	; (8001f2c <_printf_i+0x248>)
 8001e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e8e:	e7e3      	b.n	8001e58 <_printf_i+0x174>
 8001e90:	0659      	lsls	r1, r3, #25
 8001e92:	bf48      	it	mi
 8001e94:	b2b6      	uxthmi	r6, r6
 8001e96:	e7e6      	b.n	8001e66 <_printf_i+0x182>
 8001e98:	4615      	mov	r5, r2
 8001e9a:	e7bb      	b.n	8001e14 <_printf_i+0x130>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	6826      	ldr	r6, [r4, #0]
 8001ea0:	6961      	ldr	r1, [r4, #20]
 8001ea2:	1d18      	adds	r0, r3, #4
 8001ea4:	6028      	str	r0, [r5, #0]
 8001ea6:	0635      	lsls	r5, r6, #24
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	d501      	bpl.n	8001eb0 <_printf_i+0x1cc>
 8001eac:	6019      	str	r1, [r3, #0]
 8001eae:	e002      	b.n	8001eb6 <_printf_i+0x1d2>
 8001eb0:	0670      	lsls	r0, r6, #25
 8001eb2:	d5fb      	bpl.n	8001eac <_printf_i+0x1c8>
 8001eb4:	8019      	strh	r1, [r3, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6123      	str	r3, [r4, #16]
 8001eba:	4615      	mov	r5, r2
 8001ebc:	e7ba      	b.n	8001e34 <_printf_i+0x150>
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	1d1a      	adds	r2, r3, #4
 8001ec2:	602a      	str	r2, [r5, #0]
 8001ec4:	681d      	ldr	r5, [r3, #0]
 8001ec6:	6862      	ldr	r2, [r4, #4]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7fe f980 	bl	80001d0 <memchr>
 8001ed0:	b108      	cbz	r0, 8001ed6 <_printf_i+0x1f2>
 8001ed2:	1b40      	subs	r0, r0, r5
 8001ed4:	6060      	str	r0, [r4, #4]
 8001ed6:	6863      	ldr	r3, [r4, #4]
 8001ed8:	6123      	str	r3, [r4, #16]
 8001eda:	2300      	movs	r3, #0
 8001edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ee0:	e7a8      	b.n	8001e34 <_printf_i+0x150>
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	4640      	mov	r0, r8
 8001eea:	47d0      	blx	sl
 8001eec:	3001      	adds	r0, #1
 8001eee:	d0ab      	beq.n	8001e48 <_printf_i+0x164>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	079b      	lsls	r3, r3, #30
 8001ef4:	d413      	bmi.n	8001f1e <_printf_i+0x23a>
 8001ef6:	68e0      	ldr	r0, [r4, #12]
 8001ef8:	9b03      	ldr	r3, [sp, #12]
 8001efa:	4298      	cmp	r0, r3
 8001efc:	bfb8      	it	lt
 8001efe:	4618      	movlt	r0, r3
 8001f00:	e7a4      	b.n	8001e4c <_printf_i+0x168>
 8001f02:	2301      	movs	r3, #1
 8001f04:	4632      	mov	r2, r6
 8001f06:	4649      	mov	r1, r9
 8001f08:	4640      	mov	r0, r8
 8001f0a:	47d0      	blx	sl
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d09b      	beq.n	8001e48 <_printf_i+0x164>
 8001f10:	3501      	adds	r5, #1
 8001f12:	68e3      	ldr	r3, [r4, #12]
 8001f14:	9903      	ldr	r1, [sp, #12]
 8001f16:	1a5b      	subs	r3, r3, r1
 8001f18:	42ab      	cmp	r3, r5
 8001f1a:	dcf2      	bgt.n	8001f02 <_printf_i+0x21e>
 8001f1c:	e7eb      	b.n	8001ef6 <_printf_i+0x212>
 8001f1e:	2500      	movs	r5, #0
 8001f20:	f104 0619 	add.w	r6, r4, #25
 8001f24:	e7f5      	b.n	8001f12 <_printf_i+0x22e>
 8001f26:	bf00      	nop
 8001f28:	080022b5 	.word	0x080022b5
 8001f2c:	080022c6 	.word	0x080022c6

08001f30 <_sbrk_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	; (8001f4c <_sbrk_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7ff f800 	bl	8000f40 <_sbrk>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_sbrk_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_sbrk_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	200000bc 	.word	0x200000bc

08001f50 <__sread>:
 8001f50:	b510      	push	{r4, lr}
 8001f52:	460c      	mov	r4, r1
 8001f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f58:	f000 f94e 	bl	80021f8 <_read_r>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	bfab      	itete	ge
 8001f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f62:	89a3      	ldrhlt	r3, [r4, #12]
 8001f64:	181b      	addge	r3, r3, r0
 8001f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f6a:	bfac      	ite	ge
 8001f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f6e:	81a3      	strhlt	r3, [r4, #12]
 8001f70:	bd10      	pop	{r4, pc}

08001f72 <__swrite>:
 8001f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f76:	461f      	mov	r7, r3
 8001f78:	898b      	ldrh	r3, [r1, #12]
 8001f7a:	05db      	lsls	r3, r3, #23
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	4616      	mov	r6, r2
 8001f82:	d505      	bpl.n	8001f90 <__swrite+0x1e>
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f000 f916 	bl	80021bc <_lseek_r>
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f9a:	81a3      	strh	r3, [r4, #12]
 8001f9c:	4632      	mov	r2, r6
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa6:	f7fe bd47 	b.w	8000a38 <_write_r>

08001faa <__sseek>:
 8001faa:	b510      	push	{r4, lr}
 8001fac:	460c      	mov	r4, r1
 8001fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb2:	f000 f903 	bl	80021bc <_lseek_r>
 8001fb6:	1c43      	adds	r3, r0, #1
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	bf15      	itete	ne
 8001fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fc6:	81a3      	strheq	r3, [r4, #12]
 8001fc8:	bf18      	it	ne
 8001fca:	81a3      	strhne	r3, [r4, #12]
 8001fcc:	bd10      	pop	{r4, pc}

08001fce <__sclose>:
 8001fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd2:	f000 b8c1 	b.w	8002158 <_close_r>
	...

08001fd8 <__swbuf_r>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	460e      	mov	r6, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	4605      	mov	r5, r0
 8001fe0:	b118      	cbz	r0, 8001fea <__swbuf_r+0x12>
 8001fe2:	6983      	ldr	r3, [r0, #24]
 8001fe4:	b90b      	cbnz	r3, 8001fea <__swbuf_r+0x12>
 8001fe6:	f7ff fac7 	bl	8001578 <__sinit>
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <__swbuf_r+0x98>)
 8001fec:	429c      	cmp	r4, r3
 8001fee:	d12b      	bne.n	8002048 <__swbuf_r+0x70>
 8001ff0:	686c      	ldr	r4, [r5, #4]
 8001ff2:	69a3      	ldr	r3, [r4, #24]
 8001ff4:	60a3      	str	r3, [r4, #8]
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	071a      	lsls	r2, r3, #28
 8001ffa:	d52f      	bpl.n	800205c <__swbuf_r+0x84>
 8001ffc:	6923      	ldr	r3, [r4, #16]
 8001ffe:	b36b      	cbz	r3, 800205c <__swbuf_r+0x84>
 8002000:	6923      	ldr	r3, [r4, #16]
 8002002:	6820      	ldr	r0, [r4, #0]
 8002004:	1ac0      	subs	r0, r0, r3
 8002006:	6963      	ldr	r3, [r4, #20]
 8002008:	b2f6      	uxtb	r6, r6
 800200a:	4283      	cmp	r3, r0
 800200c:	4637      	mov	r7, r6
 800200e:	dc04      	bgt.n	800201a <__swbuf_r+0x42>
 8002010:	4621      	mov	r1, r4
 8002012:	4628      	mov	r0, r5
 8002014:	f7ff fa1c 	bl	8001450 <_fflush_r>
 8002018:	bb30      	cbnz	r0, 8002068 <__swbuf_r+0x90>
 800201a:	68a3      	ldr	r3, [r4, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	60a3      	str	r3, [r4, #8]
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	6022      	str	r2, [r4, #0]
 8002026:	701e      	strb	r6, [r3, #0]
 8002028:	6963      	ldr	r3, [r4, #20]
 800202a:	3001      	adds	r0, #1
 800202c:	4283      	cmp	r3, r0
 800202e:	d004      	beq.n	800203a <__swbuf_r+0x62>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	07db      	lsls	r3, r3, #31
 8002034:	d506      	bpl.n	8002044 <__swbuf_r+0x6c>
 8002036:	2e0a      	cmp	r6, #10
 8002038:	d104      	bne.n	8002044 <__swbuf_r+0x6c>
 800203a:	4621      	mov	r1, r4
 800203c:	4628      	mov	r0, r5
 800203e:	f7ff fa07 	bl	8001450 <_fflush_r>
 8002042:	b988      	cbnz	r0, 8002068 <__swbuf_r+0x90>
 8002044:	4638      	mov	r0, r7
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <__swbuf_r+0x9c>)
 800204a:	429c      	cmp	r4, r3
 800204c:	d101      	bne.n	8002052 <__swbuf_r+0x7a>
 800204e:	68ac      	ldr	r4, [r5, #8]
 8002050:	e7cf      	b.n	8001ff2 <__swbuf_r+0x1a>
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <__swbuf_r+0xa0>)
 8002054:	429c      	cmp	r4, r3
 8002056:	bf08      	it	eq
 8002058:	68ec      	ldreq	r4, [r5, #12]
 800205a:	e7ca      	b.n	8001ff2 <__swbuf_r+0x1a>
 800205c:	4621      	mov	r1, r4
 800205e:	4628      	mov	r0, r5
 8002060:	f000 f80c 	bl	800207c <__swsetup_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	d0cb      	beq.n	8002000 <__swbuf_r+0x28>
 8002068:	f04f 37ff 	mov.w	r7, #4294967295
 800206c:	e7ea      	b.n	8002044 <__swbuf_r+0x6c>
 800206e:	bf00      	nop
 8002070:	08002264 	.word	0x08002264
 8002074:	08002284 	.word	0x08002284
 8002078:	08002244 	.word	0x08002244

0800207c <__swsetup_r>:
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <__swsetup_r+0xcc>)
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	681d      	ldr	r5, [r3, #0]
 8002082:	4606      	mov	r6, r0
 8002084:	460c      	mov	r4, r1
 8002086:	b125      	cbz	r5, 8002092 <__swsetup_r+0x16>
 8002088:	69ab      	ldr	r3, [r5, #24]
 800208a:	b913      	cbnz	r3, 8002092 <__swsetup_r+0x16>
 800208c:	4628      	mov	r0, r5
 800208e:	f7ff fa73 	bl	8001578 <__sinit>
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <__swsetup_r+0xd0>)
 8002094:	429c      	cmp	r4, r3
 8002096:	d10f      	bne.n	80020b8 <__swsetup_r+0x3c>
 8002098:	686c      	ldr	r4, [r5, #4]
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020a0:	0719      	lsls	r1, r3, #28
 80020a2:	d42c      	bmi.n	80020fe <__swsetup_r+0x82>
 80020a4:	06dd      	lsls	r5, r3, #27
 80020a6:	d411      	bmi.n	80020cc <__swsetup_r+0x50>
 80020a8:	2309      	movs	r3, #9
 80020aa:	6033      	str	r3, [r6, #0]
 80020ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	e03e      	b.n	8002136 <__swsetup_r+0xba>
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <__swsetup_r+0xd4>)
 80020ba:	429c      	cmp	r4, r3
 80020bc:	d101      	bne.n	80020c2 <__swsetup_r+0x46>
 80020be:	68ac      	ldr	r4, [r5, #8]
 80020c0:	e7eb      	b.n	800209a <__swsetup_r+0x1e>
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <__swsetup_r+0xd8>)
 80020c4:	429c      	cmp	r4, r3
 80020c6:	bf08      	it	eq
 80020c8:	68ec      	ldreq	r4, [r5, #12]
 80020ca:	e7e6      	b.n	800209a <__swsetup_r+0x1e>
 80020cc:	0758      	lsls	r0, r3, #29
 80020ce:	d512      	bpl.n	80020f6 <__swsetup_r+0x7a>
 80020d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020d2:	b141      	cbz	r1, 80020e6 <__swsetup_r+0x6a>
 80020d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020d8:	4299      	cmp	r1, r3
 80020da:	d002      	beq.n	80020e2 <__swsetup_r+0x66>
 80020dc:	4630      	mov	r0, r6
 80020de:	f7ff fb59 	bl	8001794 <_free_r>
 80020e2:	2300      	movs	r3, #0
 80020e4:	6363      	str	r3, [r4, #52]	; 0x34
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020ec:	81a3      	strh	r3, [r4, #12]
 80020ee:	2300      	movs	r3, #0
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	81a3      	strh	r3, [r4, #12]
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	b94b      	cbnz	r3, 8002116 <__swsetup_r+0x9a>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d003      	beq.n	8002116 <__swsetup_r+0x9a>
 800210e:	4621      	mov	r1, r4
 8002110:	4630      	mov	r0, r6
 8002112:	f7ff faf7 	bl	8001704 <__smakebuf_r>
 8002116:	89a0      	ldrh	r0, [r4, #12]
 8002118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800211c:	f010 0301 	ands.w	r3, r0, #1
 8002120:	d00a      	beq.n	8002138 <__swsetup_r+0xbc>
 8002122:	2300      	movs	r3, #0
 8002124:	60a3      	str	r3, [r4, #8]
 8002126:	6963      	ldr	r3, [r4, #20]
 8002128:	425b      	negs	r3, r3
 800212a:	61a3      	str	r3, [r4, #24]
 800212c:	6923      	ldr	r3, [r4, #16]
 800212e:	b943      	cbnz	r3, 8002142 <__swsetup_r+0xc6>
 8002130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002134:	d1ba      	bne.n	80020ac <__swsetup_r+0x30>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	0781      	lsls	r1, r0, #30
 800213a:	bf58      	it	pl
 800213c:	6963      	ldrpl	r3, [r4, #20]
 800213e:	60a3      	str	r3, [r4, #8]
 8002140:	e7f4      	b.n	800212c <__swsetup_r+0xb0>
 8002142:	2000      	movs	r0, #0
 8002144:	e7f7      	b.n	8002136 <__swsetup_r+0xba>
 8002146:	bf00      	nop
 8002148:	2000002c 	.word	0x2000002c
 800214c:	08002264 	.word	0x08002264
 8002150:	08002284 	.word	0x08002284
 8002154:	08002244 	.word	0x08002244

08002158 <_close_r>:
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4d06      	ldr	r5, [pc, #24]	; (8002174 <_close_r+0x1c>)
 800215c:	2300      	movs	r3, #0
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	602b      	str	r3, [r5, #0]
 8002164:	f7fe feb7 	bl	8000ed6 <_close>
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	d102      	bne.n	8002172 <_close_r+0x1a>
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	b103      	cbz	r3, 8002172 <_close_r+0x1a>
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	200000bc 	.word	0x200000bc

08002178 <_fstat_r>:
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d07      	ldr	r5, [pc, #28]	; (8002198 <_fstat_r+0x20>)
 800217c:	2300      	movs	r3, #0
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	602b      	str	r3, [r5, #0]
 8002186:	f7fe feb2 	bl	8000eee <_fstat>
 800218a:	1c43      	adds	r3, r0, #1
 800218c:	d102      	bne.n	8002194 <_fstat_r+0x1c>
 800218e:	682b      	ldr	r3, [r5, #0]
 8002190:	b103      	cbz	r3, 8002194 <_fstat_r+0x1c>
 8002192:	6023      	str	r3, [r4, #0]
 8002194:	bd38      	pop	{r3, r4, r5, pc}
 8002196:	bf00      	nop
 8002198:	200000bc 	.word	0x200000bc

0800219c <_isatty_r>:
 800219c:	b538      	push	{r3, r4, r5, lr}
 800219e:	4d06      	ldr	r5, [pc, #24]	; (80021b8 <_isatty_r+0x1c>)
 80021a0:	2300      	movs	r3, #0
 80021a2:	4604      	mov	r4, r0
 80021a4:	4608      	mov	r0, r1
 80021a6:	602b      	str	r3, [r5, #0]
 80021a8:	f7fe feb1 	bl	8000f0e <_isatty>
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d102      	bne.n	80021b6 <_isatty_r+0x1a>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	b103      	cbz	r3, 80021b6 <_isatty_r+0x1a>
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
 80021b8:	200000bc 	.word	0x200000bc

080021bc <_lseek_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4d07      	ldr	r5, [pc, #28]	; (80021dc <_lseek_r+0x20>)
 80021c0:	4604      	mov	r4, r0
 80021c2:	4608      	mov	r0, r1
 80021c4:	4611      	mov	r1, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	602a      	str	r2, [r5, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7fe feaa 	bl	8000f24 <_lseek>
 80021d0:	1c43      	adds	r3, r0, #1
 80021d2:	d102      	bne.n	80021da <_lseek_r+0x1e>
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	b103      	cbz	r3, 80021da <_lseek_r+0x1e>
 80021d8:	6023      	str	r3, [r4, #0]
 80021da:	bd38      	pop	{r3, r4, r5, pc}
 80021dc:	200000bc 	.word	0x200000bc

080021e0 <__malloc_lock>:
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <__malloc_lock+0x8>)
 80021e2:	f7ff ba67 	b.w	80016b4 <__retarget_lock_acquire_recursive>
 80021e6:	bf00      	nop
 80021e8:	200000b0 	.word	0x200000b0

080021ec <__malloc_unlock>:
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <__malloc_unlock+0x8>)
 80021ee:	f7ff ba62 	b.w	80016b6 <__retarget_lock_release_recursive>
 80021f2:	bf00      	nop
 80021f4:	200000b0 	.word	0x200000b0

080021f8 <_read_r>:
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4d07      	ldr	r5, [pc, #28]	; (8002218 <_read_r+0x20>)
 80021fc:	4604      	mov	r4, r0
 80021fe:	4608      	mov	r0, r1
 8002200:	4611      	mov	r1, r2
 8002202:	2200      	movs	r2, #0
 8002204:	602a      	str	r2, [r5, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f7fe fe48 	bl	8000e9c <_read>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d102      	bne.n	8002216 <_read_r+0x1e>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	b103      	cbz	r3, 8002216 <_read_r+0x1e>
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	200000bc 	.word	0x200000bc

0800221c <_init>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr

08002228 <_fini>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	bf00      	nop
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr
