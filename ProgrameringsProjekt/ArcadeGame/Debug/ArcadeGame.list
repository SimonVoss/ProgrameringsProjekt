
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800505c  0800505c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800505c  0800505c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800505c  0800505c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000098  080050fc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080050fc  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080e6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  000281ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00029c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012391  00000000  00000000  0002adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df53  00000000  00000000  0003d149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aeb6  00000000  00000000  0004b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5f52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f58  00000000  00000000  000a5fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c14 	.word	0x08004c14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08004c14 	.word	0x08004c14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	70fb      	strb	r3, [r7, #3]
 8000292:	460b      	mov	r3, r1
 8000294:	70bb      	strb	r3, [r7, #2]
 8000296:	4613      	mov	r3, r2
 8000298:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 80002a2:	78bb      	ldrb	r3, [r7, #2]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d821      	bhi.n	80002ec <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80002ae:	78ba      	ldrb	r2, [r7, #2]
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	461a      	mov	r2, r3
 80002ba:	231f      	movs	r3, #31
 80002bc:	4093      	lsls	r3, r2
 80002be:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	43db      	mvns	r3, r3
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	4013      	ands	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80002ca:	78f9      	ldrb	r1, [r7, #3]
 80002cc:	78ba      	ldrb	r2, [r7, #2]
 80002ce:	4613      	mov	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4413      	add	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30
 80002ea:	e074      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80002ec:	78bb      	ldrb	r3, [r7, #2]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d823      	bhi.n	800033a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80002f8:	78bb      	ldrb	r3, [r7, #2]
 80002fa:	1f5a      	subs	r2, r3, #5
 80002fc:	4613      	mov	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	4413      	add	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	461a      	mov	r2, r3
 8000306:	231f      	movs	r3, #31
 8000308:	4093      	lsls	r3, r2
 800030a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	43db      	mvns	r3, r3
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	4013      	ands	r3, r2
 8000314:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000316:	78f9      	ldrb	r1, [r7, #3]
 8000318:	78bb      	ldrb	r3, [r7, #2]
 800031a:	1f5a      	subs	r2, r3, #5
 800031c:	4613      	mov	r3, r2
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	4413      	add	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4313      	orrs	r3, r2
 8000330:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	635a      	str	r2, [r3, #52]	; 0x34
 8000338:	e04d      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 800033a:	78bb      	ldrb	r3, [r7, #2]
 800033c:	2b0e      	cmp	r3, #14
 800033e:	d825      	bhi.n	800038c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000344:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	f1a3 020a 	sub.w	r2, r3, #10
 800034c:	4613      	mov	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	4413      	add	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	461a      	mov	r2, r3
 8000356:	231f      	movs	r3, #31
 8000358:	4093      	lsls	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	43db      	mvns	r3, r3
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000366:	78f9      	ldrb	r1, [r7, #3]
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	f1a3 020a 	sub.w	r2, r3, #10
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	4313      	orrs	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	639a      	str	r2, [r3, #56]	; 0x38
 800038a:	e024      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000390:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000392:	78bb      	ldrb	r3, [r7, #2]
 8000394:	f1a3 020f 	sub.w	r2, r3, #15
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	461a      	mov	r2, r3
 80003a2:	231f      	movs	r3, #31
 80003a4:	4093      	lsls	r3, r2
 80003a6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	43db      	mvns	r3, r3
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80003b2:	78f9      	ldrb	r1, [r7, #3]
 80003b4:	78bb      	ldrb	r3, [r7, #2]
 80003b6:	f1a3 020f 	sub.w	r2, r3, #15
 80003ba:	4613      	mov	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	4413      	add	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	2b09      	cmp	r3, #9
 80003da:	d923      	bls.n	8000424 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	f1a3 020a 	sub.w	r2, r3, #10
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	2207      	movs	r2, #7
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	699a      	ldr	r2, [r3, #24]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	43db      	mvns	r3, r3
 80003fe:	401a      	ands	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6999      	ldr	r1, [r3, #24]
 8000408:	7878      	ldrb	r0, [r7, #1]
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f1a3 020a 	sub.w	r2, r3, #10
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	fa00 f303 	lsl.w	r3, r0, r3
 800041a:	ea41 0203 	orr.w	r2, r1, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000422:	e01f      	b.n	8000464 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	1e5a      	subs	r2, r3, #1
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	2238      	movs	r2, #56	; 0x38
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	43db      	mvns	r3, r3
 8000444:	401a      	ands	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6959      	ldr	r1, [r3, #20]
 800044e:	7878      	ldrb	r0, [r7, #1]
 8000450:	78fa      	ldrb	r2, [r7, #3]
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	fa00 f303 	lsl.w	r3, r0, r3
 800045c:	ea41 0203 	orr.w	r2, r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	615a      	str	r2, [r3, #20]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f043 0204 	orr.w	r2, r3, #4
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	609a      	str	r2, [r3, #8]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049c:	b29b      	uxth	r3, r3
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4013      	ands	r3, r2
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004c4:	2301      	movs	r3, #1
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	e001      	b.n	80004ce <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004dc:	b480      	push	{r7}
 80004de:	b08b      	sub	sp, #44	; 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	623b      	str	r3, [r7, #32]
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000504:	4b8b      	ldr	r3, [pc, #556]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d011      	beq.n	8000538 <RCC_GetClocksFreq+0x5c>
 8000514:	6a3b      	ldr	r3, [r7, #32]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d837      	bhi.n	800058a <RCC_GetClocksFreq+0xae>
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d003      	beq.n	8000528 <RCC_GetClocksFreq+0x4c>
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	2b04      	cmp	r3, #4
 8000524:	d004      	beq.n	8000530 <RCC_GetClocksFreq+0x54>
 8000526:	e030      	b.n	800058a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a83      	ldr	r2, [pc, #524]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 800052c:	601a      	str	r2, [r3, #0]
      break;
 800052e:	e030      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a81      	ldr	r2, [pc, #516]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000534:	601a      	str	r2, [r3, #0]
      break;
 8000536:	e02c      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000538:	4b7e      	ldr	r3, [pc, #504]	; (8000734 <RCC_GetClocksFreq+0x258>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000540:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000542:	4b7c      	ldr	r3, [pc, #496]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800054a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	0c9b      	lsrs	r3, r3, #18
 8000550:	3302      	adds	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4a77      	ldr	r2, [pc, #476]	; (800073c <RCC_GetClocksFreq+0x260>)
 800055e:	fb02 f303 	mul.w	r3, r2, r3
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
 8000564:	e00d      	b.n	8000582 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000566:	4b73      	ldr	r3, [pc, #460]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000572:	4a71      	ldr	r2, [pc, #452]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fbb2 f2f3 	udiv	r2, r2, r3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000586:	601a      	str	r2, [r3, #0]
      break;
 8000588:	e003      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a6a      	ldr	r2, [pc, #424]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 800058e:	601a      	str	r2, [r3, #0]
      break;
 8000590:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000592:	4b68      	ldr	r3, [pc, #416]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800059a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80005a2:	4a67      	ldr	r2, [pc, #412]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005c2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80005c4:	6a3b      	ldr	r3, [r7, #32]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005ca:	4a5d      	ldr	r2, [pc, #372]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	40da      	lsrs	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005e2:	4b54      	ldr	r3, [pc, #336]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005ea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	0adb      	lsrs	r3, r3, #11
 80005f0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80005f2:	4a53      	ldr	r2, [pc, #332]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	40da      	lsrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800060a:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <RCC_GetClocksFreq+0x258>)
 800060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000612:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800061a:	4a4a      	ldr	r2, [pc, #296]	; (8000744 <RCC_GetClocksFreq+0x268>)
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	b29b      	uxth	r3, r3
 8000624:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	fbb2 f2f3 	udiv	r2, r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	e003      	b.n	8000646 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000646:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800064e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000650:	6a3b      	ldr	r3, [r7, #32]
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000656:	4a3b      	ldr	r2, [pc, #236]	; (8000744 <RCC_GetClocksFreq+0x268>)
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	b29b      	uxth	r3, r3
 8000660:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800066c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	fbb2 f2f3 	udiv	r2, r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	e003      	b.n	8000682 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b10      	cmp	r3, #16
 800068c:	d003      	beq.n	8000696 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a29      	ldr	r2, [pc, #164]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000692:	619a      	str	r2, [r3, #24]
 8000694:	e003      	b.n	800069e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	2b20      	cmp	r3, #32
 80006a8:	d003      	beq.n	80006b2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	e003      	b.n	80006ba <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c6:	d10d      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d108      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d104      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	005a      	lsls	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	621a      	str	r2, [r3, #32]
 80006e2:	e003      	b.n	80006ec <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f8:	d10d      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000700:	429a      	cmp	r2, r3
 8000702:	d108      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d104      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
 8000714:	e003      	b.n	800071e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0303 	and.w	r3, r3, #3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10e      	bne.n	8000748 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
 8000732:	e028      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
 8000734:	40021000 	.word	0x40021000
 8000738:	007a1200 	.word	0x007a1200
 800073c:	003d0900 	.word	0x003d0900
 8000740:	20000000 	.word	0x20000000
 8000744:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000748:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
 800075c:	e013      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d104      	bne.n	8000774 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
 8000772:	e008      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	2b03      	cmp	r3, #3
 800077e:	d102      	bne.n	8000786 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a5f      	ldr	r2, [pc, #380]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	e021      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800079c:	4b57      	ldr	r3, [pc, #348]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a8:	d104      	bne.n	80007b4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b2:	e015      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007c0:	d104      	bne.n	80007cc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	e009      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80007cc:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007d8:	d102      	bne.n	80007e0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a48      	ldr	r2, [pc, #288]	; (8000900 <RCC_GetClocksFreq+0x424>)
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80007e0:	4b46      	ldr	r3, [pc, #280]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d104      	bne.n	80007f6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
 80007f4:	e021      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000802:	d104      	bne.n	800080e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
 800080c:	e015      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800081a:	d104      	bne.n	8000826 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
 8000824:	e009      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800082e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000832:	d102      	bne.n	800083a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a32      	ldr	r2, [pc, #200]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	e021      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800085c:	d104      	bne.n	8000868 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	e015      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000874:	d104      	bne.n	8000880 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	e009      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800088c:	d102      	bne.n	8000894 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80008a8:	e021      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008b6:	d104      	bne.n	80008c2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008c0:	e015      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008ce:	d104      	bne.n	80008da <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008d8:	e009      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80008e6:	d102      	bne.n	80008ee <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <RCC_GetClocksFreq+0x424>)
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008ee:	bf00      	nop
 80008f0:	372c      	adds	r7, #44	; 0x2c
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	007a1200 	.word	0x007a1200

08000904 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000916:	b29a      	uxth	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	b29b      	uxth	r3, r3
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800095a:	2201      	movs	r2, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d103      	bne.n	8000972 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	e005      	b.n	800097e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d102      	bne.n	800097e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	3308      	adds	r3, #8
 800097c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d006      	beq.n	8000992 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000990:	e006      	b.n	80009a0 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	43da      	mvns	r2, r3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	400a      	ands	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	3724      	adds	r7, #36	; 0x24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	2201      	movs	r2, #1
 80009f2:	fa02 f103 	lsl.w	r1, r2, r3
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <NVIC_EnableIRQ+0x30>)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <uart_put_char+0x30>)
 8000a26:	f7ff ff6d 	bl	8000904 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a2a:	bf00      	nop
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <uart_put_char+0x30>)
 8000a30:	f7ff ffbc 	bl	80009ac <USART_GetFlagStatus>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f8      	beq.n	8000a2c <uart_put_char+0x18>
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40004400 	.word	0x40004400

08000a48 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e012      	b.n	8000a82 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0a      	cmp	r3, #10
 8000a66:	d102      	bne.n	8000a6e <_write_r+0x26>
            uart_put_char('\r');
 8000a68:	200d      	movs	r0, #13
 8000a6a:	f7ff ffd3 	bl	8000a14 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffcc 	bl	8000a14 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbe8      	blt.n	8000a5c <_write_r+0x14>
    }

    return len;
 8000a8a:	683b      	ldr	r3, [r7, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000a9c:	4b86      	ldr	r3, [pc, #536]	; (8000cb8 <uart_init+0x224>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fe57 	bl	8003758 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000aaa:	4b83      	ldr	r3, [pc, #524]	; (8000cb8 <uart_init+0x224>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fe50 	bl	8003758 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000ab8:	4b80      	ldr	r3, [pc, #512]	; (8000cbc <uart_init+0x228>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	4a7f      	ldr	r2, [pc, #508]	; (8000cbc <uart_init+0x228>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000ac4:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <uart_init+0x228>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	4a7c      	ldr	r2, [pc, #496]	; (8000cbc <uart_init+0x228>)
 8000aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ace:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000ad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ade:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000aee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000afe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b0a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b0e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b1e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b2a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b2e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3c:	f023 030c 	bic.w	r3, r3, #12
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000b44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4c:	8892      	ldrh	r2, [r2, #4]
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000b52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b60:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b6c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b70:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b80:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b90:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <uart_init+0x22c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <uart_init+0x22c>)
 8000b98:	f023 0301 	bic.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000b9e:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <uart_init+0x22c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a47      	ldr	r2, [pc, #284]	; (8000cc0 <uart_init+0x22c>)
 8000ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000baa:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <uart_init+0x22c>)
 8000bac:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <uart_init+0x22c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000bb2:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <uart_init+0x22c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a42      	ldr	r2, [pc, #264]	; (8000cc0 <uart_init+0x22c>)
 8000bb8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bbc:	f023 030c 	bic.w	r3, r3, #12
 8000bc0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <uart_init+0x22c>)
 8000bc4:	4a3e      	ldr	r2, [pc, #248]	; (8000cc0 <uart_init+0x22c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000bca:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <uart_init+0x22c>)
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <uart_init+0x22c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <uart_init+0x22c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a3a      	ldr	r2, [pc, #232]	; (8000cc0 <uart_init+0x22c>)
 8000bd8:	f043 030c 	orr.w	r3, r3, #12
 8000bdc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <uart_init+0x22c>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <uart_init+0x22c>)
 8000be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <uart_init+0x22c>)
 8000bec:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <uart_init+0x22c>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc6a 	bl	80004dc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <uart_init+0x22c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d010      	beq.n	8000c3a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1a:	005a      	lsls	r2, r3, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	fb01 f202 	mul.w	r2, r1, r2
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c38:	e00d      	b.n	8000c56 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	fb01 f202 	mul.w	r2, r1, r2
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d302      	bcc.n	8000c66 <uart_init+0x1d2>
        divider++;
 8000c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c62:	3301      	adds	r3, #1
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <uart_init+0x22c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c7e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c82:	4013      	ands	r3, r2
 8000c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c86:	4313      	orrs	r3, r2
 8000c88:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <uart_init+0x22c>)
 8000c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <uart_init+0x22c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <uart_init+0x22c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <uart_init+0x230>)
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <uart_init+0x22c>)
 8000ca4:	f7ff fe40 	bl	8000928 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f7ff fe99 	bl	80009e0 <NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3750      	adds	r7, #80	; 0x50
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000034 	.word	0x20000034
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	00050105 	.word	0x00050105

08000cc8 <initArrayBullets>:
#include <bullets.h>

void initArrayBullets(bullet a[], int8_t length){
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	int8_t i;
	for (i=0; i<length;i++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e047      	b.n	8000d6a <initArrayBullets+0xa2>
		a[i].x = 0;
 8000cda:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
		a[i].y = 0;
 8000cf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
		a[i].alive = 0;
 8000d06:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
		a[i].enemy = 0;
 8000d1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
		a[i].vec.x = 0;
 8000d32:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	2200      	movs	r2, #0
 8000d46:	821a      	strh	r2, [r3, #16]
		a[i].vec.y = 0;
 8000d48:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	825a      	strh	r2, [r3, #18]
	for (i=0; i<length;i++){
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbb1      	blt.n	8000cda <initArrayBullets+0x12>
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <bulletSpaceship>:


void bulletSpaceship(int16_t x, int16_t y, bullet a[]){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	603a      	str	r2, [r7, #0]
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	460b      	mov	r3, r1
 8000d92:	80bb      	strh	r3, [r7, #4]
	int8_t i;
	for (i=0 ; i<50; i++){
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e05d      	b.n	8000e56 <bulletSpaceship+0xd2>
		if (a[i].alive == 0){
 8000d9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	461a      	mov	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14b      	bne.n	8000e4a <bulletSpaceship+0xc6>
			a[i].x = x<<8;
 8000db2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000db6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	020a      	lsls	r2, r1, #8
 8000dca:	601a      	str	r2, [r3, #0]
			a[i].y = y<<8;
 8000dcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	020a      	lsls	r2, r1, #8
 8000de4:	605a      	str	r2, [r3, #4]
			a[i].alive = 1<<8;
 8000de6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	461a      	mov	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	609a      	str	r2, [r3, #8]
			a[i].vec.x = 0<<8;
 8000dfe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	821a      	strh	r2, [r3, #16]
			a[i].vec.y = -2<<8;
 8000e14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	461a      	mov	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8000e2a:	825a      	strh	r2, [r3, #18]
			gotoxy(x,y);
 8000e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fc86 	bl	8001748 <gotoxy>
			fgcolor(10);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f000 fc43 	bl	80016c8 <fgcolor>
			printf("%c",254);
 8000e42:	20fe      	movs	r0, #254	; 0xfe
 8000e44:	f002 fc72 	bl	800372c <putchar>
			break;
 8000e48:	e00a      	b.n	8000e60 <bulletSpaceship+0xdc>
	for (i=0 ; i<50; i++){
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	2b31      	cmp	r3, #49	; 0x31
 8000e5c:	dd9d      	ble.n	8000d9a <bulletSpaceship+0x16>
		}
	}

}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <bulletEnemy>:

void bulletEnemy(badShip b[], bullet a[]){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	int32_t i,j;
	for(j = 0; j < 20; j++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	e093      	b.n	8000fa0 <bulletEnemy+0x138>
		if(!(b[j].alive == 0)) {
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8085 	beq.w	8000f9a <bulletEnemy+0x132>
			for (i=0 ; i<50; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e07d      	b.n	8000f92 <bulletEnemy+0x12a>
				if (a[i].alive == 0){
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d16f      	bne.n	8000f8c <bulletEnemy+0x124>
					a[i].x = b[j].x;
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	460a      	mov	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
					a[i].y = b[j].y;
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	605a      	str	r2, [r3, #4]
					a[i].alive = 1<<8;
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	461a      	mov	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0c:	609a      	str	r2, [r3, #8]
					a[i].enemy = 1<<8;
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f22:	60da      	str	r2, [r3, #12]
					a[i].vec.x = 0<<8;
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	821a      	strh	r2, [r3, #16]
					a[i].vec.y = 2<<8;
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	461a      	mov	r2, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4c:	825a      	strh	r2, [r3, #18]
					gotoxy(b[j].x>>8,b[j].y>>8);
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f000 fbe5 	bl	8001748 <gotoxy>
					fgcolor(13);
 8000f7e:	200d      	movs	r0, #13
 8000f80:	f000 fba2 	bl	80016c8 <fgcolor>
					printf("%c",254);
 8000f84:	20fe      	movs	r0, #254	; 0xfe
 8000f86:	f002 fbd1 	bl	800372c <putchar>
					break;
 8000f8a:	e006      	b.n	8000f9a <bulletEnemy+0x132>
			for (i=0 ; i<50; i++){
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b31      	cmp	r3, #49	; 0x31
 8000f96:	f77f af7e 	ble.w	8000e96 <bulletEnemy+0x2e>
	for(j = 0; j < 20; j++) {
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b13      	cmp	r3, #19
 8000fa4:	f77f af68 	ble.w	8000e78 <bulletEnemy+0x10>
				}
			}
		}
	}
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <updateBulletFriendly>:

void updateBulletFriendly(bullet a[]){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b088      	sub	sp, #32
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	int32_t i;
	for (i=0 ; i<50; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e0da      	b.n	8001176 <updateBulletFriendly+0x1c4>
		if (a[i].alive>>8==1){
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	121b      	asrs	r3, r3, #8
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 80cb 	bne.w	8001170 <updateBulletFriendly+0x1be>
			if(a[i].enemy==0) {
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 80bf 	bne.w	8001170 <updateBulletFriendly+0x1be>
				int32_t x = a[i].x>>8;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	121b      	asrs	r3, r3, #8
 8001006:	61bb      	str	r3, [r7, #24]
				int32_t y = a[i].y>>8;
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	121b      	asrs	r3, r3, #8
 800101c:	617b      	str	r3, [r7, #20]
				a[i].x = a[i].x+a[i].vec.x;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	180a      	adds	r2, r1, r0
 8001058:	601a      	str	r2, [r3, #0]
				a[i].y = a[i].y+a[i].vec.y;
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6859      	ldr	r1, [r3, #4]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001080:	4618      	mov	r0, r3
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	180a      	adds	r2, r1, r0
 8001094:	605a      	str	r2, [r3, #4]
				int32_t newX = a[i].x>>8;
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	121b      	asrs	r3, r3, #8
 80010aa:	613b      	str	r3, [r7, #16]
				int32_t newY = a[i].y>>8;
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	121b      	asrs	r3, r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
				if (newY<122 && newY>3){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b79      	cmp	r3, #121	; 0x79
 80010c6:	dc17      	bgt.n	80010f8 <updateBulletFriendly+0x146>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	dd14      	ble.n	80010f8 <updateBulletFriendly+0x146>
					gotoxy(x,y);
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	69b8      	ldr	r0, [r7, #24]
 80010d2:	f000 fb39 	bl	8001748 <gotoxy>
					fgcolor(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 faf6 	bl	80016c8 <fgcolor>
					printf("%c",254);
 80010dc:	20fe      	movs	r0, #254	; 0xfe
 80010de:	f002 fb25 	bl	800372c <putchar>
					gotoxy(newX,newY);
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	6938      	ldr	r0, [r7, #16]
 80010e6:	f000 fb2f 	bl	8001748 <gotoxy>
					fgcolor(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f000 faec 	bl	80016c8 <fgcolor>
					printf("%c",254);
 80010f0:	20fe      	movs	r0, #254	; 0xfe
 80010f2:	f002 fb1b 	bl	800372c <putchar>
 80010f6:	e03b      	b.n	8001170 <updateBulletFriendly+0x1be>
				}else {
					gotoxy(x,y);
 80010f8:	6979      	ldr	r1, [r7, #20]
 80010fa:	69b8      	ldr	r0, [r7, #24]
 80010fc:	f000 fb24 	bl	8001748 <gotoxy>
					fgcolor(0);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fae1 	bl	80016c8 <fgcolor>
					printf("%c",254);
 8001106:	20fe      	movs	r0, #254	; 0xfe
 8001108:	f002 fb10 	bl	800372c <putchar>
					a[i].alive = 0;
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
					a[i].x=0;
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
					a[i].y=0;
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
					a[i].vec.x=0;
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	2200      	movs	r2, #0
 800115a:	821a      	strh	r2, [r3, #16]
					a[i].vec.y=0;
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	825a      	strh	r2, [r3, #18]
	for (i=0 ; i<50; i++){
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	3301      	adds	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b31      	cmp	r3, #49	; 0x31
 800117a:	f77f af21 	ble.w	8000fc0 <updateBulletFriendly+0xe>
				}
			}
		}
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <updateBulletEnemy>:

void updateBulletEnemy(bullet a[]){
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	int32_t i;
	for (i=0 ; i<50; i++){
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e0e4      	b.n	8001360 <updateBulletEnemy+0x1d8>
		if (a[i].alive>>8==1){
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	121b      	asrs	r3, r3, #8
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	f040 80d5 	bne.w	800135a <updateBulletEnemy+0x1d2>
			if(!(a[i].enemy==0)) {
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80c9 	beq.w	800135a <updateBulletEnemy+0x1d2>
				int32_t x = a[i].x>>8;
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	121b      	asrs	r3, r3, #8
 80011dc:	61bb      	str	r3, [r7, #24]
				int32_t y = a[i].y>>8;
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	121b      	asrs	r3, r3, #8
 80011f2:	617b      	str	r3, [r7, #20]
				a[i].x = a[i].x+a[i].vec.x;
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800121a:	4618      	mov	r0, r3
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	180a      	adds	r2, r1, r0
 800122e:	601a      	str	r2, [r3, #0]
				a[i].y = a[i].y+a[i].vec.y;
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001256:	4618      	mov	r0, r3
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	180a      	adds	r2, r1, r0
 800126a:	605a      	str	r2, [r3, #4]
				int32_t newX = a[i].x>>8;
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	121b      	asrs	r3, r3, #8
 8001280:	613b      	str	r3, [r7, #16]
				int32_t newY = a[i].y>>8;
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	121b      	asrs	r3, r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
				if (newY<122 && newY>3){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b79      	cmp	r3, #121	; 0x79
 800129c:	dc17      	bgt.n	80012ce <updateBulletEnemy+0x146>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	dd14      	ble.n	80012ce <updateBulletEnemy+0x146>
					gotoxy(x,y);
 80012a4:	6979      	ldr	r1, [r7, #20]
 80012a6:	69b8      	ldr	r0, [r7, #24]
 80012a8:	f000 fa4e 	bl	8001748 <gotoxy>
					fgcolor(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 fa0b 	bl	80016c8 <fgcolor>
					printf("%c",254);
 80012b2:	20fe      	movs	r0, #254	; 0xfe
 80012b4:	f002 fa3a 	bl	800372c <putchar>
					gotoxy(newX,newY);
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f000 fa44 	bl	8001748 <gotoxy>
					fgcolor(13);
 80012c0:	200d      	movs	r0, #13
 80012c2:	f000 fa01 	bl	80016c8 <fgcolor>
					printf("%c",254);
 80012c6:	20fe      	movs	r0, #254	; 0xfe
 80012c8:	f002 fa30 	bl	800372c <putchar>
 80012cc:	e045      	b.n	800135a <updateBulletEnemy+0x1d2>
				}else {
					gotoxy(x,y);
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	69b8      	ldr	r0, [r7, #24]
 80012d2:	f000 fa39 	bl	8001748 <gotoxy>
					fgcolor(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f9f6 	bl	80016c8 <fgcolor>
					printf("%c",254);
 80012dc:	20fe      	movs	r0, #254	; 0xfe
 80012de:	f002 fa25 	bl	800372c <putchar>
					a[i].alive = 0;
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
					a[i].enemy = 0;
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
					a[i].x=0;
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
					a[i].y=0;
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
					a[i].vec.x=0;
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	2200      	movs	r2, #0
 8001344:	821a      	strh	r2, [r3, #16]
					a[i].vec.y=0;
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	2200      	movs	r2, #0
 8001358:	825a      	strh	r2, [r3, #18]
	for (i=0 ; i<50; i++){
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b31      	cmp	r3, #49	; 0x31
 8001364:	f77f af17 	ble.w	8001196 <updateBulletEnemy+0xe>
				}
			}
		}
	}
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <bulletHitEnemy>:

int32_t bulletHitEnemy(bullet a[], badShip b[], int32_t score) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
	int8_t i,j;
	for(i = 0; i < 50; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e139      	b.n	80015f8 <bulletHitEnemy+0x286>
		if(!(a[i].alive==0)) {
 8001384:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8127 	beq.w	80015ec <bulletHitEnemy+0x27a>
			if(a[i].enemy==0) {
 800139e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 811a 	bne.w	80015ec <bulletHitEnemy+0x27a>
				for(j = 0; j < 20; j++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	75bb      	strb	r3, [r7, #22]
 80013bc:	e111      	b.n	80015e2 <bulletHitEnemy+0x270>
					if(!(b[j].alive==0)) {
 80013be:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	461a      	mov	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80ff 	beq.w	80015d6 <bulletHitEnemy+0x264>
						if((a[i].y>>8)<=(b[j].y>>8) && (a[i].y>>8)>=(b[j].y>>8)-5 && (a[i].x>>8) >= (b[j].x>>8)-4 && (a[i].x>>8) <= (b[j].x>>8)+4) {
 80013d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	121b      	asrs	r3, r3, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	4413      	add	r3, r2
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	4299      	cmp	r1, r3
 8001408:	f200 80e5 	bhi.w	80015d6 <bulletHitEnemy+0x264>
 800140c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	121b      	asrs	r3, r3, #8
 8001422:	4619      	mov	r1, r3
 8001424:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4413      	add	r3, r2
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	3b05      	subs	r3, #5
 800143c:	4299      	cmp	r1, r3
 800143e:	f0c0 80ca 	bcc.w	80015d6 <bulletHitEnemy+0x264>
 8001442:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	121b      	asrs	r3, r3, #8
 8001458:	4619      	mov	r1, r3
 800145a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	3b04      	subs	r3, #4
 8001472:	4299      	cmp	r1, r3
 8001474:	f0c0 80af 	bcc.w	80015d6 <bulletHitEnemy+0x264>
 8001478:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	121b      	asrs	r3, r3, #8
 800148e:	4619      	mov	r1, r3
 8001490:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	3304      	adds	r3, #4
 80014a8:	4299      	cmp	r1, r3
 80014aa:	f200 8094 	bhi.w	80015d6 <bulletHitEnemy+0x264>
							b[j].alive=0;
 80014ae:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
							enemyRemove(b[j].x>>8,b[j].y>>8);
 80014c4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	4619      	mov	r1, r3
 80014f4:	f001 fe28 	bl	8003148 <enemyRemove>
							b[j].x=0;
 80014f8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
							b[j].y=0;
 800150e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
							a[i].alive = 0;
 8001524:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
							gotoxy(a[i].x>>8,a[i].y>>8);
 800153a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1218      	asrs	r0, r3, #8
 8001550:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	121b      	asrs	r3, r3, #8
 8001566:	4619      	mov	r1, r3
 8001568:	f000 f8ee 	bl	8001748 <gotoxy>
							fgcolor(0);
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f8ab 	bl	80016c8 <fgcolor>
							printf("%c", 219);
 8001572:	20db      	movs	r0, #219	; 0xdb
 8001574:	f002 f8da 	bl	800372c <putchar>
							a[i].x=0;
 8001578:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
							a[i].y=0;
 800158e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
							a[i].vec.x=0;
 80015a4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	821a      	strh	r2, [r3, #16]
							a[i].vec.y=0;
 80015ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	2200      	movs	r2, #0
 80015ce:	825a      	strh	r2, [r3, #18]
							score += 20;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3314      	adds	r3, #20
 80015d4:	607b      	str	r3, [r7, #4]
				for(j = 0; j < 20; j++) {
 80015d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	75bb      	strb	r3, [r7, #22]
 80015e2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015e6:	2b13      	cmp	r3, #19
 80015e8:	f77f aee9 	ble.w	80013be <bulletHitEnemy+0x4c>
	for(i = 0; i < 50; i++) {
 80015ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fc:	2b31      	cmp	r3, #49	; 0x31
 80015fe:	f77f aec1 	ble.w	8001384 <bulletHitEnemy+0x12>
					}
				}
			}
		}
	}
	return score;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <adcRead>:
#include <analog.h>


int8_t adcRead(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_1Cycles5);
 8001612:	2300      	movs	r3, #0
 8001614:	2201      	movs	r2, #1
 8001616:	2109      	movs	r1, #9
 8001618:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800161c:	f7fe fe30 	bl	8000280 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8001620:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001624:	f7fe ff24 	bl	8000470 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001628:	bf00      	nop
 800162a:	2104      	movs	r1, #4
 800162c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001630:	f7fe ff3b 	bl	80004aa <ADC_GetFlagStatus>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f7      	beq.n	800162a <adcRead+0x1e>

	uint32_t joystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 800163a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800163e:	f7fe ff27 	bl	8000490 <ADC_GetConversionValue>
 8001642:	4603      	mov	r3, r0
 8001644:	607b      	str	r3, [r7, #4]

	if(joystickWay<=1000) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164c:	d801      	bhi.n	8001652 <adcRead+0x46>
		return 1; //venstre
 800164e:	2301      	movs	r3, #1
 8001650:	e007      	b.n	8001662 <adcRead+0x56>
	}else if(joystickWay>=3000) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <adcRead+0x54>
		return 2; //højre
 800165c:	2302      	movs	r3, #2
 800165e:	e000      	b.n	8001662 <adcRead+0x56>
	}else {
		return 0;
 8001660:	2300      	movs	r3, #0
	}
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <buttonRead>:


int8_t buttonRead(void) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
	int16_t a = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	80fb      	strh	r3, [r7, #6]
	int16_t b1 = GPIOC->IDR & (0x0001 << 0);
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <buttonRead+0x58>)
 8001678:	8a1b      	ldrh	r3, [r3, #16]
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	80bb      	strh	r3, [r7, #4]
	int16_t b2 = GPIOC->IDR & (0x0001 << 1);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <buttonRead+0x58>)
 8001686:	8a1b      	ldrh	r3, [r3, #16]
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21b      	sxth	r3, r3
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	807b      	strh	r3, [r7, #2]

	if(b1) {
 8001692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <buttonRead+0x36>
		a += 1;
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	3301      	adds	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	80fb      	strh	r3, [r7, #6]
	}
	if(b2) {
 80016a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <buttonRead+0x46>
		a += 2;
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	80fb      	strh	r3, [r7, #6]
	}
	return a;
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b25b      	sxtb	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	48000800 	.word	0x48000800

080016c8 <fgcolor>:
#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 80016d2:	2316      	movs	r3, #22
 80016d4:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d904      	bls.n	80016e6 <fgcolor+0x1e>
	  type = 1;                // bold text
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3b08      	subs	r3, #8
 80016e4:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	331e      	adds	r3, #30
 80016ec:	211b      	movs	r1, #27
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <fgcolor+0x34>)
 80016f0:	f002 f804 	bl	80036fc <iprintf>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08004c2c 	.word	0x08004c2c

08001700 <color>:
      7        Gray
*/
  printf("%c[%dm", ESC, background+40);
}

void color(uint8_t foreground, uint8_t background) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af02      	add	r7, sp, #8
 8001706:	4603      	mov	r3, r0
 8001708:	460a      	mov	r2, r1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	71bb      	strb	r3, [r7, #6]
// combination of fgcolor() and bgcolor() - uses less bandwidth
  uint8_t type = 22;             // normal text
 8001710:	2316      	movs	r3, #22
 8001712:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b07      	cmp	r3, #7
 8001718:	d904      	bls.n	8001724 <color+0x24>
	  type = 1;                // bold text
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b08      	subs	r3, #8
 8001722:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%d;%dm", ESC, type, foreground+30, background+40);
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f103 011e 	add.w	r1, r3, #30
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	3328      	adds	r3, #40	; 0x28
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	460b      	mov	r3, r1
 8001734:	211b      	movs	r1, #27
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <color+0x44>)
 8001738:	f001 ffe0 	bl	80036fc <iprintf>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	08004c40 	.word	0x08004c40

08001748 <gotoxy>:

void clreol(void) {
	printf("%c[K", 0x1B);
}

void gotoxy(int32_t x, int32_t y) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", 0x1B,y,x);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	211b      	movs	r1, #27
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <gotoxy+0x20>)
 800175a:	f001 ffcf 	bl	80036fc <iprintf>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08004c6c 	.word	0x08004c6c

0800176c <pinConfig>:
#include "config.h"

void pinConfig(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <pinConfig+0x150>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <pinConfig+0x150>)
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <pinConfig+0x150>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <pinConfig+0x150>)
 8001782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001786:	6153      	str	r3, [r2, #20]

	//pin A0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 8001788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8001798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800179c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 80017a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 80017b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin A1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 80017c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017ce:	f023 030c 	bic.w	r3, r3, #12
 80017d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 80017d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 80017e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017ea:	f023 030c 	bic.w	r3, r3, #12
 80017ee:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 80017f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C0
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <pinConfig+0x154>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <pinConfig+0x154>)
 8001806:	f023 0303 	bic.w	r3, r3, #3
 800180a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <pinConfig+0x154>)
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <pinConfig+0x154>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <pinConfig+0x154>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <pinConfig+0x154>)
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <pinConfig+0x154>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <pinConfig+0x154>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin C1
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <pinConfig+0x154>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <pinConfig+0x154>)
 8001832:	f023 030c 	bic.w	r3, r3, #12
 8001836:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <pinConfig+0x154>)
 800183a:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <pinConfig+0x154>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <pinConfig+0x154>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <pinConfig+0x154>)
 8001846:	f023 030c 	bic.w	r3, r3, #12
 800184a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <pinConfig+0x154>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <pinConfig+0x154>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin C2
	GPIOC->MODER &= ~(0x00000003 << (2 * 2)); 		// Clear mode register
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <pinConfig+0x154>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <pinConfig+0x154>)
 800185e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001862:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (2 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <pinConfig+0x154>)
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <pinConfig+0x154>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (2 * 2)); 		// Clear push/pull register
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <pinConfig+0x154>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <pinConfig+0x154>)
 8001872:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001876:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (2 * 2)); 		// Set push/pull register (0x00 -
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <pinConfig+0x154>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <pinConfig+0x154>)
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C3
	GPIOC->MODER &= ~(0x00000003 << (3 * 2)); 		// Clear mode register
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <pinConfig+0x154>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <pinConfig+0x154>)
 800188a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800188e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (3 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <pinConfig+0x154>)
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <pinConfig+0x154>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (3 * 2)); 		// Clear push/pull register
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <pinConfig+0x154>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <pinConfig+0x154>)
 800189e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018a2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (3 * 2)); 		// Set push/pull register (0x00 -
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <pinConfig+0x154>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <pinConfig+0x154>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000800 	.word	0x48000800

080018c4 <adcConfig>:

void adcConfig(void) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <adcConfig+0xd4>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	4a32      	ldr	r2, [pc, #200]	; (8001998 <adcConfig+0xd4>)
 80018d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80018d4:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <adcConfig+0xd4>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <adcConfig+0xd4>)
 80018dc:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 80018e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <adcConfig+0xd4>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a2c      	ldr	r2, [pc, #176]	; (8001998 <adcConfig+0xd4>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 80018ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 80018f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <adcConfig+0xd8>)
 8001902:	4013      	ands	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8001906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001910:	f023 030f 	bic.w	r3, r3, #15
 8001914:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8001916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e002      	b.n	8001932 <adcConfig+0x6e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001938:	dbf8      	blt.n	800192c <adcConfig+0x68>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 800193a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001948:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 800194a:	bf00      	nop
 800194c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	dafa      	bge.n	800194c <adcConfig+0x88>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	e002      	b.n	8001962 <adcConfig+0x9e>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b63      	cmp	r3, #99	; 0x63
 8001966:	ddf9      	ble.n	800195c <adcConfig+0x98>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8001968:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8001978:	bf00      	nop
 800197a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f8      	beq.n	800197a <adcConfig+0xb6>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	fdffc007 	.word	0xfdffc007

080019a0 <config>:


void config(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	pinConfig();
 80019a4:	f7ff fee2 	bl	800176c <pinConfig>
	adcConfig();
 80019a8:	f7ff ff8c 	bl	80018c4 <adcConfig>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <initArrayEnemy>:
#include "enemy.h"

void initArrayEnemy(badShip a[], int8_t length) {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	int8_t i;
	for (i=0; i<length;i++){
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e026      	b.n	8001a10 <initArrayEnemy+0x60>
		a[i].x = 0;
 80019c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
		a[i].y = 0;
 80019d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
		a[i].alive = 0;
 80019ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
	for (i=0; i<length;i++){
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbd2      	blt.n	80019c2 <initArrayEnemy+0x12>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <createEnemy>:

void createEnemy(badShip a[]) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	int8_t i;
	for (i=0; i<20; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
 8001a38:	e0c5      	b.n	8001bc6 <createEnemy+0x19a>
		if (a[i].alive==0) {
 8001a3a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80b3 	bne.w	8001bba <createEnemy+0x18e>
			ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001a54:	2300      	movs	r3, #0
 8001a56:	2201      	movs	r2, #1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a5e:	f7fe fc0f 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 8001a62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a66:	f7fe fd03 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001a6a:	bf00      	nop
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a72:	f7fe fd1a 	bl	80004aa <ADC_GetFlagStatus>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f7      	beq.n	8001a6c <createEnemy+0x40>

			uint32_t randSpawn = ADC_GetConversionValue(ADC1);
 8001a7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a80:	f7fe fd06 	bl	8000490 <ADC_GetConversionValue>
 8001a84:	4603      	mov	r3, r0
 8001a86:	613b      	str	r3, [r7, #16]
			ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a92:	f7fe fbf5 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 8001a96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a9a:	f7fe fce9 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001a9e:	bf00      	nop
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001aa6:	f7fe fd00 	bl	80004aa <ADC_GetFlagStatus>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f7      	beq.n	8001aa0 <createEnemy+0x74>

			randSpawn += ADC_GetConversionValue(ADC1);
 8001ab0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ab4:	f7fe fcec 	bl	8000490 <ADC_GetConversionValue>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
			randSpawn = randSpawn%10;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <createEnemy+0x1b0>)
 8001ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aca:	08d9      	lsrs	r1, r3, #3
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	613b      	str	r3, [r7, #16]
			a[i].x = 10+randSpawn*13;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	1899      	adds	r1, r3, r2
 8001ae4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	f101 020a 	add.w	r2, r1, #10
 8001afa:	601a      	str	r2, [r3, #0]
			a[i].y = 10;
 8001afc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	220a      	movs	r2, #10
 8001b10:	605a      	str	r2, [r3, #4]
			a[i].alive=1;
 8001b12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	2201      	movs	r2, #1
 8001b26:	609a      	str	r2, [r3, #8]
			int16_t x = a[i].x;
 8001b28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	81fb      	strh	r3, [r7, #14]
			int16_t y = a[i].y;
 8001b3e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	81bb      	strh	r3, [r7, #12]
			a[i].x = a[i].x<<8;
 8001b54:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	020a      	lsls	r2, r1, #8
 8001b7c:	601a      	str	r2, [r3, #0]
			a[i].y = a[i].y<<8;
 8001b7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	020a      	lsls	r2, r1, #8
 8001ba6:	605a      	str	r2, [r3, #4]
			enemyDraw(x, y);
 8001ba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 f9fe 	bl	8002fb4 <enemyDraw>
			break;
 8001bb8:	e00b      	b.n	8001bd2 <createEnemy+0x1a6>
	for (i=0; i<20; i++) {
 8001bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	75fb      	strb	r3, [r7, #23]
 8001bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bca:	2b13      	cmp	r3, #19
 8001bcc:	f77f af35 	ble.w	8001a3a <createEnemy+0xe>
		}
	}
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	cccccccd 	.word	0xcccccccd

08001be0 <moveEnemy>:

void moveEnemy(badShip a[]) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	int8_t i;
	for(i=0; i<20;i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e05e      	b.n	8001cac <moveEnemy+0xcc>
		if(a[i].alive==1) {
 8001bee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d14c      	bne.n	8001ca0 <moveEnemy+0xc0>
			if(!((a[i].y>>8)==(123))) {
 8001c06:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	2b7b      	cmp	r3, #123	; 0x7b
 8001c1e:	d01a      	beq.n	8001c56 <moveEnemy+0x76>
				a[i].y = slideEnemy(a[i]);
 8001c20:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c36:	f000 f842 	bl	8001cbe <slideEnemy>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	460a      	mov	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	e024      	b.n	8001ca0 <moveEnemy+0xc0>
			} else {
				enemyRemove(a[i].x>>8, a[i].y>>8);
 8001c56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	4619      	mov	r1, r3
 8001c86:	f001 fa5f 	bl	8003148 <enemyRemove>
				a[i].alive=0;
 8001c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
	for(i=0; i<20;i++) {
 8001ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb0:	2b13      	cmp	r3, #19
 8001cb2:	dd9c      	ble.n	8001bee <moveEnemy+0xe>
			}
		}
	}

}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <slideEnemy>:

int16_t slideEnemy(badShip a) {
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fgcolor(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff fcfc 	bl	80016c8 <fgcolor>
	a.x = a.x >> 8;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	607b      	str	r3, [r7, #4]
	a.y = a.y >> 8;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	60bb      	str	r3, [r7, #8]
	gotoxy(a.x-3,a.y+1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b03      	subs	r3, #3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f7ff fd2d 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001cee:	20db      	movs	r0, #219	; 0xdb
 8001cf0:	f001 fd1c 	bl	800372c <putchar>
	gotoxy(a.x+3,a.y+1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7ff fd21 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d06:	20db      	movs	r0, #219	; 0xdb
 8001d08:	f001 fd10 	bl	800372c <putchar>
	gotoxy(a.x-1,a.y-1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f7ff fd15 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d1e:	20db      	movs	r0, #219	; 0xdb
 8001d20:	f001 fd04 	bl	800372c <putchar>
	gotoxy(a.x+1,a.y-1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3301      	adds	r3, #1
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4610      	mov	r0, r2
 8001d32:	f7ff fd09 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d36:	20db      	movs	r0, #219	; 0xdb
 8001d38:	f001 fcf8 	bl	800372c <putchar>
	gotoxy(a.x-2,a.y-2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b02      	subs	r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b02      	subs	r3, #2
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f7ff fcfd 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d4e:	20db      	movs	r0, #219	; 0xdb
 8001d50:	f001 fcec 	bl	800372c <putchar>
	gotoxy(a.x,a.y-2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3b02      	subs	r3, #2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7ff fcf2 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d64:	20db      	movs	r0, #219	; 0xdb
 8001d66:	f001 fce1 	bl	800372c <putchar>
	gotoxy(a.x+2,a.y-2);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3b02      	subs	r3, #2
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff fce6 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d7c:	20db      	movs	r0, #219	; 0xdb
 8001d7e:	f001 fcd5 	bl	800372c <putchar>
	fgcolor(11);
 8001d82:	200b      	movs	r0, #11
 8001d84:	f7ff fca0 	bl	80016c8 <fgcolor>
	gotoxy(a.x-1,a.y-3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f7ff fcd7 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001d9a:	20db      	movs	r0, #219	; 0xdb
 8001d9c:	f001 fcc6 	bl	800372c <putchar>
	gotoxy(a.x+1,a.y-3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff fccb 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001db2:	20db      	movs	r0, #219	; 0xdb
 8001db4:	f001 fcba 	bl	800372c <putchar>
	gotoxy(a.x,a.y-4);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f7ff fcc0 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001dc8:	20db      	movs	r0, #219	; 0xdb
 8001dca:	f001 fcaf 	bl	800372c <putchar>
	fgcolor(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fc7a 	bl	80016c8 <fgcolor>
	gotoxy(a.x-1,a.y-4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f7ff fcb1 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001de6:	20db      	movs	r0, #219	; 0xdb
 8001de8:	f001 fca0 	bl	800372c <putchar>
	gotoxy(a.x+1,a.y-4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3b04      	subs	r3, #4
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f7ff fca5 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001dfe:	20db      	movs	r0, #219	; 0xdb
 8001e00:	f001 fc94 	bl	800372c <putchar>
	fgcolor(0);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fc5f 	bl	80016c8 <fgcolor>
	gotoxy(a.x-3,a.y-4);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3b04      	subs	r3, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7ff fc96 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e1c:	20db      	movs	r0, #219	; 0xdb
 8001e1e:	f001 fc85 	bl	800372c <putchar>
	gotoxy(a.x+3,a.y-4);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3303      	adds	r3, #3
 8001e26:	461a      	mov	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff fc8a 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e34:	20db      	movs	r0, #219	; 0xdb
 8001e36:	f001 fc79 	bl	800372c <putchar>
	fgcolor(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fc44 	bl	80016c8 <fgcolor>
	gotoxy(a.x-3,a.y-5);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b03      	subs	r3, #3
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3b05      	subs	r3, #5
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7ff fc7b 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e52:	20db      	movs	r0, #219	; 0xdb
 8001e54:	f001 fc6a 	bl	800372c <putchar>
	gotoxy(a.x,a.y-5);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b05      	subs	r3, #5
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fc70 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e68:	20db      	movs	r0, #219	; 0xdb
 8001e6a:	f001 fc5f 	bl	800372c <putchar>
	gotoxy(a.x+3,a.y-5);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3303      	adds	r3, #3
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3b05      	subs	r3, #5
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7ff fc64 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e80:	20db      	movs	r0, #219	; 0xdb
 8001e82:	f001 fc53 	bl	800372c <putchar>
	fgcolor(0);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fc1e 	bl	80016c8 <fgcolor>
	gotoxy(a.x-1,a.y-5);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b05      	subs	r3, #5
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7ff fc55 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001e9e:	20db      	movs	r0, #219	; 0xdb
 8001ea0:	f001 fc44 	bl	800372c <putchar>
	gotoxy(a.x+1,a.y-5);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3b05      	subs	r3, #5
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7ff fc49 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001eb6:	20db      	movs	r0, #219	; 0xdb
 8001eb8:	f001 fc38 	bl	800372c <putchar>
	fgcolor(1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff fc03 	bl	80016c8 <fgcolor>
	gotoxy(a.x-4,a.y-6);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3b04      	subs	r3, #4
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b06      	subs	r3, #6
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f7ff fc3a 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001ed4:	20db      	movs	r0, #219	; 0xdb
 8001ed6:	f001 fc29 	bl	800372c <putchar>
	gotoxy(a.x+4,a.y-6);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3b06      	subs	r3, #6
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f7ff fc2e 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001eec:	20db      	movs	r0, #219	; 0xdb
 8001eee:	f001 fc1d 	bl	800372c <putchar>
	fgcolor(0);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fbe8 	bl	80016c8 <fgcolor>
	gotoxy(a.x-2,a.y-6);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b02      	subs	r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b06      	subs	r3, #6
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7ff fc1f 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f0a:	20db      	movs	r0, #219	; 0xdb
 8001f0c:	f001 fc0e 	bl	800372c <putchar>
	gotoxy(a.x,a.y-6);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	3b06      	subs	r3, #6
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7ff fc14 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f20:	20db      	movs	r0, #219	; 0xdb
 8001f22:	f001 fc03 	bl	800372c <putchar>
	gotoxy(a.x+2,a.y-6);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3b06      	subs	r3, #6
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f7ff fc08 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f38:	20db      	movs	r0, #219	; 0xdb
 8001f3a:	f001 fbf7 	bl	800372c <putchar>
	gotoxy(a.x-3,a.y-7);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3b07      	subs	r3, #7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7ff fbfc 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f50:	20db      	movs	r0, #219	; 0xdb
 8001f52:	f001 fbeb 	bl	800372c <putchar>
	gotoxy(a.x+3,a.y-7);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3303      	adds	r3, #3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3b07      	subs	r3, #7
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f7ff fbf0 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f68:	20db      	movs	r0, #219	; 0xdb
 8001f6a:	f001 fbdf 	bl	800372c <putchar>
	gotoxy(a.x-4,a.y-8);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3b04      	subs	r3, #4
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3b08      	subs	r3, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7ff fbe4 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f80:	20db      	movs	r0, #219	; 0xdb
 8001f82:	f001 fbd3 	bl	800372c <putchar>
	gotoxy(a.x+4,a.y-8);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b08      	subs	r3, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f7ff fbd8 	bl	8001748 <gotoxy>
	printf("%c",219);
 8001f98:	20db      	movs	r0, #219	; 0xdb
 8001f9a:	f001 fbc7 	bl	800372c <putchar>
	return (a.y+1) << 8;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b21b      	sxth	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <makeBoard>:
		printf("%c",196);
	}
	printf("%c",217);
}

void makeBoard(void) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
	int32_t i;
	int32_t j;
	fgcolor(3);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f7ff fb87 	bl	80016c8 <fgcolor>
	gotoxy(1,1);
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff fbc3 	bl	8001748 <gotoxy>
	printf("%c",218);
 8001fc2:	20da      	movs	r0, #218	; 0xda
 8001fc4:	f001 fbb2 	bl	800372c <putchar>
	for(i = 0; i <= 134; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	e005      	b.n	8001fda <makeBoard+0x2c>
		printf("%c",196);
 8001fce:	20c4      	movs	r0, #196	; 0xc4
 8001fd0:	f001 fbac 	bl	800372c <putchar>
	for(i = 0; i <= 134; i++) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b86      	cmp	r3, #134	; 0x86
 8001fde:	ddf6      	ble.n	8001fce <makeBoard+0x20>
	}
	printf("%c",191);
 8001fe0:	20bf      	movs	r0, #191	; 0xbf
 8001fe2:	f001 fba3 	bl	800372c <putchar>
	for(i = 2; i <= 123; i++) {
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e018      	b.n	800201e <makeBoard+0x70>
		gotoxy(1,i);
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff fbaa 	bl	8001748 <gotoxy>
		printf("%c",179);
 8001ff4:	20b3      	movs	r0, #179	; 0xb3
 8001ff6:	f001 fb99 	bl	800372c <putchar>
		for(j = 0; j <= 134; j++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	e005      	b.n	800200c <makeBoard+0x5e>
			printf(" ");
 8002000:	2020      	movs	r0, #32
 8002002:	f001 fb93 	bl	800372c <putchar>
		for(j = 0; j <= 134; j++) {
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b86      	cmp	r3, #134	; 0x86
 8002010:	ddf6      	ble.n	8002000 <makeBoard+0x52>
		}
		printf("%c",179);
 8002012:	20b3      	movs	r0, #179	; 0xb3
 8002014:	f001 fb8a 	bl	800372c <putchar>
	for(i = 2; i <= 123; i++) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b7b      	cmp	r3, #123	; 0x7b
 8002022:	dde3      	ble.n	8001fec <makeBoard+0x3e>
	}
	gotoxy(1,124);
 8002024:	217c      	movs	r1, #124	; 0x7c
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff fb8e 	bl	8001748 <gotoxy>
	printf("%c",192);
 800202c:	20c0      	movs	r0, #192	; 0xc0
 800202e:	f001 fb7d 	bl	800372c <putchar>
	for(i = 0; i <= 134; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	e005      	b.n	8002044 <makeBoard+0x96>
		printf("%c",196);
 8002038:	20c4      	movs	r0, #196	; 0xc4
 800203a:	f001 fb77 	bl	800372c <putchar>
	for(i = 0; i <= 134; i++) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3301      	adds	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b86      	cmp	r3, #134	; 0x86
 8002048:	ddf6      	ble.n	8002038 <makeBoard+0x8a>
	}
	printf("%c",217);
 800204a:	20d9      	movs	r0, #217	; 0xd9
 800204c:	f001 fb6e 	bl	800372c <putchar>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <createScoreLCD>:
#include "lcd.h"

void createScoreLCD(int32_t score, int16_t buffer[]){
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	char scoreLCD [13];
	sprintf(scoreLCD, "Score: %05d",score);
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <createScoreLCD+0x30>)
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fc42 	bl	80038f4 <siprintf>
	lcd_write_string(scoreLCD, &buffer,0);
 8002070:	4639      	mov	r1, r7
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f807 	bl	800208c <lcd_write_string>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	08004cc0 	.word	0x08004cc0

0800208c <lcd_write_string>:

void lcd_write_string(char string[], int16_t buffer[], int16_t position){
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
	int8_t n = strlen(string);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7fe f898 	bl	80001d0 <strlen>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < n; j++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	e026      	b.n	80020f8 <lcd_write_string+0x6c>
		for (int i = 0; i<5;i++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e01d      	b.n	80020ec <lcd_write_string+0x60>
			buffer[position]=character_data[string[j]-0x20][i];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f1a3 0220 	sub.w	r2, r3, #32
 80020bc:	4913      	ldr	r1, [pc, #76]	; (800210c <lcd_write_string+0x80>)
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	18ca      	adds	r2, r1, r3
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4413      	add	r3, r2
 80020ca:	7819      	ldrb	r1, [r3, #0]
 80020cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	b20a      	sxth	r2, r1
 80020d8:	801a      	strh	r2, [r3, #0]
			position++;
 80020da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i<5;i++){
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	ddde      	ble.n	80020b0 <lcd_write_string+0x24>
	for (int j = 0; j < n; j++){
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbd3      	blt.n	80020aa <lcd_write_string+0x1e>
		}
	}
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	08004db8 	.word	0x08004db8

08002110 <lcd_write_heart>:

void lcd_write_heart(int8_t filled,int8_t antal, int16_t buffer[], int16_t position){
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	603a      	str	r2, [r7, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	460b      	mov	r3, r1
 8002120:	71bb      	strb	r3, [r7, #6]
 8002122:	4613      	mov	r3, r2
 8002124:	80bb      	strh	r3, [r7, #4]
	char space[2] = {' ', '\0'};
 8002126:	2320      	movs	r3, #32
 8002128:	81bb      	strh	r3, [r7, #12]
	if (filled == 1){
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d133      	bne.n	800219a <lcd_write_heart+0x8a>
		for (int j = 0; j<antal; j++){
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e02a      	b.n	800218e <lcd_write_heart+0x7e>
			for(int i = 0; i<9 ;i++){
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e013      	b.n	8002166 <lcd_write_heart+0x56>
				buffer[position]=customset[0][i];
 800213e:	4a33      	ldr	r2, [pc, #204]	; (800220c <lcd_write_heart+0xfc>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	7819      	ldrb	r1, [r3, #0]
 8002146:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4413      	add	r3, r2
 8002150:	b20a      	sxth	r2, r1
 8002152:	801a      	strh	r2, [r3, #0]
				position++;
 8002154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002158:	b29b      	uxth	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	b29b      	uxth	r3, r3
 800215e:	80bb      	strh	r3, [r7, #4]
			for(int i = 0; i<9 ;i++){
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3301      	adds	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b08      	cmp	r3, #8
 800216a:	dde8      	ble.n	800213e <lcd_write_heart+0x2e>
			}
			lcd_write_string(space,buffer,position);
 800216c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff88 	bl	800208c <lcd_write_string>
			position++;
 800217c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002180:	b29b      	uxth	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	b29b      	uxth	r3, r3
 8002186:	80bb      	strh	r3, [r7, #4]
		for (int j = 0; j<antal; j++){
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbcf      	blt.n	8002138 <lcd_write_heart+0x28>
			position++;
		}

	}

}
 8002198:	e033      	b.n	8002202 <lcd_write_heart+0xf2>
		for (int j = 0; j<antal; j++){
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e02b      	b.n	80021f8 <lcd_write_heart+0xe8>
			for(int i = 0; i<9 ;i++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e014      	b.n	80021d0 <lcd_write_heart+0xc0>
				buffer[position]=customset[1][i];
 80021a6:	4a19      	ldr	r2, [pc, #100]	; (800220c <lcd_write_heart+0xfc>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	3309      	adds	r3, #9
 80021ae:	7819      	ldrb	r1, [r3, #0]
 80021b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	b20a      	sxth	r2, r1
 80021bc:	801a      	strh	r2, [r3, #0]
				position++;
 80021be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	80bb      	strh	r3, [r7, #4]
			for(int i = 0; i<9 ;i++){
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3301      	adds	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	dde7      	ble.n	80021a6 <lcd_write_heart+0x96>
			lcd_write_string(space,buffer,position);
 80021d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff53 	bl	800208c <lcd_write_string>
			position++;
 80021e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	80bb      	strh	r3, [r7, #4]
		for (int j = 0; j<antal; j++){
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbce      	blt.n	80021a0 <lcd_write_heart+0x90>
}
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	08004f94 	.word	0x08004f94

08002210 <TIM1_BRK_TIM15_IRQHandler>:

//Initialicering af Programmer Start



void TIM1_BRK_TIM15_IRQHandler(void) {
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
	c1=c1+(1<<8);
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800221c:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800221e:	6013      	str	r3, [r2, #0]
	c2=c2+(1<<8);
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800222a:	6013      	str	r3, [r2, #0]
	c3=c3+(1<<8);
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002234:	4a08      	ldr	r2, [pc, #32]	; (8002258 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8002236:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; // Clear interrupt bit
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6113      	str	r3, [r2, #16]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200000bc 	.word	0x200000bc
 8002254:	200000c0 	.word	0x200000c0
 8002258:	200000c4 	.word	0x200000c4
 800225c:	40014000 	.word	0x40014000

08002260 <main>:


//Initialicering af Programmer Slut


int main(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	f6ad 4de8 	subw	sp, sp, #3304	; 0xce8
 8002266:	af04      	add	r7, sp, #16
	//Initialicering af forbindelse
	uart_init(2060000);
 8002268:	486f      	ldr	r0, [pc, #444]	; (8002428 <main+0x1c8>)
 800226a:	f7fe fc13 	bl	8000a94 <uart_init>
//	int32_t i;
	int8_t timeOut = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
	int16_t buffer[512];
	char lives[7] = {'L','i','v','e','s',':','\0'};
 8002274:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8002278:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800227c:	4a6b      	ldr	r2, [pc, #428]	; (800242c <main+0x1cc>)
 800227e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002282:	6018      	str	r0, [r3, #0]
 8002284:	3304      	adds	r3, #4
 8002286:	8019      	strh	r1, [r3, #0]
 8002288:	3302      	adds	r3, #2
 800228a:	0c0a      	lsrs	r2, r1, #16
 800228c:	701a      	strb	r2, [r3, #0]
	lcd_write_string(lives, &buffer,2*128);
 800228e:	f607 01d4 	addw	r1, r7, #2260	; 0x8d4
 8002292:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8002296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fef6 	bl	800208c <lcd_write_string>
	lcd_write_heart(1,3,&buffer,3*128);
 80022a0:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 80022a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022a8:	2103      	movs	r1, #3
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff ff30 	bl	8002110 <lcd_write_heart>
	color(15,0);
 80022b0:	2100      	movs	r1, #0
 80022b2:	200f      	movs	r0, #15
 80022b4:	f7ff fa24 	bl	8001700 <color>
	//Initialicering af Programmer i main Start
	config();
 80022b8:	f7ff fb72 	bl	80019a0 <config>
	clockInit();
 80022bc:	f001 f91c 	bl	80034f8 <clockInit>
	//BuzzConfig();
	makeBoard();
 80022c0:	f7ff fe75 	bl	8001fae <makeBoard>
	goodShip player;
	createPlayer(&player);
 80022c4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f8bf 	bl	800244c <createPlayer>
	badShip enemyA[20];
	initArrayEnemy(&enemyA, 20);
 80022ce:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80022d2:	2114      	movs	r1, #20
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fb6b 	bl	80019b0 <initArrayEnemy>
	bullet bulletE[50];
	bullet bulletF[50];
	initArrayBullets(&bulletE, 50);
 80022da:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80022de:	2132      	movs	r1, #50	; 0x32
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fcf1 	bl	8000cc8 <initArrayBullets>
	initArrayBullets(&bulletF, 50);
 80022e6:	463b      	mov	r3, r7
 80022e8:	2132      	movs	r1, #50	; 0x32
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fcec 	bl	8000cc8 <initArrayBullets>

	//Hentning af Statisk info Slut

	//Klad af funktioner
	while(1){
		int8_t button = buttonRead();
 80022f0:	f7ff f9bc 	bl	800166c <buttonRead>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f887 3cd6 	strb.w	r3, [r7, #3286]	; 0xcd6
		int8_t joystickWay = adcRead();
 80022fa:	f7ff f987 	bl	800160c <adcRead>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 3cd5 	strb.w	r3, [r7, #3285]	; 0xcd5
		clockCounter(score, &c1, &c2, &c3, &flagF, &flagE, &flagR);
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <main+0x1d0>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <main+0x1d4>)
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <main+0x1d8>)
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <main+0x1dc>)
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <main+0x1e0>)
 8002316:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <main+0x1e4>)
 8002318:	494b      	ldr	r1, [pc, #300]	; (8002448 <main+0x1e8>)
 800231a:	f001 f91b 	bl	8003554 <clockCounter>
		//Hentning af kontinuerlig info Start
		if (flagF == 1){
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <main+0x1dc>)
 8002320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d15b      	bne.n	80023e0 <main+0x180>
			movePlayer(&player, joystickWay);
 8002328:	f997 2cd5 	ldrsb.w	r2, [r7, #3285]	; 0xcd5
 800232c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f89f 	bl	8002476 <movePlayer>
			if(button==1) {
 8002338:	f997 3cd6 	ldrsb.w	r3, [r7, #3286]	; 0xcd6
 800233c:	2b01      	cmp	r3, #1
 800233e:	d11d      	bne.n	800237c <main+0x11c>
				if(timeOut==0) {
 8002340:	f997 3cd7 	ldrsb.w	r3, [r7, #3287]	; 0xcd7
 8002344:	2b00      	cmp	r3, #0
 8002346:	d119      	bne.n	800237c <main+0x11c>
					bulletSpaceship(player.x, player.y-1, &bulletF);
 8002348:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 800234c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b218      	sxth	r0, r3
 8002354:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8002358:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29b      	uxth	r3, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	463a      	mov	r2, r7
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fd0b 	bl	8000d84 <bulletSpaceship>
					timeOut++;
 800236e:	f997 3cd7 	ldrsb.w	r3, [r7, #3287]	; 0xcd7
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
				}
			}
			if(timeOut>0 && timeOut<7) {
 800237c:	f997 3cd7 	ldrsb.w	r3, [r7, #3287]	; 0xcd7
 8002380:	2b00      	cmp	r3, #0
 8002382:	dd0b      	ble.n	800239c <main+0x13c>
 8002384:	f997 3cd7 	ldrsb.w	r3, [r7, #3287]	; 0xcd7
 8002388:	2b06      	cmp	r3, #6
 800238a:	dc07      	bgt.n	800239c <main+0x13c>
				timeOut++;
 800238c:	f997 3cd7 	ldrsb.w	r3, [r7, #3287]	; 0xcd7
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
 800239a:	e002      	b.n	80023a2 <main+0x142>
			} else {
				timeOut=0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3cd7 	strb.w	r3, [r7, #3287]	; 0xcd7
			}
			updateBulletFriendly(&bulletF);
 80023a2:	463b      	mov	r3, r7
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fe04 	bl	8000fb2 <updateBulletFriendly>
			updateBulletEnemy(&bulletE);
 80023aa:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe feea 	bl	8001188 <updateBulletEnemy>
			score = bulletHitEnemy(&bulletF, &enemyA, score);
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <main+0x1d0>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 80023bc:	463b      	mov	r3, r7
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe ffd7 	bl	8001372 <bulletHitEnemy>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <main+0x1d0>)
 80023c8:	6013      	str	r3, [r2, #0]
			createScoreLCD(score,&buffer);
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <main+0x1d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe3f 	bl	8002058 <createScoreLCD>
			flagF = 0;
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <main+0x1dc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	801a      	strh	r2, [r3, #0]
		}
		if (flagE == 1){
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <main+0x1d8>)
 80023e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <main+0x19a>
			moveEnemy(&enemyA);
 80023ea:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fbf6 	bl	8001be0 <moveEnemy>
			flagE = 0;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <main+0x1d8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
		}
		if (flagR == 1) {
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <main+0x1d4>)
 80023fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f47f af75 	bne.w	80022f0 <main+0x90>
			bulletEnemy(&enemyA, &bulletE);
 8002406:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800240a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fd29 	bl	8000e68 <bulletEnemy>
			createEnemy(&enemyA);
 8002416:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb06 	bl	8001a2c <createEnemy>
			flagR = 0;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <main+0x1d4>)
 8002422:	2200      	movs	r2, #0
 8002424:	801a      	strh	r2, [r3, #0]
	while(1){
 8002426:	e763      	b.n	80022f0 <main+0x90>
 8002428:	001f6ee0 	.word	0x001f6ee0
 800242c:	08004ccc 	.word	0x08004ccc
 8002430:	200000c8 	.word	0x200000c8
 8002434:	200000b8 	.word	0x200000b8
 8002438:	200000b6 	.word	0x200000b6
 800243c:	200000b4 	.word	0x200000b4
 8002440:	200000c4 	.word	0x200000c4
 8002444:	200000c0 	.word	0x200000c0
 8002448:	200000bc 	.word	0x200000bc

0800244c <createPlayer>:
#include "player.h"

void createPlayer(goodShip *player) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	playerDraw(65,115);
 8002454:	2173      	movs	r1, #115	; 0x73
 8002456:	2041      	movs	r0, #65	; 0x41
 8002458:	f000 fcea 	bl	8002e30 <playerDraw>
	player->x = 65;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2241      	movs	r2, #65	; 0x41
 8002460:	601a      	str	r2, [r3, #0]
	player->y = 115;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2273      	movs	r2, #115	; 0x73
 8002466:	605a      	str	r2, [r3, #4]
	player->life = 3;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2203      	movs	r2, #3
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <movePlayer>:


void movePlayer(goodShip *player, int32_t joystick) {
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
	if(joystick == 1 && player->x>6) { //left
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10b      	bne.n	800249e <movePlayer+0x28>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b06      	cmp	r3, #6
 800248c:	d907      	bls.n	800249e <movePlayer+0x28>
		shiftLeft(player);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa68 	bl	8002964 <shiftLeft>
		player->x--;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
	}
	if(joystick == 2 && player->x<132) {//right
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d10b      	bne.n	80024bc <movePlayer+0x46>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b83      	cmp	r3, #131	; 0x83
 80024aa:	d807      	bhi.n	80024bc <movePlayer+0x46>
		shiftRight(player);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f809 	bl	80024c4 <shiftRight>
		player->x++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
	}
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <shiftRight>:
	printf("%c", 219);
	gotoxy(player->x+4,player->y+8);
	printf("%c", 219);
}

void shiftRight(goodShip *player) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 80024cc:	200f      	movs	r0, #15
 80024ce:	f7ff f8fb 	bl	80016c8 <fgcolor>
	gotoxy(player->x+1,player->y);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	461a      	mov	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f7ff f931 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80024e6:	20db      	movs	r0, #219	; 0xdb
 80024e8:	f001 f920 	bl	800372c <putchar>
	fgcolor(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff f8eb 	bl	80016c8 <fgcolor>
	gotoxy(player->x,player->y);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f7ff f922 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002504:	20db      	movs	r0, #219	; 0xdb
 8002506:	f001 f911 	bl	800372c <putchar>
	fgcolor(15);
 800250a:	200f      	movs	r0, #15
 800250c:	f7ff f8dc 	bl	80016c8 <fgcolor>
	gotoxy(player->x-2,player->y+1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3b02      	subs	r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	3301      	adds	r3, #1
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7ff f911 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002526:	20db      	movs	r0, #219	; 0xdb
 8002528:	f001 f900 	bl	800372c <putchar>
	gotoxy(player->x+1,player->y+1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	3301      	adds	r3, #1
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7ff f903 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002542:	20db      	movs	r0, #219	; 0xdb
 8002544:	f001 f8f2 	bl	800372c <putchar>
	gotoxy(player->x+4,player->y+1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3304      	adds	r3, #4
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	3301      	adds	r3, #1
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7ff f8f5 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800255e:	20db      	movs	r0, #219	; 0xdb
 8002560:	f001 f8e4 	bl	800372c <putchar>
	fgcolor(0);
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff f8af 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3b03      	subs	r3, #3
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	3301      	adds	r3, #1
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f7ff f8e4 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002580:	20db      	movs	r0, #219	; 0xdb
 8002582:	f001 f8d3 	bl	800372c <putchar>
	gotoxy(player->x,player->y+1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	3301      	adds	r3, #1
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7ff f8d7 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800259a:	20db      	movs	r0, #219	; 0xdb
 800259c:	f001 f8c6 	bl	800372c <putchar>
	gotoxy(player->x+3,player->y+1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3303      	adds	r3, #3
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff f8c9 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80025b6:	20db      	movs	r0, #219	; 0xdb
 80025b8:	f001 f8b8 	bl	800372c <putchar>
	fgcolor(15);
 80025bc:	200f      	movs	r0, #15
 80025be:	f7ff f883 	bl	80016c8 <fgcolor>
	gotoxy(player->x-2,player->y+2);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3b02      	subs	r3, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	3302      	adds	r3, #2
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7ff f8b8 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80025d8:	20db      	movs	r0, #219	; 0xdb
 80025da:	f001 f8a7 	bl	800372c <putchar>
	gotoxy(player->x+1,player->y+2);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	3302      	adds	r3, #2
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f7ff f8aa 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80025f4:	20db      	movs	r0, #219	; 0xdb
 80025f6:	f001 f899 	bl	800372c <putchar>
	gotoxy(player->x+2,player->y+2);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3302      	adds	r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	3302      	adds	r3, #2
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f7ff f89c 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002610:	20db      	movs	r0, #219	; 0xdb
 8002612:	f001 f88b 	bl	800372c <putchar>
	gotoxy(player->x+4,player->y+2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3304      	adds	r3, #4
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	3302      	adds	r3, #2
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f7ff f88e 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800262c:	20db      	movs	r0, #219	; 0xdb
 800262e:	f001 f87d 	bl	800372c <putchar>
	fgcolor(0);
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff f848 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3b03      	subs	r3, #3
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	3302      	adds	r3, #2
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f7ff f87d 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800264e:	20db      	movs	r0, #219	; 0xdb
 8002650:	f001 f86c 	bl	800372c <putchar>
	gotoxy(player->x-1,player->y+2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	3302      	adds	r3, #2
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7ff f86f 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800266a:	20db      	movs	r0, #219	; 0xdb
 800266c:	f001 f85e 	bl	800372c <putchar>
	gotoxy(player->x+3,player->y+2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3303      	adds	r3, #3
 8002676:	461a      	mov	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	3302      	adds	r3, #2
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7ff f861 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002686:	20db      	movs	r0, #219	; 0xdb
 8002688:	f001 f850 	bl	800372c <putchar>
	fgcolor(15);
 800268c:	200f      	movs	r0, #15
 800268e:	f7ff f81b 	bl	80016c8 <fgcolor>
	gotoxy(player->x,player->y+3);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	3303      	adds	r3, #3
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7ff f851 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80026a6:	20db      	movs	r0, #219	; 0xdb
 80026a8:	f001 f840 	bl	800372c <putchar>
	fgcolor(4);
 80026ac:	2004      	movs	r0, #4
 80026ae:	f7ff f80b 	bl	80016c8 <fgcolor>
	printf("%c", 219);
 80026b2:	20db      	movs	r0, #219	; 0xdb
 80026b4:	f001 f83a 	bl	800372c <putchar>
	fgcolor(15);
 80026b8:	200f      	movs	r0, #15
 80026ba:	f7ff f805 	bl	80016c8 <fgcolor>
	gotoxy(player->x+4,player->y+3);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3304      	adds	r3, #4
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	3303      	adds	r3, #3
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f7ff f83a 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80026d4:	20db      	movs	r0, #219	; 0xdb
 80026d6:	f001 f829 	bl	800372c <putchar>
	fgcolor(0);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe fff4 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	3303      	adds	r3, #3
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff f829 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80026f6:	20db      	movs	r0, #219	; 0xdb
 80026f8:	f001 f818 	bl	800372c <putchar>
	fgcolor(15);
 80026fc:	200f      	movs	r0, #15
 80026fe:	f7fe ffe3 	bl	80016c8 <fgcolor>
	gotoxy(player->x-1,player->y+4);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3b01      	subs	r3, #1
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f7ff f818 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002718:	20db      	movs	r0, #219	; 0xdb
 800271a:	f001 f807 	bl	800372c <putchar>
	fgcolor(4);
 800271e:	2004      	movs	r0, #4
 8002720:	f7fe ffd2 	bl	80016c8 <fgcolor>
	gotoxy(player->x+2,player->y+4);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3302      	adds	r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	4619      	mov	r1, r3
 8002734:	4610      	mov	r0, r2
 8002736:	f7ff f807 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800273a:	20db      	movs	r0, #219	; 0xdb
 800273c:	f000 fff6 	bl	800372c <putchar>
	fgcolor(15);
 8002740:	200f      	movs	r0, #15
 8002742:	f7fe ffc1 	bl	80016c8 <fgcolor>
	printf("%c", 219);
 8002746:	20db      	movs	r0, #219	; 0xdb
 8002748:	f000 fff0 	bl	800372c <putchar>
	fgcolor(0);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe ffbb 	bl	80016c8 <fgcolor>
	gotoxy(player->x-2,player->y+4);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3b02      	subs	r3, #2
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7fe fff0 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002768:	20db      	movs	r0, #219	; 0xdb
 800276a:	f000 ffdf 	bl	800372c <putchar>
	fgcolor(15);
 800276e:	200f      	movs	r0, #15
 8002770:	f7fe ffaa 	bl	80016c8 <fgcolor>
	gotoxy(player->x+4, player->y+5);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3304      	adds	r3, #4
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	3305      	adds	r3, #5
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7fe ffdf 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800278a:	20db      	movs	r0, #219	; 0xdb
 800278c:	f000 ffce 	bl	800372c <putchar>
	fgcolor(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe ff99 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+5);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3b03      	subs	r3, #3
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	3305      	adds	r3, #5
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7fe ffce 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80027ac:	20db      	movs	r0, #219	; 0xdb
 80027ae:	f000 ffbd 	bl	800372c <putchar>
	fgcolor(15);
 80027b2:	200f      	movs	r0, #15
 80027b4:	f7fe ff88 	bl	80016c8 <fgcolor>
	gotoxy(player->x-1, player->y+6);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	3306      	adds	r3, #6
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe ffbd 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80027ce:	20db      	movs	r0, #219	; 0xdb
 80027d0:	f000 ffac 	bl	800372c <putchar>
	gotoxy(player->x+1, player->y+6);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	3306      	adds	r3, #6
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fe ffaf 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80027ea:	20db      	movs	r0, #219	; 0xdb
 80027ec:	f000 ff9e 	bl	800372c <putchar>
	gotoxy(player->x+5, player->y+6);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3305      	adds	r3, #5
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	3306      	adds	r3, #6
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fe ffa1 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002806:	20db      	movs	r0, #219	; 0xdb
 8002808:	f000 ff90 	bl	800372c <putchar>
	fgcolor(0);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe ff5b 	bl	80016c8 <fgcolor>
	gotoxy(player->x-4,player->y+6);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3b04      	subs	r3, #4
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	3306      	adds	r3, #6
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f7fe ff90 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002828:	20db      	movs	r0, #219	; 0xdb
 800282a:	f000 ff7f 	bl	800372c <putchar>
	gotoxy(player->x,player->y+6);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	3306      	adds	r3, #6
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f7fe ff83 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002842:	20db      	movs	r0, #219	; 0xdb
 8002844:	f000 ff72 	bl	800372c <putchar>
	gotoxy(player->x+2,player->y+6);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3302      	adds	r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	3306      	adds	r3, #6
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7fe ff75 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800285e:	20db      	movs	r0, #219	; 0xdb
 8002860:	f000 ff64 	bl	800372c <putchar>
	fgcolor(15);
 8002864:	200f      	movs	r0, #15
 8002866:	f7fe ff2f 	bl	80016c8 <fgcolor>
	gotoxy(player->x-2,player->y+7);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3b02      	subs	r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	3307      	adds	r3, #7
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7fe ff64 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002880:	20db      	movs	r0, #219	; 0xdb
 8002882:	f000 ff53 	bl	800372c <putchar>
	gotoxy(player->x+5,player->y+7);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3305      	adds	r3, #5
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	3307      	adds	r3, #7
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f7fe ff56 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800289c:	20db      	movs	r0, #219	; 0xdb
 800289e:	f000 ff45 	bl	800372c <putchar>
	fgcolor(0);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe ff10 	bl	80016c8 <fgcolor>
	gotoxy(player->x-4,player->y+7);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3b04      	subs	r3, #4
 80028ae:	461a      	mov	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	3307      	adds	r3, #7
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe ff45 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80028be:	20db      	movs	r0, #219	; 0xdb
 80028c0:	f000 ff34 	bl	800372c <putchar>
	gotoxy(player->x+3,player->y+7);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3303      	adds	r3, #3
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3307      	adds	r3, #7
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7fe ff37 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80028da:	20db      	movs	r0, #219	; 0xdb
 80028dc:	f000 ff26 	bl	800372c <putchar>
	fgcolor(15);
 80028e0:	200f      	movs	r0, #15
 80028e2:	f7fe fef1 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+8);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3b03      	subs	r3, #3
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	3308      	adds	r3, #8
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe ff26 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80028fc:	20db      	movs	r0, #219	; 0xdb
 80028fe:	f000 ff15 	bl	800372c <putchar>
	gotoxy(player->x+5,player->y+8);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3305      	adds	r3, #5
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	3308      	adds	r3, #8
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7fe ff18 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002918:	20db      	movs	r0, #219	; 0xdb
 800291a:	f000 ff07 	bl	800372c <putchar>
	fgcolor(0);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fed2 	bl	80016c8 <fgcolor>
	gotoxy(player->x-4,player->y+8);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3b04      	subs	r3, #4
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	3308      	adds	r3, #8
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7fe ff07 	bl	8001748 <gotoxy>
	printf("%c", 219);
 800293a:	20db      	movs	r0, #219	; 0xdb
 800293c:	f000 fef6 	bl	800372c <putchar>
	gotoxy(player->x+4,player->y+8);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3304      	adds	r3, #4
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	3308      	adds	r3, #8
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe fef9 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002956:	20db      	movs	r0, #219	; 0xdb
 8002958:	f000 fee8 	bl	800372c <putchar>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <shiftLeft>:
	printf("%c", 219);
	gotoxy(player->x-4,player->y+8);
	printf("%c", 219);
}

void shiftLeft(goodShip *player) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 800296c:	200f      	movs	r0, #15
 800296e:	f7fe feab 	bl	80016c8 <fgcolor>
	gotoxy(player->x-1,player->y);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7fe fee1 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002986:	20db      	movs	r0, #219	; 0xdb
 8002988:	f000 fed0 	bl	800372c <putchar>
	fgcolor(0);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fe9b 	bl	80016c8 <fgcolor>
	gotoxy(player->x,player->y);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7fe fed2 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80029a4:	20db      	movs	r0, #219	; 0xdb
 80029a6:	f000 fec1 	bl	800372c <putchar>
	fgcolor(15);
 80029aa:	200f      	movs	r0, #15
 80029ac:	f7fe fe8c 	bl	80016c8 <fgcolor>
	gotoxy(player->x+2,player->y+1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3302      	adds	r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	3301      	adds	r3, #1
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe fec1 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80029c6:	20db      	movs	r0, #219	; 0xdb
 80029c8:	f000 feb0 	bl	800372c <putchar>
	gotoxy(player->x-1,player->y+1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe feb3 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80029e2:	20db      	movs	r0, #219	; 0xdb
 80029e4:	f000 fea2 	bl	800372c <putchar>
	gotoxy(player->x-4,player->y+1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3b04      	subs	r3, #4
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	3301      	adds	r3, #1
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7fe fea5 	bl	8001748 <gotoxy>
	printf("%c", 219);
 80029fe:	20db      	movs	r0, #219	; 0xdb
 8002a00:	f000 fe94 	bl	800372c <putchar>
	fgcolor(0);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fe5f 	bl	80016c8 <fgcolor>
	gotoxy(player->x+3,player->y+1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f7fe fe94 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002a20:	20db      	movs	r0, #219	; 0xdb
 8002a22:	f000 fe83 	bl	800372c <putchar>
	gotoxy(player->x,player->y+1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	3301      	adds	r3, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f7fe fe87 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002a3a:	20db      	movs	r0, #219	; 0xdb
 8002a3c:	f000 fe76 	bl	800372c <putchar>
	gotoxy(player->x-3,player->y+1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe fe79 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002a56:	20db      	movs	r0, #219	; 0xdb
 8002a58:	f000 fe68 	bl	800372c <putchar>
	fgcolor(15);
 8002a5c:	200f      	movs	r0, #15
 8002a5e:	f7fe fe33 	bl	80016c8 <fgcolor>
	gotoxy(player->x+2,player->y+2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3302      	adds	r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7fe fe68 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002a78:	20db      	movs	r0, #219	; 0xdb
 8002a7a:	f000 fe57 	bl	800372c <putchar>
	gotoxy(player->x-1,player->y+2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f7fe fe5a 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002a94:	20db      	movs	r0, #219	; 0xdb
 8002a96:	f000 fe49 	bl	800372c <putchar>
	gotoxy(player->x-2,player->y+2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b02      	subs	r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f7fe fe4c 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002ab0:	20db      	movs	r0, #219	; 0xdb
 8002ab2:	f000 fe3b 	bl	800372c <putchar>
	gotoxy(player->x-4,player->y+2);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3b04      	subs	r3, #4
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7fe fe3e 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002acc:	20db      	movs	r0, #219	; 0xdb
 8002ace:	f000 fe2d 	bl	800372c <putchar>
	fgcolor(0);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe fdf8 	bl	80016c8 <fgcolor>
	gotoxy(player->x+3,player->y+2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3303      	adds	r3, #3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe fe2d 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002aee:	20db      	movs	r0, #219	; 0xdb
 8002af0:	f000 fe1c 	bl	800372c <putchar>
	gotoxy(player->x+1,player->y+2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	461a      	mov	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	3302      	adds	r3, #2
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7fe fe1f 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002b0a:	20db      	movs	r0, #219	; 0xdb
 8002b0c:	f000 fe0e 	bl	800372c <putchar>
	gotoxy(player->x-3,player->y+2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7fe fe11 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002b26:	20db      	movs	r0, #219	; 0xdb
 8002b28:	f000 fe00 	bl	800372c <putchar>
	fgcolor(15);
 8002b2c:	200f      	movs	r0, #15
 8002b2e:	f7fe fdcb 	bl	80016c8 <fgcolor>
	gotoxy(player->x,player->y+3);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	3303      	adds	r3, #3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7fe fe01 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002b46:	20db      	movs	r0, #219	; 0xdb
 8002b48:	f000 fdf0 	bl	800372c <putchar>
	fgcolor(4);
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	f7fe fdbb 	bl	80016c8 <fgcolor>
	gotoxy(player->x-1,player->y+3);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	461a      	mov	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3303      	adds	r3, #3
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7fe fdf0 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002b68:	20db      	movs	r0, #219	; 0xdb
 8002b6a:	f000 fddf 	bl	800372c <putchar>
	fgcolor(15);
 8002b6e:	200f      	movs	r0, #15
 8002b70:	f7fe fdaa 	bl	80016c8 <fgcolor>
	gotoxy(player->x-4,player->y+3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	3303      	adds	r3, #3
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7fe fddf 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002b8a:	20db      	movs	r0, #219	; 0xdb
 8002b8c:	f000 fdce 	bl	800372c <putchar>
	fgcolor(0);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fd99 	bl	80016c8 <fgcolor>
	gotoxy(player->x+3,player->y+3);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7fe fdce 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002bac:	20db      	movs	r0, #219	; 0xdb
 8002bae:	f000 fdbd 	bl	800372c <putchar>
	fgcolor(15);
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f7fe fd88 	bl	80016c8 <fgcolor>
	gotoxy(player->x+1,player->y+4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7fe fdbd 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002bce:	20db      	movs	r0, #219	; 0xdb
 8002bd0:	f000 fdac 	bl	800372c <putchar>
	fgcolor(4);
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	f7fe fd77 	bl	80016c8 <fgcolor>
	gotoxy(player->x-2,player->y+4);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3b02      	subs	r3, #2
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7fe fdac 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002bf0:	20db      	movs	r0, #219	; 0xdb
 8002bf2:	f000 fd9b 	bl	800372c <putchar>
	fgcolor(15);
 8002bf6:	200f      	movs	r0, #15
 8002bf8:	f7fe fd66 	bl	80016c8 <fgcolor>
	gotoxy(player->x-3,player->y+4);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f7fe fd9b 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002c12:	20db      	movs	r0, #219	; 0xdb
 8002c14:	f000 fd8a 	bl	800372c <putchar>
	fgcolor(0);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe fd55 	bl	80016c8 <fgcolor>
	gotoxy(player->x+2,player->y+4);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3302      	adds	r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7fe fd8a 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002c34:	20db      	movs	r0, #219	; 0xdb
 8002c36:	f000 fd79 	bl	800372c <putchar>
	fgcolor(15);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f7fe fd44 	bl	80016c8 <fgcolor>
	gotoxy(player->x-4, player->y+5);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3b04      	subs	r3, #4
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	3305      	adds	r3, #5
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f7fe fd79 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002c56:	20db      	movs	r0, #219	; 0xdb
 8002c58:	f000 fd68 	bl	800372c <putchar>
	fgcolor(0);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe fd33 	bl	80016c8 <fgcolor>
	gotoxy(player->x+3,player->y+5);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3303      	adds	r3, #3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	3305      	adds	r3, #5
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe fd68 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002c78:	20db      	movs	r0, #219	; 0xdb
 8002c7a:	f000 fd57 	bl	800372c <putchar>
	fgcolor(15);
 8002c7e:	200f      	movs	r0, #15
 8002c80:	f7fe fd22 	bl	80016c8 <fgcolor>
	gotoxy(player->x+1, player->y+6);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	3306      	adds	r3, #6
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f7fe fd57 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002c9a:	20db      	movs	r0, #219	; 0xdb
 8002c9c:	f000 fd46 	bl	800372c <putchar>
	gotoxy(player->x-1, player->y+6);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	3306      	adds	r3, #6
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7fe fd49 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002cb6:	20db      	movs	r0, #219	; 0xdb
 8002cb8:	f000 fd38 	bl	800372c <putchar>
	gotoxy(player->x-5, player->y+6);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3b05      	subs	r3, #5
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	3306      	adds	r3, #6
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fe fd3b 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002cd2:	20db      	movs	r0, #219	; 0xdb
 8002cd4:	f000 fd2a 	bl	800372c <putchar>
	fgcolor(0);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe fcf5 	bl	80016c8 <fgcolor>
	gotoxy(player->x+4,player->y+6);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	3306      	adds	r3, #6
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7fe fd2a 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002cf4:	20db      	movs	r0, #219	; 0xdb
 8002cf6:	f000 fd19 	bl	800372c <putchar>
	gotoxy(player->x,player->y+6);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	3306      	adds	r3, #6
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fe fd1d 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002d0e:	20db      	movs	r0, #219	; 0xdb
 8002d10:	f000 fd0c 	bl	800372c <putchar>
	gotoxy(player->x-2,player->y+6);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3b02      	subs	r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	3306      	adds	r3, #6
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fe fd0f 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002d2a:	20db      	movs	r0, #219	; 0xdb
 8002d2c:	f000 fcfe 	bl	800372c <putchar>
	fgcolor(15);
 8002d30:	200f      	movs	r0, #15
 8002d32:	f7fe fcc9 	bl	80016c8 <fgcolor>
	gotoxy(player->x+2,player->y+7);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	3307      	adds	r3, #7
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7fe fcfe 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002d4c:	20db      	movs	r0, #219	; 0xdb
 8002d4e:	f000 fced 	bl	800372c <putchar>
	gotoxy(player->x-5,player->y+7);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3b05      	subs	r3, #5
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	3307      	adds	r3, #7
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f7fe fcf0 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002d68:	20db      	movs	r0, #219	; 0xdb
 8002d6a:	f000 fcdf 	bl	800372c <putchar>
	fgcolor(0);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fe fcaa 	bl	80016c8 <fgcolor>
	gotoxy(player->x+4,player->y+7);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	3307      	adds	r3, #7
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7fe fcdf 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002d8a:	20db      	movs	r0, #219	; 0xdb
 8002d8c:	f000 fcce 	bl	800372c <putchar>
	gotoxy(player->x-3,player->y+7);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3b03      	subs	r3, #3
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	3307      	adds	r3, #7
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fcd1 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002da6:	20db      	movs	r0, #219	; 0xdb
 8002da8:	f000 fcc0 	bl	800372c <putchar>
	fgcolor(15);
 8002dac:	200f      	movs	r0, #15
 8002dae:	f7fe fc8b 	bl	80016c8 <fgcolor>
	gotoxy(player->x+3,player->y+8);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3303      	adds	r3, #3
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fe fcc0 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002dc8:	20db      	movs	r0, #219	; 0xdb
 8002dca:	f000 fcaf 	bl	800372c <putchar>
	gotoxy(player->x-5,player->y+8);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b05      	subs	r3, #5
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fcb2 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002de4:	20db      	movs	r0, #219	; 0xdb
 8002de6:	f000 fca1 	bl	800372c <putchar>
	fgcolor(0);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fe fc6c 	bl	80016c8 <fgcolor>
	gotoxy(player->x+4,player->y+8);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3304      	adds	r3, #4
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7fe fca1 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002e06:	20db      	movs	r0, #219	; 0xdb
 8002e08:	f000 fc90 	bl	800372c <putchar>
	gotoxy(player->x-4,player->y+8);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fe fc93 	bl	8001748 <gotoxy>
	printf("%c", 219);
 8002e22:	20db      	movs	r0, #219	; 0xdb
 8002e24:	f000 fc82 	bl	800372c <putchar>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <playerDraw>:
#include "sprite.h"

void playerDraw(int32_t x, int32_t y) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	fgcolor(15);
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	f7fe fc44 	bl	80016c8 <fgcolor>
	gotoxy(x,y);
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fc80 	bl	8001748 <gotoxy>
	printf("%c",219);
 8002e48:	20db      	movs	r0, #219	; 0xdb
 8002e4a:	f000 fc6f 	bl	800372c <putchar>
	gotoxy(x-3,y+1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	1eda      	subs	r2, r3, #3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fe fc75 	bl	8001748 <gotoxy>
	printf("%c  %c  %c",219,219,219);
 8002e5e:	23db      	movs	r3, #219	; 0xdb
 8002e60:	22db      	movs	r2, #219	; 0xdb
 8002e62:	21db      	movs	r1, #219	; 0xdb
 8002e64:	484c      	ldr	r0, [pc, #304]	; (8002f98 <playerDraw+0x168>)
 8002e66:	f000 fc49 	bl	80036fc <iprintf>
	gotoxy(x-3,y+2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1eda      	subs	r2, r3, #3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	3302      	adds	r3, #2
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7fe fc67 	bl	8001748 <gotoxy>
	printf("%c %c%c%c %c",219,219,219,219,219);
 8002e7a:	23db      	movs	r3, #219	; 0xdb
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	23db      	movs	r3, #219	; 0xdb
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	23db      	movs	r3, #219	; 0xdb
 8002e84:	22db      	movs	r2, #219	; 0xdb
 8002e86:	21db      	movs	r1, #219	; 0xdb
 8002e88:	4844      	ldr	r0, [pc, #272]	; (8002f9c <playerDraw+0x16c>)
 8002e8a:	f000 fc37 	bl	80036fc <iprintf>
	gotoxy(x-3,y+3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1eda      	subs	r2, r3, #3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3303      	adds	r3, #3
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7fe fc55 	bl	8001748 <gotoxy>
	printf("%c%c%c",219,219,219);
 8002e9e:	23db      	movs	r3, #219	; 0xdb
 8002ea0:	22db      	movs	r2, #219	; 0xdb
 8002ea2:	21db      	movs	r1, #219	; 0xdb
 8002ea4:	483e      	ldr	r0, [pc, #248]	; (8002fa0 <playerDraw+0x170>)
 8002ea6:	f000 fc29 	bl	80036fc <iprintf>
	fgcolor(4);
 8002eaa:	2004      	movs	r0, #4
 8002eac:	f7fe fc0c 	bl	80016c8 <fgcolor>
	printf("%c",219);
 8002eb0:	20db      	movs	r0, #219	; 0xdb
 8002eb2:	f000 fc3b 	bl	800372c <putchar>
	fgcolor(15);
 8002eb6:	200f      	movs	r0, #15
 8002eb8:	f7fe fc06 	bl	80016c8 <fgcolor>
	printf("%c%c%c",219,219,219);
 8002ebc:	23db      	movs	r3, #219	; 0xdb
 8002ebe:	22db      	movs	r2, #219	; 0xdb
 8002ec0:	21db      	movs	r1, #219	; 0xdb
 8002ec2:	4837      	ldr	r0, [pc, #220]	; (8002fa0 <playerDraw+0x170>)
 8002ec4:	f000 fc1a 	bl	80036fc <iprintf>
	gotoxy(x-2,y+4);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1e9a      	subs	r2, r3, #2
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7fe fc38 	bl	8001748 <gotoxy>
	printf("%c",219);
 8002ed8:	20db      	movs	r0, #219	; 0xdb
 8002eda:	f000 fc27 	bl	800372c <putchar>
	fgcolor(4);
 8002ede:	2004      	movs	r0, #4
 8002ee0:	f7fe fbf2 	bl	80016c8 <fgcolor>
	printf("%c%c%c",219,219,219);
 8002ee4:	23db      	movs	r3, #219	; 0xdb
 8002ee6:	22db      	movs	r2, #219	; 0xdb
 8002ee8:	21db      	movs	r1, #219	; 0xdb
 8002eea:	482d      	ldr	r0, [pc, #180]	; (8002fa0 <playerDraw+0x170>)
 8002eec:	f000 fc06 	bl	80036fc <iprintf>
	fgcolor(15);
 8002ef0:	200f      	movs	r0, #15
 8002ef2:	f7fe fbe9 	bl	80016c8 <fgcolor>
	printf("%c",219);
 8002ef6:	20db      	movs	r0, #219	; 0xdb
 8002ef8:	f000 fc18 	bl	800372c <putchar>
	gotoxy(x-3,y+5);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1eda      	subs	r2, r3, #3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3305      	adds	r3, #5
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fe fc1e 	bl	8001748 <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 8002f0c:	23db      	movs	r3, #219	; 0xdb
 8002f0e:	9303      	str	r3, [sp, #12]
 8002f10:	23db      	movs	r3, #219	; 0xdb
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	23db      	movs	r3, #219	; 0xdb
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	23db      	movs	r3, #219	; 0xdb
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	23db      	movs	r3, #219	; 0xdb
 8002f1e:	22db      	movs	r2, #219	; 0xdb
 8002f20:	21db      	movs	r1, #219	; 0xdb
 8002f22:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <playerDraw+0x174>)
 8002f24:	f000 fbea 	bl	80036fc <iprintf>
	gotoxy(x-4,y+6);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1f1a      	subs	r2, r3, #4
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3306      	adds	r3, #6
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe fc08 	bl	8001748 <gotoxy>
	printf("%c%c%c %c %c%c%c",219,219,219,219,219,219,219);
 8002f38:	23db      	movs	r3, #219	; 0xdb
 8002f3a:	9303      	str	r3, [sp, #12]
 8002f3c:	23db      	movs	r3, #219	; 0xdb
 8002f3e:	9302      	str	r3, [sp, #8]
 8002f40:	23db      	movs	r3, #219	; 0xdb
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	23db      	movs	r3, #219	; 0xdb
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	23db      	movs	r3, #219	; 0xdb
 8002f4a:	22db      	movs	r2, #219	; 0xdb
 8002f4c:	21db      	movs	r1, #219	; 0xdb
 8002f4e:	4816      	ldr	r0, [pc, #88]	; (8002fa8 <playerDraw+0x178>)
 8002f50:	f000 fbd4 	bl	80036fc <iprintf>
	gotoxy(x-4,y+7);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1f1a      	subs	r2, r3, #4
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3307      	adds	r3, #7
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f7fe fbf2 	bl	8001748 <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 8002f64:	23db      	movs	r3, #219	; 0xdb
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	23db      	movs	r3, #219	; 0xdb
 8002f6a:	22db      	movs	r2, #219	; 0xdb
 8002f6c:	21db      	movs	r1, #219	; 0xdb
 8002f6e:	480f      	ldr	r0, [pc, #60]	; (8002fac <playerDraw+0x17c>)
 8002f70:	f000 fbc4 	bl	80036fc <iprintf>
	gotoxy(x-4,y+8);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1f1a      	subs	r2, r3, #4
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7fe fbe2 	bl	8001748 <gotoxy>
	printf("%c       %c",219,219);
 8002f84:	22db      	movs	r2, #219	; 0xdb
 8002f86:	21db      	movs	r1, #219	; 0xdb
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <playerDraw+0x180>)
 8002f8a:	f000 fbb7 	bl	80036fc <iprintf>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08004cd4 	.word	0x08004cd4
 8002f9c:	08004ce0 	.word	0x08004ce0
 8002fa0:	08004cf0 	.word	0x08004cf0
 8002fa4:	08004cf8 	.word	0x08004cf8
 8002fa8:	08004d08 	.word	0x08004d08
 8002fac:	08004d1c 	.word	0x08004d1c
 8002fb0:	08004d2c 	.word	0x08004d2c

08002fb4 <enemyDraw>:
	printf("         ");
}



void enemyDraw(int32_t x, int32_t y) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af04      	add	r7, sp, #16
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	fgcolor(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7fe fb82 	bl	80016c8 <fgcolor>
	gotoxy(x-3,y);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b03      	subs	r3, #3
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fbbc 	bl	8001748 <gotoxy>
	printf("%c     %c",219,219);
 8002fd0:	22db      	movs	r2, #219	; 0xdb
 8002fd2:	21db      	movs	r1, #219	; 0xdb
 8002fd4:	4855      	ldr	r0, [pc, #340]	; (800312c <enemyDraw+0x178>)
 8002fd6:	f000 fb91 	bl	80036fc <iprintf>
	gotoxy(x-3,y-1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1eda      	subs	r2, r3, #3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fe fbaf 	bl	8001748 <gotoxy>
	printf("%c     %c",219,219);
 8002fea:	22db      	movs	r2, #219	; 0xdb
 8002fec:	21db      	movs	r1, #219	; 0xdb
 8002fee:	484f      	ldr	r0, [pc, #316]	; (800312c <enemyDraw+0x178>)
 8002ff0:	f000 fb84 	bl	80036fc <iprintf>
	gotoxy(x-3,y-2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1eda      	subs	r2, r3, #3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	3b02      	subs	r3, #2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7fe fba2 	bl	8001748 <gotoxy>
	printf("%c %c %c %c",219,219,219,219);
 8003004:	23db      	movs	r3, #219	; 0xdb
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	23db      	movs	r3, #219	; 0xdb
 800300a:	22db      	movs	r2, #219	; 0xdb
 800300c:	21db      	movs	r1, #219	; 0xdb
 800300e:	4848      	ldr	r0, [pc, #288]	; (8003130 <enemyDraw+0x17c>)
 8003010:	f000 fb74 	bl	80036fc <iprintf>
	gotoxy(x-3,y-3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1eda      	subs	r2, r3, #3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	3b03      	subs	r3, #3
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fe fb92 	bl	8001748 <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 8003024:	23db      	movs	r3, #219	; 0xdb
 8003026:	9303      	str	r3, [sp, #12]
 8003028:	23db      	movs	r3, #219	; 0xdb
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	23db      	movs	r3, #219	; 0xdb
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	23db      	movs	r3, #219	; 0xdb
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	23db      	movs	r3, #219	; 0xdb
 8003036:	22db      	movs	r2, #219	; 0xdb
 8003038:	21db      	movs	r1, #219	; 0xdb
 800303a:	483e      	ldr	r0, [pc, #248]	; (8003134 <enemyDraw+0x180>)
 800303c:	f000 fb5e 	bl	80036fc <iprintf>
	gotoxy(x-3,y-4);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1eda      	subs	r2, r3, #3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3b04      	subs	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7fe fb7c 	bl	8001748 <gotoxy>
	printf("%c%c",219,219);
 8003050:	22db      	movs	r2, #219	; 0xdb
 8003052:	21db      	movs	r1, #219	; 0xdb
 8003054:	4838      	ldr	r0, [pc, #224]	; (8003138 <enemyDraw+0x184>)
 8003056:	f000 fb51 	bl	80036fc <iprintf>
	fgcolor(11);
 800305a:	200b      	movs	r0, #11
 800305c:	f7fe fb34 	bl	80016c8 <fgcolor>
	printf("%c",219);
 8003060:	20db      	movs	r0, #219	; 0xdb
 8003062:	f000 fb63 	bl	800372c <putchar>
	fgcolor(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f7fe fb2e 	bl	80016c8 <fgcolor>
	printf("%c",219);
 800306c:	20db      	movs	r0, #219	; 0xdb
 800306e:	f000 fb5d 	bl	800372c <putchar>
	fgcolor(11);
 8003072:	200b      	movs	r0, #11
 8003074:	f7fe fb28 	bl	80016c8 <fgcolor>
	printf("%c",219);
 8003078:	20db      	movs	r0, #219	; 0xdb
 800307a:	f000 fb57 	bl	800372c <putchar>
	fgcolor(1);
 800307e:	2001      	movs	r0, #1
 8003080:	f7fe fb22 	bl	80016c8 <fgcolor>
	printf("%c%c",219,219);
 8003084:	22db      	movs	r2, #219	; 0xdb
 8003086:	21db      	movs	r1, #219	; 0xdb
 8003088:	482b      	ldr	r0, [pc, #172]	; (8003138 <enemyDraw+0x184>)
 800308a:	f000 fb37 	bl	80036fc <iprintf>
	gotoxy(x-2,y-5);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1e9a      	subs	r2, r3, #2
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	3b05      	subs	r3, #5
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7fe fb55 	bl	8001748 <gotoxy>
	printf("%c%c",219,219);
 800309e:	22db      	movs	r2, #219	; 0xdb
 80030a0:	21db      	movs	r1, #219	; 0xdb
 80030a2:	4825      	ldr	r0, [pc, #148]	; (8003138 <enemyDraw+0x184>)
 80030a4:	f000 fb2a 	bl	80036fc <iprintf>
	fgcolor(11);
 80030a8:	200b      	movs	r0, #11
 80030aa:	f7fe fb0d 	bl	80016c8 <fgcolor>
	printf("%c",219);
 80030ae:	20db      	movs	r0, #219	; 0xdb
 80030b0:	f000 fb3c 	bl	800372c <putchar>
	fgcolor(1);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7fe fb07 	bl	80016c8 <fgcolor>
	printf("%c%c",219,219);
 80030ba:	22db      	movs	r2, #219	; 0xdb
 80030bc:	21db      	movs	r1, #219	; 0xdb
 80030be:	481e      	ldr	r0, [pc, #120]	; (8003138 <enemyDraw+0x184>)
 80030c0:	f000 fb1c 	bl	80036fc <iprintf>
	gotoxy(x-3,y-6);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1eda      	subs	r2, r3, #3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	3b06      	subs	r3, #6
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fe fb3a 	bl	8001748 <gotoxy>
	printf("%c%c %c %c%c",219,219,219,219,219);
 80030d4:	23db      	movs	r3, #219	; 0xdb
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	23db      	movs	r3, #219	; 0xdb
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	23db      	movs	r3, #219	; 0xdb
 80030de:	22db      	movs	r2, #219	; 0xdb
 80030e0:	21db      	movs	r1, #219	; 0xdb
 80030e2:	4816      	ldr	r0, [pc, #88]	; (800313c <enemyDraw+0x188>)
 80030e4:	f000 fb0a 	bl	80036fc <iprintf>
	gotoxy(x-4,y-7);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1f1a      	subs	r2, r3, #4
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	3b07      	subs	r3, #7
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fe fb28 	bl	8001748 <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 80030f8:	23db      	movs	r3, #219	; 0xdb
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	23db      	movs	r3, #219	; 0xdb
 80030fe:	22db      	movs	r2, #219	; 0xdb
 8003100:	21db      	movs	r1, #219	; 0xdb
 8003102:	480f      	ldr	r0, [pc, #60]	; (8003140 <enemyDraw+0x18c>)
 8003104:	f000 fafa 	bl	80036fc <iprintf>
	gotoxy(x-4,y-8);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1f1a      	subs	r2, r3, #4
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3b08      	subs	r3, #8
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7fe fb18 	bl	8001748 <gotoxy>
	printf("%c       %c",219,219);
 8003118:	22db      	movs	r2, #219	; 0xdb
 800311a:	21db      	movs	r1, #219	; 0xdb
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <enemyDraw+0x190>)
 800311e:	f000 faed 	bl	80036fc <iprintf>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08004d54 	.word	0x08004d54
 8003130:	08004d60 	.word	0x08004d60
 8003134:	08004cf8 	.word	0x08004cf8
 8003138:	08004d6c 	.word	0x08004d6c
 800313c:	08004d74 	.word	0x08004d74
 8003140:	08004d1c 	.word	0x08004d1c
 8003144:	08004d2c 	.word	0x08004d2c

08003148 <enemyRemove>:

void enemyRemove(int32_t x, int32_t y) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	gotoxy(x-3,y);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3b03      	subs	r3, #3
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe faf5 	bl	8001748 <gotoxy>
	printf("       ");
 800315e:	4838      	ldr	r0, [pc, #224]	; (8003240 <enemyRemove+0xf8>)
 8003160:	f000 facc 	bl	80036fc <iprintf>
	gotoxy(x-3,y-1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1eda      	subs	r2, r3, #3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	3b01      	subs	r3, #1
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7fe faea 	bl	8001748 <gotoxy>
	printf("       ");
 8003174:	4832      	ldr	r0, [pc, #200]	; (8003240 <enemyRemove+0xf8>)
 8003176:	f000 fac1 	bl	80036fc <iprintf>
	gotoxy(x-3,y-2);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1eda      	subs	r2, r3, #3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	3b02      	subs	r3, #2
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7fe fadf 	bl	8001748 <gotoxy>
	printf("       ");
 800318a:	482d      	ldr	r0, [pc, #180]	; (8003240 <enemyRemove+0xf8>)
 800318c:	f000 fab6 	bl	80036fc <iprintf>
	gotoxy(x-3,y-3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1eda      	subs	r2, r3, #3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3b03      	subs	r3, #3
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7fe fad4 	bl	8001748 <gotoxy>
	printf("       ");
 80031a0:	4827      	ldr	r0, [pc, #156]	; (8003240 <enemyRemove+0xf8>)
 80031a2:	f000 faab 	bl	80036fc <iprintf>
	gotoxy(x-3,y-4);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1eda      	subs	r2, r3, #3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	3b04      	subs	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7fe fac9 	bl	8001748 <gotoxy>
	printf("  ");
 80031b6:	4823      	ldr	r0, [pc, #140]	; (8003244 <enemyRemove+0xfc>)
 80031b8:	f000 faa0 	bl	80036fc <iprintf>
	printf(" ");
 80031bc:	2020      	movs	r0, #32
 80031be:	f000 fab5 	bl	800372c <putchar>
	printf(" ");
 80031c2:	2020      	movs	r0, #32
 80031c4:	f000 fab2 	bl	800372c <putchar>
	printf(" ");
 80031c8:	2020      	movs	r0, #32
 80031ca:	f000 faaf 	bl	800372c <putchar>
	printf("  ");
 80031ce:	481d      	ldr	r0, [pc, #116]	; (8003244 <enemyRemove+0xfc>)
 80031d0:	f000 fa94 	bl	80036fc <iprintf>
	gotoxy(x-2,y-5);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1e9a      	subs	r2, r3, #2
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	3b05      	subs	r3, #5
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fe fab2 	bl	8001748 <gotoxy>
	printf("  ");
 80031e4:	4817      	ldr	r0, [pc, #92]	; (8003244 <enemyRemove+0xfc>)
 80031e6:	f000 fa89 	bl	80036fc <iprintf>
	printf(" ");
 80031ea:	2020      	movs	r0, #32
 80031ec:	f000 fa9e 	bl	800372c <putchar>
	printf("  ");
 80031f0:	4814      	ldr	r0, [pc, #80]	; (8003244 <enemyRemove+0xfc>)
 80031f2:	f000 fa83 	bl	80036fc <iprintf>
	gotoxy(x-3,y-6);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	1eda      	subs	r2, r3, #3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	3b06      	subs	r3, #6
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fe faa1 	bl	8001748 <gotoxy>
	printf("       ");
 8003206:	480e      	ldr	r0, [pc, #56]	; (8003240 <enemyRemove+0xf8>)
 8003208:	f000 fa78 	bl	80036fc <iprintf>
	gotoxy(x-4,y-7);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1f1a      	subs	r2, r3, #4
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3b07      	subs	r3, #7
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7fe fa96 	bl	8001748 <gotoxy>
	printf("         ");
 800321c:	480a      	ldr	r0, [pc, #40]	; (8003248 <enemyRemove+0x100>)
 800321e:	f000 fa6d 	bl	80036fc <iprintf>
	gotoxy(x-4,y-8);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1f1a      	subs	r2, r3, #4
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	3b08      	subs	r3, #8
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7fe fa8b 	bl	8001748 <gotoxy>
	printf("         ");
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <enemyRemove+0x100>)
 8003234:	f000 fa62 	bl	80036fc <iprintf>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08004d38 	.word	0x08004d38
 8003244:	08004d84 	.word	0x08004d84
 8003248:	08004d48 	.word	0x08004d48

0800324c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e00a      	b.n	8003274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800325e:	f3af 8000 	nop.w
 8003262:	4601      	mov	r1, r0
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	b2ca      	uxtb	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	dbf0      	blt.n	800325e <_read+0x12>
	}

return len;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
	return -1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ae:	605a      	str	r2, [r3, #4]
	return 0;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_isatty>:

int _isatty(int file)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
	return 1;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
	return 0;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x50>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x16>
		heap_end = &end;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <_sbrk+0x50>)
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <_sbrk+0x54>)
 8003304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <_sbrk+0x50>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <_sbrk+0x50>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	466a      	mov	r2, sp
 8003316:	4293      	cmp	r3, r2
 8003318:	d907      	bls.n	800332a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800331a:	f000 f9bd 	bl	8003698 <__errno>
 800331e:	4603      	mov	r3, r0
 8003320:	220c      	movs	r2, #12
 8003322:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	e006      	b.n	8003338 <_sbrk+0x48>
	}

	heap_end += incr;
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <_sbrk+0x50>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a03      	ldr	r2, [pc, #12]	; (8003340 <_sbrk+0x50>)
 8003334:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200000cc 	.word	0x200000cc
 8003344:	200000e0 	.word	0x200000e0

08003348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <SystemInit+0x84>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <SystemInit+0x84>)
 8003354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <SystemInit+0x88>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <SystemInit+0x88>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <SystemInit+0x88>)
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4918      	ldr	r1, [pc, #96]	; (80033d0 <SystemInit+0x88>)
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <SystemInit+0x8c>)
 8003370:	4013      	ands	r3, r2
 8003372:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <SystemInit+0x88>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <SystemInit+0x88>)
 800337a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <SystemInit+0x88>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <SystemInit+0x88>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <SystemInit+0x88>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <SystemInit+0x88>)
 8003396:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800339a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <SystemInit+0x88>)
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <SystemInit+0x88>)
 80033a2:	f023 030f 	bic.w	r3, r3, #15
 80033a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <SystemInit+0x88>)
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	4908      	ldr	r1, [pc, #32]	; (80033d0 <SystemInit+0x88>)
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <SystemInit+0x90>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <SystemInit+0x88>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80033ba:	f000 f80f 	bl	80033dc <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033be:	4b03      	ldr	r3, [pc, #12]	; (80033cc <SystemInit+0x84>)
 80033c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033c4:	609a      	str	r2, [r3, #8]
#endif  
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	f87fc00c 	.word	0xf87fc00c
 80033d8:	ff00fccc 	.word	0xff00fccc

080033dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <SetSysClock+0x8c>)
 80033e2:	2212      	movs	r2, #18
 80033e4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <SetSysClock+0x90>)
 80033e8:	4a20      	ldr	r2, [pc, #128]	; (800346c <SetSysClock+0x90>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <SetSysClock+0x90>)
 80033f0:	4a1e      	ldr	r2, [pc, #120]	; (800346c <SetSysClock+0x90>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <SetSysClock+0x90>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <SetSysClock+0x90>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003400:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <SetSysClock+0x90>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <SetSysClock+0x90>)
 8003408:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800340c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <SetSysClock+0x90>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <SetSysClock+0x90>)
 8003414:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8003418:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <SetSysClock+0x90>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <SetSysClock+0x90>)
 8003420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003424:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003426:	bf00      	nop
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <SetSysClock+0x90>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f9      	beq.n	8003428 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <SetSysClock+0x90>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <SetSysClock+0x90>)
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <SetSysClock+0x90>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a09      	ldr	r2, [pc, #36]	; (800346c <SetSysClock+0x90>)
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800344c:	bf00      	nop
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <SetSysClock+0x90>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d1f9      	bne.n	800344e <SetSysClock+0x72>
  {
  }
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000

08003470 <NVIC_EnableIRQ>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2201      	movs	r2, #1
 8003482:	fa02 f103 	lsl.w	r1, r2, r3
 8003486:	4a06      	ldr	r2, [pc, #24]	; (80034a0 <NVIC_EnableIRQ+0x30>)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da0b      	bge.n	80034d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <NVIC_SetPriority+0x4c>)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	3b04      	subs	r3, #4
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	440b      	add	r3, r1
 80034cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80034ce:	e009      	b.n	80034e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <NVIC_SetPriority+0x50>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <clockInit>:
#include "timer.h"


void clockInit(){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <clockInit+0x54>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	4a12      	ldr	r2, [pc, #72]	; (800354c <clockInit+0x54>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0x0000;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <clockInit+0x58>)
 800350a:	2200      	movs	r2, #0
 800350c:	801a      	strh	r2, [r3, #0]
	TIM15->ARR = 0x18FF; // Set auto reload value
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <clockInit+0x58>)
 8003510:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 0x0000; // Set pre-scaler value
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <clockInit+0x58>)
 8003518:	2200      	movs	r2, #0
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 0x0001; // Enable timer interrupt
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <clockInit+0x58>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <clockInit+0x58>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 8003528:	2100      	movs	r1, #0
 800352a:	2018      	movs	r0, #24
 800352c:	f7ff ffba 	bl	80034a4 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003530:	2018      	movs	r0, #24
 8003532:	f7ff ff9d 	bl	8003470 <NVIC_EnableIRQ>
	TIM15->CR1 |= 0x0001; // Enable timer
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <clockInit+0x58>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <clockInit+0x58>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40014000 	.word	0x40014000

08003554 <clockCounter>:

void clockCounter(int32_t score,int32_t *c1,int32_t *c2,int32_t *c3,int16_t *flagF, int16_t *flagE, int16_t *flagR){
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
	static int32_t nextInterval = 100<<8;
	static int32_t time = 1000<<8;
	if (score<<8 < nextInterval){
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	4b35      	ldr	r3, [pc, #212]	; (800363c <clockCounter+0xe8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	da27      	bge.n	80035be <clockCounter+0x6a>
		if (*c1 >= time>>1){
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <clockCounter+0xec>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	105b      	asrs	r3, r3, #1
 8003578:	429a      	cmp	r2, r3
 800357a:	db05      	blt.n	8003588 <clockCounter+0x34>
			*flagF = 1;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2201      	movs	r2, #1
 8003580:	801a      	strh	r2, [r3, #0]
			*c1=0;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
		}
		if (*c2 >= time<<1){
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <clockCounter+0xec>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	429a      	cmp	r2, r3
 8003594:	db05      	blt.n	80035a2 <clockCounter+0x4e>
			*flagE = 1;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2201      	movs	r2, #1
 800359a:	801a      	strh	r2, [r3, #0]
			*c2=0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
		}
		if (*c3>= time<<5){
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <clockCounter+0xec>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	429a      	cmp	r2, r3
 80035ae:	db3f      	blt.n	8003630 <clockCounter+0xdc>
			*flagR = 1;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2201      	movs	r2, #1
 80035b4:	801a      	strh	r2, [r3, #0]
			*c3=0;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
			*c3=0;
		}
		nextInterval = nextInterval<<1;
	}

}
 80035bc:	e038      	b.n	8003630 <clockCounter+0xdc>
	}else if (score<<8 == nextInterval){
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <clockCounter+0xe8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d132      	bne.n	8003630 <clockCounter+0xdc>
		time = FIX8_MULT(time, 0xCC);
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <clockCounter+0xec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	22cc      	movs	r2, #204	; 0xcc
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	121b      	asrs	r3, r3, #8
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <clockCounter+0xec>)
 80035d8:	6013      	str	r3, [r2, #0]
		if (*c1 >= time>>1){
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <clockCounter+0xec>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	105b      	asrs	r3, r3, #1
 80035e4:	429a      	cmp	r2, r3
 80035e6:	db05      	blt.n	80035f4 <clockCounter+0xa0>
			*flagF = 1;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2201      	movs	r2, #1
 80035ec:	801a      	strh	r2, [r3, #0]
			*c1=0;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
		if (*c2 >= time){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <clockCounter+0xec>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	db05      	blt.n	800360c <clockCounter+0xb8>
			*flagE = 1;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2201      	movs	r2, #1
 8003604:	801a      	strh	r2, [r3, #0]
			*c2=0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
		if (*c3>= time<<5){
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <clockCounter+0xec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	429a      	cmp	r2, r3
 8003618:	db05      	blt.n	8003626 <clockCounter+0xd2>
			*flagR = 1;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2201      	movs	r2, #1
 800361e:	801a      	strh	r2, [r3, #0]
			*c3=0;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
		nextInterval = nextInterval<<1;
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <clockCounter+0xe8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4a03      	ldr	r2, [pc, #12]	; (800363c <clockCounter+0xe8>)
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	2000002c 	.word	0x2000002c
 8003640:	20000030 	.word	0x20000030

08003644 <Reset_Handler>:
 8003644:	480d      	ldr	r0, [pc, #52]	; (800367c <LoopForever+0x2>)
 8003646:	4685      	mov	sp, r0
 8003648:	480d      	ldr	r0, [pc, #52]	; (8003680 <LoopForever+0x6>)
 800364a:	490e      	ldr	r1, [pc, #56]	; (8003684 <LoopForever+0xa>)
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <LoopForever+0xe>)
 800364e:	2300      	movs	r3, #0
 8003650:	e002      	b.n	8003658 <LoopCopyDataInit>

08003652 <CopyDataInit>:
 8003652:	58d4      	ldr	r4, [r2, r3]
 8003654:	50c4      	str	r4, [r0, r3]
 8003656:	3304      	adds	r3, #4

08003658 <LoopCopyDataInit>:
 8003658:	18c4      	adds	r4, r0, r3
 800365a:	428c      	cmp	r4, r1
 800365c:	d3f9      	bcc.n	8003652 <CopyDataInit>
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <LoopForever+0x12>)
 8003660:	4c0b      	ldr	r4, [pc, #44]	; (8003690 <LoopForever+0x16>)
 8003662:	2300      	movs	r3, #0
 8003664:	e001      	b.n	800366a <LoopFillZerobss>

08003666 <FillZerobss>:
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	3204      	adds	r2, #4

0800366a <LoopFillZerobss>:
 800366a:	42a2      	cmp	r2, r4
 800366c:	d3fb      	bcc.n	8003666 <FillZerobss>
 800366e:	f7ff fe6b 	bl	8003348 <SystemInit>
 8003672:	f000 f817 	bl	80036a4 <__libc_init_array>
 8003676:	f7fe fdf3 	bl	8002260 <main>

0800367a <LoopForever>:
 800367a:	e7fe      	b.n	800367a <LoopForever>
 800367c:	20004000 	.word	0x20004000
 8003680:	20000000 	.word	0x20000000
 8003684:	20000098 	.word	0x20000098
 8003688:	08005064 	.word	0x08005064
 800368c:	20000098 	.word	0x20000098
 8003690:	200000e0 	.word	0x200000e0

08003694 <ADC1_2_IRQHandler>:
 8003694:	e7fe      	b.n	8003694 <ADC1_2_IRQHandler>
	...

08003698 <__errno>:
 8003698:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <__errno+0x8>)
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000034 	.word	0x20000034

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4d0d      	ldr	r5, [pc, #52]	; (80036dc <__libc_init_array+0x38>)
 80036a8:	4c0d      	ldr	r4, [pc, #52]	; (80036e0 <__libc_init_array+0x3c>)
 80036aa:	1b64      	subs	r4, r4, r5
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	2600      	movs	r6, #0
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	4d0b      	ldr	r5, [pc, #44]	; (80036e4 <__libc_init_array+0x40>)
 80036b6:	4c0c      	ldr	r4, [pc, #48]	; (80036e8 <__libc_init_array+0x44>)
 80036b8:	f001 faac 	bl	8004c14 <_init>
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	2600      	movs	r6, #0
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	0800505c 	.word	0x0800505c
 80036e0:	0800505c 	.word	0x0800505c
 80036e4:	0800505c 	.word	0x0800505c
 80036e8:	08005060 	.word	0x08005060

080036ec <memset>:
 80036ec:	4402      	add	r2, r0
 80036ee:	4603      	mov	r3, r0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d100      	bne.n	80036f6 <memset+0xa>
 80036f4:	4770      	bx	lr
 80036f6:	f803 1b01 	strb.w	r1, [r3], #1
 80036fa:	e7f9      	b.n	80036f0 <memset+0x4>

080036fc <iprintf>:
 80036fc:	b40f      	push	{r0, r1, r2, r3}
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <iprintf+0x2c>)
 8003700:	b513      	push	{r0, r1, r4, lr}
 8003702:	681c      	ldr	r4, [r3, #0]
 8003704:	b124      	cbz	r4, 8003710 <iprintf+0x14>
 8003706:	69a3      	ldr	r3, [r4, #24]
 8003708:	b913      	cbnz	r3, 8003710 <iprintf+0x14>
 800370a:	4620      	mov	r0, r4
 800370c:	f000 fa2c 	bl	8003b68 <__sinit>
 8003710:	ab05      	add	r3, sp, #20
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	68a1      	ldr	r1, [r4, #8]
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	4620      	mov	r0, r4
 800371a:	f000 fd99 	bl	8004250 <_vfiprintf_r>
 800371e:	b002      	add	sp, #8
 8003720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003724:	b004      	add	sp, #16
 8003726:	4770      	bx	lr
 8003728:	20000034 	.word	0x20000034

0800372c <putchar>:
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <putchar+0x28>)
 800372e:	b513      	push	{r0, r1, r4, lr}
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	4601      	mov	r1, r0
 8003734:	b134      	cbz	r4, 8003744 <putchar+0x18>
 8003736:	69a3      	ldr	r3, [r4, #24]
 8003738:	b923      	cbnz	r3, 8003744 <putchar+0x18>
 800373a:	9001      	str	r0, [sp, #4]
 800373c:	4620      	mov	r0, r4
 800373e:	f000 fa13 	bl	8003b68 <__sinit>
 8003742:	9901      	ldr	r1, [sp, #4]
 8003744:	68a2      	ldr	r2, [r4, #8]
 8003746:	4620      	mov	r0, r4
 8003748:	b002      	add	sp, #8
 800374a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800374e:	f001 b843 	b.w	80047d8 <_putc_r>
 8003752:	bf00      	nop
 8003754:	20000034 	.word	0x20000034

08003758 <setbuf>:
 8003758:	2900      	cmp	r1, #0
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	bf0c      	ite	eq
 8003760:	2202      	moveq	r2, #2
 8003762:	2200      	movne	r2, #0
 8003764:	f000 b800 	b.w	8003768 <setvbuf>

08003768 <setvbuf>:
 8003768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800376c:	461d      	mov	r5, r3
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <setvbuf+0x17c>)
 8003770:	681f      	ldr	r7, [r3, #0]
 8003772:	4604      	mov	r4, r0
 8003774:	460e      	mov	r6, r1
 8003776:	4690      	mov	r8, r2
 8003778:	b127      	cbz	r7, 8003784 <setvbuf+0x1c>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	b913      	cbnz	r3, 8003784 <setvbuf+0x1c>
 800377e:	4638      	mov	r0, r7
 8003780:	f000 f9f2 	bl	8003b68 <__sinit>
 8003784:	4b58      	ldr	r3, [pc, #352]	; (80038e8 <setvbuf+0x180>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d167      	bne.n	800385a <setvbuf+0xf2>
 800378a:	687c      	ldr	r4, [r7, #4]
 800378c:	f1b8 0f02 	cmp.w	r8, #2
 8003790:	d006      	beq.n	80037a0 <setvbuf+0x38>
 8003792:	f1b8 0f01 	cmp.w	r8, #1
 8003796:	f200 809f 	bhi.w	80038d8 <setvbuf+0x170>
 800379a:	2d00      	cmp	r5, #0
 800379c:	f2c0 809c 	blt.w	80038d8 <setvbuf+0x170>
 80037a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a2:	07db      	lsls	r3, r3, #31
 80037a4:	d405      	bmi.n	80037b2 <setvbuf+0x4a>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	0598      	lsls	r0, r3, #22
 80037aa:	d402      	bmi.n	80037b2 <setvbuf+0x4a>
 80037ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ae:	f000 fa79 	bl	8003ca4 <__retarget_lock_acquire_recursive>
 80037b2:	4621      	mov	r1, r4
 80037b4:	4638      	mov	r0, r7
 80037b6:	f000 f943 	bl	8003a40 <_fflush_r>
 80037ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037bc:	b141      	cbz	r1, 80037d0 <setvbuf+0x68>
 80037be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c2:	4299      	cmp	r1, r3
 80037c4:	d002      	beq.n	80037cc <setvbuf+0x64>
 80037c6:	4638      	mov	r0, r7
 80037c8:	f000 fadc 	bl	8003d84 <_free_r>
 80037cc:	2300      	movs	r3, #0
 80037ce:	6363      	str	r3, [r4, #52]	; 0x34
 80037d0:	2300      	movs	r3, #0
 80037d2:	61a3      	str	r3, [r4, #24]
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	0619      	lsls	r1, r3, #24
 80037da:	d503      	bpl.n	80037e4 <setvbuf+0x7c>
 80037dc:	6921      	ldr	r1, [r4, #16]
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 fad0 	bl	8003d84 <_free_r>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	f1b8 0f02 	cmp.w	r8, #2
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	d06c      	beq.n	80038d0 <setvbuf+0x168>
 80037f6:	ab01      	add	r3, sp, #4
 80037f8:	466a      	mov	r2, sp
 80037fa:	4621      	mov	r1, r4
 80037fc:	4638      	mov	r0, r7
 80037fe:	f000 fa53 	bl	8003ca8 <__swhatbuf_r>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	4318      	orrs	r0, r3
 8003806:	81a0      	strh	r0, [r4, #12]
 8003808:	2d00      	cmp	r5, #0
 800380a:	d130      	bne.n	800386e <setvbuf+0x106>
 800380c:	9d00      	ldr	r5, [sp, #0]
 800380e:	4628      	mov	r0, r5
 8003810:	f000 fab0 	bl	8003d74 <malloc>
 8003814:	4606      	mov	r6, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d155      	bne.n	80038c6 <setvbuf+0x15e>
 800381a:	f8dd 9000 	ldr.w	r9, [sp]
 800381e:	45a9      	cmp	r9, r5
 8003820:	d14a      	bne.n	80038b8 <setvbuf+0x150>
 8003822:	f04f 35ff 	mov.w	r5, #4294967295
 8003826:	2200      	movs	r2, #0
 8003828:	60a2      	str	r2, [r4, #8]
 800382a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800382e:	6022      	str	r2, [r4, #0]
 8003830:	6122      	str	r2, [r4, #16]
 8003832:	2201      	movs	r2, #1
 8003834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003838:	6162      	str	r2, [r4, #20]
 800383a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	07d2      	lsls	r2, r2, #31
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	d405      	bmi.n	8003852 <setvbuf+0xea>
 8003846:	f413 7f00 	tst.w	r3, #512	; 0x200
 800384a:	d102      	bne.n	8003852 <setvbuf+0xea>
 800384c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800384e:	f000 fa2a 	bl	8003ca6 <__retarget_lock_release_recursive>
 8003852:	4628      	mov	r0, r5
 8003854:	b003      	add	sp, #12
 8003856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <setvbuf+0x184>)
 800385c:	429c      	cmp	r4, r3
 800385e:	d101      	bne.n	8003864 <setvbuf+0xfc>
 8003860:	68bc      	ldr	r4, [r7, #8]
 8003862:	e793      	b.n	800378c <setvbuf+0x24>
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <setvbuf+0x188>)
 8003866:	429c      	cmp	r4, r3
 8003868:	bf08      	it	eq
 800386a:	68fc      	ldreq	r4, [r7, #12]
 800386c:	e78e      	b.n	800378c <setvbuf+0x24>
 800386e:	2e00      	cmp	r6, #0
 8003870:	d0cd      	beq.n	800380e <setvbuf+0xa6>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	b913      	cbnz	r3, 800387c <setvbuf+0x114>
 8003876:	4638      	mov	r0, r7
 8003878:	f000 f976 	bl	8003b68 <__sinit>
 800387c:	f1b8 0f01 	cmp.w	r8, #1
 8003880:	bf08      	it	eq
 8003882:	89a3      	ldrheq	r3, [r4, #12]
 8003884:	6026      	str	r6, [r4, #0]
 8003886:	bf04      	itt	eq
 8003888:	f043 0301 	orreq.w	r3, r3, #1
 800388c:	81a3      	strheq	r3, [r4, #12]
 800388e:	89a2      	ldrh	r2, [r4, #12]
 8003890:	f012 0308 	ands.w	r3, r2, #8
 8003894:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003898:	d01c      	beq.n	80038d4 <setvbuf+0x16c>
 800389a:	07d3      	lsls	r3, r2, #31
 800389c:	bf41      	itttt	mi
 800389e:	2300      	movmi	r3, #0
 80038a0:	426d      	negmi	r5, r5
 80038a2:	60a3      	strmi	r3, [r4, #8]
 80038a4:	61a5      	strmi	r5, [r4, #24]
 80038a6:	bf58      	it	pl
 80038a8:	60a5      	strpl	r5, [r4, #8]
 80038aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80038ac:	f015 0501 	ands.w	r5, r5, #1
 80038b0:	d115      	bne.n	80038de <setvbuf+0x176>
 80038b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80038b6:	e7c8      	b.n	800384a <setvbuf+0xe2>
 80038b8:	4648      	mov	r0, r9
 80038ba:	f000 fa5b 	bl	8003d74 <malloc>
 80038be:	4606      	mov	r6, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d0ae      	beq.n	8003822 <setvbuf+0xba>
 80038c4:	464d      	mov	r5, r9
 80038c6:	89a3      	ldrh	r3, [r4, #12]
 80038c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038cc:	81a3      	strh	r3, [r4, #12]
 80038ce:	e7d0      	b.n	8003872 <setvbuf+0x10a>
 80038d0:	2500      	movs	r5, #0
 80038d2:	e7a8      	b.n	8003826 <setvbuf+0xbe>
 80038d4:	60a3      	str	r3, [r4, #8]
 80038d6:	e7e8      	b.n	80038aa <setvbuf+0x142>
 80038d8:	f04f 35ff 	mov.w	r5, #4294967295
 80038dc:	e7b9      	b.n	8003852 <setvbuf+0xea>
 80038de:	2500      	movs	r5, #0
 80038e0:	e7b7      	b.n	8003852 <setvbuf+0xea>
 80038e2:	bf00      	nop
 80038e4:	20000034 	.word	0x20000034
 80038e8:	08004fe8 	.word	0x08004fe8
 80038ec:	08005008 	.word	0x08005008
 80038f0:	08004fc8 	.word	0x08004fc8

080038f4 <siprintf>:
 80038f4:	b40e      	push	{r1, r2, r3}
 80038f6:	b500      	push	{lr}
 80038f8:	b09c      	sub	sp, #112	; 0x70
 80038fa:	ab1d      	add	r3, sp, #116	; 0x74
 80038fc:	9002      	str	r0, [sp, #8]
 80038fe:	9006      	str	r0, [sp, #24]
 8003900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003904:	4809      	ldr	r0, [pc, #36]	; (800392c <siprintf+0x38>)
 8003906:	9107      	str	r1, [sp, #28]
 8003908:	9104      	str	r1, [sp, #16]
 800390a:	4909      	ldr	r1, [pc, #36]	; (8003930 <siprintf+0x3c>)
 800390c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003910:	9105      	str	r1, [sp, #20]
 8003912:	6800      	ldr	r0, [r0, #0]
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	a902      	add	r1, sp, #8
 8003918:	f000 fb70 	bl	8003ffc <_svfiprintf_r>
 800391c:	9b02      	ldr	r3, [sp, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	b01c      	add	sp, #112	; 0x70
 8003924:	f85d eb04 	ldr.w	lr, [sp], #4
 8003928:	b003      	add	sp, #12
 800392a:	4770      	bx	lr
 800392c:	20000034 	.word	0x20000034
 8003930:	ffff0208 	.word	0xffff0208

08003934 <__sflush_r>:
 8003934:	898a      	ldrh	r2, [r1, #12]
 8003936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800393a:	4605      	mov	r5, r0
 800393c:	0710      	lsls	r0, r2, #28
 800393e:	460c      	mov	r4, r1
 8003940:	d458      	bmi.n	80039f4 <__sflush_r+0xc0>
 8003942:	684b      	ldr	r3, [r1, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	dc05      	bgt.n	8003954 <__sflush_r+0x20>
 8003948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	dc02      	bgt.n	8003954 <__sflush_r+0x20>
 800394e:	2000      	movs	r0, #0
 8003950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003956:	2e00      	cmp	r6, #0
 8003958:	d0f9      	beq.n	800394e <__sflush_r+0x1a>
 800395a:	2300      	movs	r3, #0
 800395c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003960:	682f      	ldr	r7, [r5, #0]
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	d032      	beq.n	80039cc <__sflush_r+0x98>
 8003966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	075a      	lsls	r2, r3, #29
 800396c:	d505      	bpl.n	800397a <__sflush_r+0x46>
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	1ac0      	subs	r0, r0, r3
 8003972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003974:	b10b      	cbz	r3, 800397a <__sflush_r+0x46>
 8003976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003978:	1ac0      	subs	r0, r0, r3
 800397a:	2300      	movs	r3, #0
 800397c:	4602      	mov	r2, r0
 800397e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003980:	6a21      	ldr	r1, [r4, #32]
 8003982:	4628      	mov	r0, r5
 8003984:	47b0      	blx	r6
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	d106      	bne.n	800399a <__sflush_r+0x66>
 800398c:	6829      	ldr	r1, [r5, #0]
 800398e:	291d      	cmp	r1, #29
 8003990:	d82c      	bhi.n	80039ec <__sflush_r+0xb8>
 8003992:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <__sflush_r+0x108>)
 8003994:	40ca      	lsrs	r2, r1
 8003996:	07d6      	lsls	r6, r2, #31
 8003998:	d528      	bpl.n	80039ec <__sflush_r+0xb8>
 800399a:	2200      	movs	r2, #0
 800399c:	6062      	str	r2, [r4, #4]
 800399e:	04d9      	lsls	r1, r3, #19
 80039a0:	6922      	ldr	r2, [r4, #16]
 80039a2:	6022      	str	r2, [r4, #0]
 80039a4:	d504      	bpl.n	80039b0 <__sflush_r+0x7c>
 80039a6:	1c42      	adds	r2, r0, #1
 80039a8:	d101      	bne.n	80039ae <__sflush_r+0x7a>
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	b903      	cbnz	r3, 80039b0 <__sflush_r+0x7c>
 80039ae:	6560      	str	r0, [r4, #84]	; 0x54
 80039b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039b2:	602f      	str	r7, [r5, #0]
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d0ca      	beq.n	800394e <__sflush_r+0x1a>
 80039b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039bc:	4299      	cmp	r1, r3
 80039be:	d002      	beq.n	80039c6 <__sflush_r+0x92>
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 f9df 	bl	8003d84 <_free_r>
 80039c6:	2000      	movs	r0, #0
 80039c8:	6360      	str	r0, [r4, #52]	; 0x34
 80039ca:	e7c1      	b.n	8003950 <__sflush_r+0x1c>
 80039cc:	6a21      	ldr	r1, [r4, #32]
 80039ce:	2301      	movs	r3, #1
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b0      	blx	r6
 80039d4:	1c41      	adds	r1, r0, #1
 80039d6:	d1c7      	bne.n	8003968 <__sflush_r+0x34>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0c4      	beq.n	8003968 <__sflush_r+0x34>
 80039de:	2b1d      	cmp	r3, #29
 80039e0:	d001      	beq.n	80039e6 <__sflush_r+0xb2>
 80039e2:	2b16      	cmp	r3, #22
 80039e4:	d101      	bne.n	80039ea <__sflush_r+0xb6>
 80039e6:	602f      	str	r7, [r5, #0]
 80039e8:	e7b1      	b.n	800394e <__sflush_r+0x1a>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	e7ad      	b.n	8003950 <__sflush_r+0x1c>
 80039f4:	690f      	ldr	r7, [r1, #16]
 80039f6:	2f00      	cmp	r7, #0
 80039f8:	d0a9      	beq.n	800394e <__sflush_r+0x1a>
 80039fa:	0793      	lsls	r3, r2, #30
 80039fc:	680e      	ldr	r6, [r1, #0]
 80039fe:	bf08      	it	eq
 8003a00:	694b      	ldreq	r3, [r1, #20]
 8003a02:	600f      	str	r7, [r1, #0]
 8003a04:	bf18      	it	ne
 8003a06:	2300      	movne	r3, #0
 8003a08:	eba6 0807 	sub.w	r8, r6, r7
 8003a0c:	608b      	str	r3, [r1, #8]
 8003a0e:	f1b8 0f00 	cmp.w	r8, #0
 8003a12:	dd9c      	ble.n	800394e <__sflush_r+0x1a>
 8003a14:	6a21      	ldr	r1, [r4, #32]
 8003a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a18:	4643      	mov	r3, r8
 8003a1a:	463a      	mov	r2, r7
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b0      	blx	r6
 8003a20:	2800      	cmp	r0, #0
 8003a22:	dc06      	bgt.n	8003a32 <__sflush_r+0xfe>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e78e      	b.n	8003950 <__sflush_r+0x1c>
 8003a32:	4407      	add	r7, r0
 8003a34:	eba8 0800 	sub.w	r8, r8, r0
 8003a38:	e7e9      	b.n	8003a0e <__sflush_r+0xda>
 8003a3a:	bf00      	nop
 8003a3c:	20400001 	.word	0x20400001

08003a40 <_fflush_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	690b      	ldr	r3, [r1, #16]
 8003a44:	4605      	mov	r5, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	b913      	cbnz	r3, 8003a50 <_fflush_r+0x10>
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	b118      	cbz	r0, 8003a5a <_fflush_r+0x1a>
 8003a52:	6983      	ldr	r3, [r0, #24]
 8003a54:	b90b      	cbnz	r3, 8003a5a <_fflush_r+0x1a>
 8003a56:	f000 f887 	bl	8003b68 <__sinit>
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <_fflush_r+0x6c>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d11b      	bne.n	8003a98 <_fflush_r+0x58>
 8003a60:	686c      	ldr	r4, [r5, #4]
 8003a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ef      	beq.n	8003a4a <_fflush_r+0xa>
 8003a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a6c:	07d0      	lsls	r0, r2, #31
 8003a6e:	d404      	bmi.n	8003a7a <_fflush_r+0x3a>
 8003a70:	0599      	lsls	r1, r3, #22
 8003a72:	d402      	bmi.n	8003a7a <_fflush_r+0x3a>
 8003a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a76:	f000 f915 	bl	8003ca4 <__retarget_lock_acquire_recursive>
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f7ff ff59 	bl	8003934 <__sflush_r>
 8003a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a84:	07da      	lsls	r2, r3, #31
 8003a86:	4605      	mov	r5, r0
 8003a88:	d4e0      	bmi.n	8003a4c <_fflush_r+0xc>
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	059b      	lsls	r3, r3, #22
 8003a8e:	d4dd      	bmi.n	8003a4c <_fflush_r+0xc>
 8003a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a92:	f000 f908 	bl	8003ca6 <__retarget_lock_release_recursive>
 8003a96:	e7d9      	b.n	8003a4c <_fflush_r+0xc>
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <_fflush_r+0x70>)
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d101      	bne.n	8003aa2 <_fflush_r+0x62>
 8003a9e:	68ac      	ldr	r4, [r5, #8]
 8003aa0:	e7df      	b.n	8003a62 <_fflush_r+0x22>
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <_fflush_r+0x74>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	bf08      	it	eq
 8003aa8:	68ec      	ldreq	r4, [r5, #12]
 8003aaa:	e7da      	b.n	8003a62 <_fflush_r+0x22>
 8003aac:	08004fe8 	.word	0x08004fe8
 8003ab0:	08005008 	.word	0x08005008
 8003ab4:	08004fc8 	.word	0x08004fc8

08003ab8 <std>:
 8003ab8:	2300      	movs	r3, #0
 8003aba:	b510      	push	{r4, lr}
 8003abc:	4604      	mov	r4, r0
 8003abe:	e9c0 3300 	strd	r3, r3, [r0]
 8003ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ac6:	6083      	str	r3, [r0, #8]
 8003ac8:	8181      	strh	r1, [r0, #12]
 8003aca:	6643      	str	r3, [r0, #100]	; 0x64
 8003acc:	81c2      	strh	r2, [r0, #14]
 8003ace:	6183      	str	r3, [r0, #24]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	305c      	adds	r0, #92	; 0x5c
 8003ad6:	f7ff fe09 	bl	80036ec <memset>
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <std+0x38>)
 8003adc:	6263      	str	r3, [r4, #36]	; 0x24
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <std+0x3c>)
 8003ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <std+0x40>)
 8003ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <std+0x44>)
 8003ae8:	6224      	str	r4, [r4, #32]
 8003aea:	6323      	str	r3, [r4, #48]	; 0x30
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	bf00      	nop
 8003af0:	08004889 	.word	0x08004889
 8003af4:	080048ab 	.word	0x080048ab
 8003af8:	080048e3 	.word	0x080048e3
 8003afc:	08004907 	.word	0x08004907

08003b00 <_cleanup_r>:
 8003b00:	4901      	ldr	r1, [pc, #4]	; (8003b08 <_cleanup_r+0x8>)
 8003b02:	f000 b8af 	b.w	8003c64 <_fwalk_reent>
 8003b06:	bf00      	nop
 8003b08:	08003a41 	.word	0x08003a41

08003b0c <__sfmoreglue>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2268      	movs	r2, #104	; 0x68
 8003b10:	1e4d      	subs	r5, r1, #1
 8003b12:	4355      	muls	r5, r2
 8003b14:	460e      	mov	r6, r1
 8003b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b1a:	f000 f99f 	bl	8003e5c <_malloc_r>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	b140      	cbz	r0, 8003b34 <__sfmoreglue+0x28>
 8003b22:	2100      	movs	r1, #0
 8003b24:	e9c0 1600 	strd	r1, r6, [r0]
 8003b28:	300c      	adds	r0, #12
 8003b2a:	60a0      	str	r0, [r4, #8]
 8003b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b30:	f7ff fddc 	bl	80036ec <memset>
 8003b34:	4620      	mov	r0, r4
 8003b36:	bd70      	pop	{r4, r5, r6, pc}

08003b38 <__sfp_lock_acquire>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__sfp_lock_acquire+0x8>)
 8003b3a:	f000 b8b3 	b.w	8003ca4 <__retarget_lock_acquire_recursive>
 8003b3e:	bf00      	nop
 8003b40:	200000d1 	.word	0x200000d1

08003b44 <__sfp_lock_release>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__sfp_lock_release+0x8>)
 8003b46:	f000 b8ae 	b.w	8003ca6 <__retarget_lock_release_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	200000d1 	.word	0x200000d1

08003b50 <__sinit_lock_acquire>:
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <__sinit_lock_acquire+0x8>)
 8003b52:	f000 b8a7 	b.w	8003ca4 <__retarget_lock_acquire_recursive>
 8003b56:	bf00      	nop
 8003b58:	200000d2 	.word	0x200000d2

08003b5c <__sinit_lock_release>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <__sinit_lock_release+0x8>)
 8003b5e:	f000 b8a2 	b.w	8003ca6 <__retarget_lock_release_recursive>
 8003b62:	bf00      	nop
 8003b64:	200000d2 	.word	0x200000d2

08003b68 <__sinit>:
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	f7ff fff0 	bl	8003b50 <__sinit_lock_acquire>
 8003b70:	69a3      	ldr	r3, [r4, #24]
 8003b72:	b11b      	cbz	r3, 8003b7c <__sinit+0x14>
 8003b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b78:	f7ff bff0 	b.w	8003b5c <__sinit_lock_release>
 8003b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b80:	6523      	str	r3, [r4, #80]	; 0x50
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <__sinit+0x68>)
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <__sinit+0x6c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	bf04      	itt	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	61a3      	streq	r3, [r4, #24]
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 f820 	bl	8003bd8 <__sfp>
 8003b98:	6060      	str	r0, [r4, #4]
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 f81c 	bl	8003bd8 <__sfp>
 8003ba0:	60a0      	str	r0, [r4, #8]
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 f818 	bl	8003bd8 <__sfp>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60e0      	str	r0, [r4, #12]
 8003bac:	2104      	movs	r1, #4
 8003bae:	6860      	ldr	r0, [r4, #4]
 8003bb0:	f7ff ff82 	bl	8003ab8 <std>
 8003bb4:	68a0      	ldr	r0, [r4, #8]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2109      	movs	r1, #9
 8003bba:	f7ff ff7d 	bl	8003ab8 <std>
 8003bbe:	68e0      	ldr	r0, [r4, #12]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	2112      	movs	r1, #18
 8003bc4:	f7ff ff78 	bl	8003ab8 <std>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61a3      	str	r3, [r4, #24]
 8003bcc:	e7d2      	b.n	8003b74 <__sinit+0xc>
 8003bce:	bf00      	nop
 8003bd0:	08004fc4 	.word	0x08004fc4
 8003bd4:	08003b01 	.word	0x08003b01

08003bd8 <__sfp>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	4607      	mov	r7, r0
 8003bdc:	f7ff ffac 	bl	8003b38 <__sfp_lock_acquire>
 8003be0:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <__sfp+0x84>)
 8003be2:	681e      	ldr	r6, [r3, #0]
 8003be4:	69b3      	ldr	r3, [r6, #24]
 8003be6:	b913      	cbnz	r3, 8003bee <__sfp+0x16>
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7ff ffbd 	bl	8003b68 <__sinit>
 8003bee:	3648      	adds	r6, #72	; 0x48
 8003bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	d503      	bpl.n	8003c00 <__sfp+0x28>
 8003bf8:	6833      	ldr	r3, [r6, #0]
 8003bfa:	b30b      	cbz	r3, 8003c40 <__sfp+0x68>
 8003bfc:	6836      	ldr	r6, [r6, #0]
 8003bfe:	e7f7      	b.n	8003bf0 <__sfp+0x18>
 8003c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c04:	b9d5      	cbnz	r5, 8003c3c <__sfp+0x64>
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <__sfp+0x88>)
 8003c08:	60e3      	str	r3, [r4, #12]
 8003c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8003c10:	f000 f847 	bl	8003ca2 <__retarget_lock_init_recursive>
 8003c14:	f7ff ff96 	bl	8003b44 <__sfp_lock_release>
 8003c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c20:	6025      	str	r5, [r4, #0]
 8003c22:	61a5      	str	r5, [r4, #24]
 8003c24:	2208      	movs	r2, #8
 8003c26:	4629      	mov	r1, r5
 8003c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c2c:	f7ff fd5e 	bl	80036ec <memset>
 8003c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c38:	4620      	mov	r0, r4
 8003c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3c:	3468      	adds	r4, #104	; 0x68
 8003c3e:	e7d9      	b.n	8003bf4 <__sfp+0x1c>
 8003c40:	2104      	movs	r1, #4
 8003c42:	4638      	mov	r0, r7
 8003c44:	f7ff ff62 	bl	8003b0c <__sfmoreglue>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	6030      	str	r0, [r6, #0]
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1d5      	bne.n	8003bfc <__sfp+0x24>
 8003c50:	f7ff ff78 	bl	8003b44 <__sfp_lock_release>
 8003c54:	230c      	movs	r3, #12
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	e7ee      	b.n	8003c38 <__sfp+0x60>
 8003c5a:	bf00      	nop
 8003c5c:	08004fc4 	.word	0x08004fc4
 8003c60:	ffff0001 	.word	0xffff0001

08003c64 <_fwalk_reent>:
 8003c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c68:	4606      	mov	r6, r0
 8003c6a:	4688      	mov	r8, r1
 8003c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c70:	2700      	movs	r7, #0
 8003c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c76:	f1b9 0901 	subs.w	r9, r9, #1
 8003c7a:	d505      	bpl.n	8003c88 <_fwalk_reent+0x24>
 8003c7c:	6824      	ldr	r4, [r4, #0]
 8003c7e:	2c00      	cmp	r4, #0
 8003c80:	d1f7      	bne.n	8003c72 <_fwalk_reent+0xe>
 8003c82:	4638      	mov	r0, r7
 8003c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c88:	89ab      	ldrh	r3, [r5, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d907      	bls.n	8003c9e <_fwalk_reent+0x3a>
 8003c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c92:	3301      	adds	r3, #1
 8003c94:	d003      	beq.n	8003c9e <_fwalk_reent+0x3a>
 8003c96:	4629      	mov	r1, r5
 8003c98:	4630      	mov	r0, r6
 8003c9a:	47c0      	blx	r8
 8003c9c:	4307      	orrs	r7, r0
 8003c9e:	3568      	adds	r5, #104	; 0x68
 8003ca0:	e7e9      	b.n	8003c76 <_fwalk_reent+0x12>

08003ca2 <__retarget_lock_init_recursive>:
 8003ca2:	4770      	bx	lr

08003ca4 <__retarget_lock_acquire_recursive>:
 8003ca4:	4770      	bx	lr

08003ca6 <__retarget_lock_release_recursive>:
 8003ca6:	4770      	bx	lr

08003ca8 <__swhatbuf_r>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	460e      	mov	r6, r1
 8003cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	b096      	sub	sp, #88	; 0x58
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	da08      	bge.n	8003ccc <__swhatbuf_r+0x24>
 8003cba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	061a      	lsls	r2, r3, #24
 8003cc4:	d410      	bmi.n	8003ce8 <__swhatbuf_r+0x40>
 8003cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cca:	e00e      	b.n	8003cea <__swhatbuf_r+0x42>
 8003ccc:	466a      	mov	r2, sp
 8003cce:	f000 feef 	bl	8004ab0 <_fstat_r>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	dbf1      	blt.n	8003cba <__swhatbuf_r+0x12>
 8003cd6:	9a01      	ldr	r2, [sp, #4]
 8003cd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003cdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ce0:	425a      	negs	r2, r3
 8003ce2:	415a      	adcs	r2, r3
 8003ce4:	602a      	str	r2, [r5, #0]
 8003ce6:	e7ee      	b.n	8003cc6 <__swhatbuf_r+0x1e>
 8003ce8:	2340      	movs	r3, #64	; 0x40
 8003cea:	2000      	movs	r0, #0
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	b016      	add	sp, #88	; 0x58
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cf4 <__smakebuf_r>:
 8003cf4:	898b      	ldrh	r3, [r1, #12]
 8003cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cf8:	079d      	lsls	r5, r3, #30
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	d507      	bpl.n	8003d10 <__smakebuf_r+0x1c>
 8003d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	6123      	str	r3, [r4, #16]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	6163      	str	r3, [r4, #20]
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	ab01      	add	r3, sp, #4
 8003d12:	466a      	mov	r2, sp
 8003d14:	f7ff ffc8 	bl	8003ca8 <__swhatbuf_r>
 8003d18:	9900      	ldr	r1, [sp, #0]
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f000 f89d 	bl	8003e5c <_malloc_r>
 8003d22:	b948      	cbnz	r0, 8003d38 <__smakebuf_r+0x44>
 8003d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d28:	059a      	lsls	r2, r3, #22
 8003d2a:	d4ef      	bmi.n	8003d0c <__smakebuf_r+0x18>
 8003d2c:	f023 0303 	bic.w	r3, r3, #3
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	81a3      	strh	r3, [r4, #12]
 8003d36:	e7e3      	b.n	8003d00 <__smakebuf_r+0xc>
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <__smakebuf_r+0x7c>)
 8003d3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	6020      	str	r0, [r4, #0]
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	81a3      	strh	r3, [r4, #12]
 8003d46:	9b00      	ldr	r3, [sp, #0]
 8003d48:	6163      	str	r3, [r4, #20]
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	6120      	str	r0, [r4, #16]
 8003d4e:	b15b      	cbz	r3, 8003d68 <__smakebuf_r+0x74>
 8003d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d54:	4630      	mov	r0, r6
 8003d56:	f000 febd 	bl	8004ad4 <_isatty_r>
 8003d5a:	b128      	cbz	r0, 8003d68 <__smakebuf_r+0x74>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	89a0      	ldrh	r0, [r4, #12]
 8003d6a:	4305      	orrs	r5, r0
 8003d6c:	81a5      	strh	r5, [r4, #12]
 8003d6e:	e7cd      	b.n	8003d0c <__smakebuf_r+0x18>
 8003d70:	08003b01 	.word	0x08003b01

08003d74 <malloc>:
 8003d74:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <malloc+0xc>)
 8003d76:	4601      	mov	r1, r0
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f000 b86f 	b.w	8003e5c <_malloc_r>
 8003d7e:	bf00      	nop
 8003d80:	20000034 	.word	0x20000034

08003d84 <_free_r>:
 8003d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d86:	2900      	cmp	r1, #0
 8003d88:	d044      	beq.n	8003e14 <_free_r+0x90>
 8003d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d8e:	9001      	str	r0, [sp, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f1a1 0404 	sub.w	r4, r1, #4
 8003d96:	bfb8      	it	lt
 8003d98:	18e4      	addlt	r4, r4, r3
 8003d9a:	f000 fee5 	bl	8004b68 <__malloc_lock>
 8003d9e:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <_free_r+0x94>)
 8003da0:	9801      	ldr	r0, [sp, #4]
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	b933      	cbnz	r3, 8003db4 <_free_r+0x30>
 8003da6:	6063      	str	r3, [r4, #4]
 8003da8:	6014      	str	r4, [r2, #0]
 8003daa:	b003      	add	sp, #12
 8003dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db0:	f000 bee0 	b.w	8004b74 <__malloc_unlock>
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	d908      	bls.n	8003dca <_free_r+0x46>
 8003db8:	6825      	ldr	r5, [r4, #0]
 8003dba:	1961      	adds	r1, r4, r5
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	bf01      	itttt	eq
 8003dc0:	6819      	ldreq	r1, [r3, #0]
 8003dc2:	685b      	ldreq	r3, [r3, #4]
 8003dc4:	1949      	addeq	r1, r1, r5
 8003dc6:	6021      	streq	r1, [r4, #0]
 8003dc8:	e7ed      	b.n	8003da6 <_free_r+0x22>
 8003dca:	461a      	mov	r2, r3
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	b10b      	cbz	r3, 8003dd4 <_free_r+0x50>
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d9fa      	bls.n	8003dca <_free_r+0x46>
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	1855      	adds	r5, r2, r1
 8003dd8:	42a5      	cmp	r5, r4
 8003dda:	d10b      	bne.n	8003df4 <_free_r+0x70>
 8003ddc:	6824      	ldr	r4, [r4, #0]
 8003dde:	4421      	add	r1, r4
 8003de0:	1854      	adds	r4, r2, r1
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	d1e0      	bne.n	8003daa <_free_r+0x26>
 8003de8:	681c      	ldr	r4, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	6053      	str	r3, [r2, #4]
 8003dee:	4421      	add	r1, r4
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	e7da      	b.n	8003daa <_free_r+0x26>
 8003df4:	d902      	bls.n	8003dfc <_free_r+0x78>
 8003df6:	230c      	movs	r3, #12
 8003df8:	6003      	str	r3, [r0, #0]
 8003dfa:	e7d6      	b.n	8003daa <_free_r+0x26>
 8003dfc:	6825      	ldr	r5, [r4, #0]
 8003dfe:	1961      	adds	r1, r4, r5
 8003e00:	428b      	cmp	r3, r1
 8003e02:	bf04      	itt	eq
 8003e04:	6819      	ldreq	r1, [r3, #0]
 8003e06:	685b      	ldreq	r3, [r3, #4]
 8003e08:	6063      	str	r3, [r4, #4]
 8003e0a:	bf04      	itt	eq
 8003e0c:	1949      	addeq	r1, r1, r5
 8003e0e:	6021      	streq	r1, [r4, #0]
 8003e10:	6054      	str	r4, [r2, #4]
 8003e12:	e7ca      	b.n	8003daa <_free_r+0x26>
 8003e14:	b003      	add	sp, #12
 8003e16:	bd30      	pop	{r4, r5, pc}
 8003e18:	200000d4 	.word	0x200000d4

08003e1c <sbrk_aligned>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4e0e      	ldr	r6, [pc, #56]	; (8003e58 <sbrk_aligned+0x3c>)
 8003e20:	460c      	mov	r4, r1
 8003e22:	6831      	ldr	r1, [r6, #0]
 8003e24:	4605      	mov	r5, r0
 8003e26:	b911      	cbnz	r1, 8003e2e <sbrk_aligned+0x12>
 8003e28:	f000 fd1e 	bl	8004868 <_sbrk_r>
 8003e2c:	6030      	str	r0, [r6, #0]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4628      	mov	r0, r5
 8003e32:	f000 fd19 	bl	8004868 <_sbrk_r>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d00a      	beq.n	8003e50 <sbrk_aligned+0x34>
 8003e3a:	1cc4      	adds	r4, r0, #3
 8003e3c:	f024 0403 	bic.w	r4, r4, #3
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d007      	beq.n	8003e54 <sbrk_aligned+0x38>
 8003e44:	1a21      	subs	r1, r4, r0
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 fd0e 	bl	8004868 <_sbrk_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d101      	bne.n	8003e54 <sbrk_aligned+0x38>
 8003e50:	f04f 34ff 	mov.w	r4, #4294967295
 8003e54:	4620      	mov	r0, r4
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	200000d8 	.word	0x200000d8

08003e5c <_malloc_r>:
 8003e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e60:	1ccd      	adds	r5, r1, #3
 8003e62:	f025 0503 	bic.w	r5, r5, #3
 8003e66:	3508      	adds	r5, #8
 8003e68:	2d0c      	cmp	r5, #12
 8003e6a:	bf38      	it	cc
 8003e6c:	250c      	movcc	r5, #12
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	4607      	mov	r7, r0
 8003e72:	db01      	blt.n	8003e78 <_malloc_r+0x1c>
 8003e74:	42a9      	cmp	r1, r5
 8003e76:	d905      	bls.n	8003e84 <_malloc_r+0x28>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e84:	4e2e      	ldr	r6, [pc, #184]	; (8003f40 <_malloc_r+0xe4>)
 8003e86:	f000 fe6f 	bl	8004b68 <__malloc_lock>
 8003e8a:	6833      	ldr	r3, [r6, #0]
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	bb34      	cbnz	r4, 8003ede <_malloc_r+0x82>
 8003e90:	4629      	mov	r1, r5
 8003e92:	4638      	mov	r0, r7
 8003e94:	f7ff ffc2 	bl	8003e1c <sbrk_aligned>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	d14d      	bne.n	8003f3a <_malloc_r+0xde>
 8003e9e:	6834      	ldr	r4, [r6, #0]
 8003ea0:	4626      	mov	r6, r4
 8003ea2:	2e00      	cmp	r6, #0
 8003ea4:	d140      	bne.n	8003f28 <_malloc_r+0xcc>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4638      	mov	r0, r7
 8003eac:	eb04 0803 	add.w	r8, r4, r3
 8003eb0:	f000 fcda 	bl	8004868 <_sbrk_r>
 8003eb4:	4580      	cmp	r8, r0
 8003eb6:	d13a      	bne.n	8003f2e <_malloc_r+0xd2>
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	3503      	adds	r5, #3
 8003ebc:	1a6d      	subs	r5, r5, r1
 8003ebe:	f025 0503 	bic.w	r5, r5, #3
 8003ec2:	3508      	adds	r5, #8
 8003ec4:	2d0c      	cmp	r5, #12
 8003ec6:	bf38      	it	cc
 8003ec8:	250c      	movcc	r5, #12
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f7ff ffa5 	bl	8003e1c <sbrk_aligned>
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d02b      	beq.n	8003f2e <_malloc_r+0xd2>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	442b      	add	r3, r5
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	e00e      	b.n	8003efc <_malloc_r+0xa0>
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	1b52      	subs	r2, r2, r5
 8003ee2:	d41e      	bmi.n	8003f22 <_malloc_r+0xc6>
 8003ee4:	2a0b      	cmp	r2, #11
 8003ee6:	d916      	bls.n	8003f16 <_malloc_r+0xba>
 8003ee8:	1961      	adds	r1, r4, r5
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	6025      	str	r5, [r4, #0]
 8003eee:	bf18      	it	ne
 8003ef0:	6059      	strne	r1, [r3, #4]
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	bf08      	it	eq
 8003ef6:	6031      	streq	r1, [r6, #0]
 8003ef8:	5162      	str	r2, [r4, r5]
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	4638      	mov	r0, r7
 8003efe:	f104 060b 	add.w	r6, r4, #11
 8003f02:	f000 fe37 	bl	8004b74 <__malloc_unlock>
 8003f06:	f026 0607 	bic.w	r6, r6, #7
 8003f0a:	1d23      	adds	r3, r4, #4
 8003f0c:	1af2      	subs	r2, r6, r3
 8003f0e:	d0b6      	beq.n	8003e7e <_malloc_r+0x22>
 8003f10:	1b9b      	subs	r3, r3, r6
 8003f12:	50a3      	str	r3, [r4, r2]
 8003f14:	e7b3      	b.n	8003e7e <_malloc_r+0x22>
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	bf0c      	ite	eq
 8003f1c:	6032      	streq	r2, [r6, #0]
 8003f1e:	605a      	strne	r2, [r3, #4]
 8003f20:	e7ec      	b.n	8003efc <_malloc_r+0xa0>
 8003f22:	4623      	mov	r3, r4
 8003f24:	6864      	ldr	r4, [r4, #4]
 8003f26:	e7b2      	b.n	8003e8e <_malloc_r+0x32>
 8003f28:	4634      	mov	r4, r6
 8003f2a:	6876      	ldr	r6, [r6, #4]
 8003f2c:	e7b9      	b.n	8003ea2 <_malloc_r+0x46>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4638      	mov	r0, r7
 8003f34:	f000 fe1e 	bl	8004b74 <__malloc_unlock>
 8003f38:	e7a1      	b.n	8003e7e <_malloc_r+0x22>
 8003f3a:	6025      	str	r5, [r4, #0]
 8003f3c:	e7de      	b.n	8003efc <_malloc_r+0xa0>
 8003f3e:	bf00      	nop
 8003f40:	200000d4 	.word	0x200000d4

08003f44 <__ssputs_r>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	688e      	ldr	r6, [r1, #8]
 8003f4a:	429e      	cmp	r6, r3
 8003f4c:	4682      	mov	sl, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	4690      	mov	r8, r2
 8003f52:	461f      	mov	r7, r3
 8003f54:	d838      	bhi.n	8003fc8 <__ssputs_r+0x84>
 8003f56:	898a      	ldrh	r2, [r1, #12]
 8003f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f5c:	d032      	beq.n	8003fc4 <__ssputs_r+0x80>
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	6909      	ldr	r1, [r1, #16]
 8003f62:	eba5 0901 	sub.w	r9, r5, r1
 8003f66:	6965      	ldr	r5, [r4, #20]
 8003f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f70:	3301      	adds	r3, #1
 8003f72:	444b      	add	r3, r9
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	429d      	cmp	r5, r3
 8003f78:	bf38      	it	cc
 8003f7a:	461d      	movcc	r5, r3
 8003f7c:	0553      	lsls	r3, r2, #21
 8003f7e:	d531      	bpl.n	8003fe4 <__ssputs_r+0xa0>
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7ff ff6b 	bl	8003e5c <_malloc_r>
 8003f86:	4606      	mov	r6, r0
 8003f88:	b950      	cbnz	r0, 8003fa0 <__ssputs_r+0x5c>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	f8ca 3000 	str.w	r3, [sl]
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	6921      	ldr	r1, [r4, #16]
 8003fa2:	464a      	mov	r2, r9
 8003fa4:	f000 fdb8 	bl	8004b18 <memcpy>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6126      	str	r6, [r4, #16]
 8003fb6:	6165      	str	r5, [r4, #20]
 8003fb8:	444e      	add	r6, r9
 8003fba:	eba5 0509 	sub.w	r5, r5, r9
 8003fbe:	6026      	str	r6, [r4, #0]
 8003fc0:	60a5      	str	r5, [r4, #8]
 8003fc2:	463e      	mov	r6, r7
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	d900      	bls.n	8003fca <__ssputs_r+0x86>
 8003fc8:	463e      	mov	r6, r7
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4641      	mov	r1, r8
 8003fd0:	f000 fdb0 	bl	8004b34 <memmove>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	1b9b      	subs	r3, r3, r6
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	4433      	add	r3, r6
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e7db      	b.n	8003f9c <__ssputs_r+0x58>
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	f000 fdcb 	bl	8004b80 <_realloc_r>
 8003fea:	4606      	mov	r6, r0
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1e1      	bne.n	8003fb4 <__ssputs_r+0x70>
 8003ff0:	6921      	ldr	r1, [r4, #16]
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	f7ff fec6 	bl	8003d84 <_free_r>
 8003ff8:	e7c7      	b.n	8003f8a <__ssputs_r+0x46>
	...

08003ffc <_svfiprintf_r>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	4698      	mov	r8, r3
 8004002:	898b      	ldrh	r3, [r1, #12]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	b09d      	sub	sp, #116	; 0x74
 8004008:	4607      	mov	r7, r0
 800400a:	460d      	mov	r5, r1
 800400c:	4614      	mov	r4, r2
 800400e:	d50e      	bpl.n	800402e <_svfiprintf_r+0x32>
 8004010:	690b      	ldr	r3, [r1, #16]
 8004012:	b963      	cbnz	r3, 800402e <_svfiprintf_r+0x32>
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	f7ff ff21 	bl	8003e5c <_malloc_r>
 800401a:	6028      	str	r0, [r5, #0]
 800401c:	6128      	str	r0, [r5, #16]
 800401e:	b920      	cbnz	r0, 800402a <_svfiprintf_r+0x2e>
 8004020:	230c      	movs	r3, #12
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e0d1      	b.n	80041ce <_svfiprintf_r+0x1d2>
 800402a:	2340      	movs	r3, #64	; 0x40
 800402c:	616b      	str	r3, [r5, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	9309      	str	r3, [sp, #36]	; 0x24
 8004032:	2320      	movs	r3, #32
 8004034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004038:	f8cd 800c 	str.w	r8, [sp, #12]
 800403c:	2330      	movs	r3, #48	; 0x30
 800403e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041e8 <_svfiprintf_r+0x1ec>
 8004042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004046:	f04f 0901 	mov.w	r9, #1
 800404a:	4623      	mov	r3, r4
 800404c:	469a      	mov	sl, r3
 800404e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004052:	b10a      	cbz	r2, 8004058 <_svfiprintf_r+0x5c>
 8004054:	2a25      	cmp	r2, #37	; 0x25
 8004056:	d1f9      	bne.n	800404c <_svfiprintf_r+0x50>
 8004058:	ebba 0b04 	subs.w	fp, sl, r4
 800405c:	d00b      	beq.n	8004076 <_svfiprintf_r+0x7a>
 800405e:	465b      	mov	r3, fp
 8004060:	4622      	mov	r2, r4
 8004062:	4629      	mov	r1, r5
 8004064:	4638      	mov	r0, r7
 8004066:	f7ff ff6d 	bl	8003f44 <__ssputs_r>
 800406a:	3001      	adds	r0, #1
 800406c:	f000 80aa 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004072:	445a      	add	r2, fp
 8004074:	9209      	str	r2, [sp, #36]	; 0x24
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a2 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004080:	2300      	movs	r3, #0
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
 8004086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408a:	f10a 0a01 	add.w	sl, sl, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	9307      	str	r3, [sp, #28]
 8004092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004096:	931a      	str	r3, [sp, #104]	; 0x68
 8004098:	4654      	mov	r4, sl
 800409a:	2205      	movs	r2, #5
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	4851      	ldr	r0, [pc, #324]	; (80041e8 <_svfiprintf_r+0x1ec>)
 80040a2:	f7fc f89d 	bl	80001e0 <memchr>
 80040a6:	9a04      	ldr	r2, [sp, #16]
 80040a8:	b9d8      	cbnz	r0, 80040e2 <_svfiprintf_r+0xe6>
 80040aa:	06d0      	lsls	r0, r2, #27
 80040ac:	bf44      	itt	mi
 80040ae:	2320      	movmi	r3, #32
 80040b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b4:	0711      	lsls	r1, r2, #28
 80040b6:	bf44      	itt	mi
 80040b8:	232b      	movmi	r3, #43	; 0x2b
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b2a      	cmp	r3, #42	; 0x2a
 80040c4:	d015      	beq.n	80040f2 <_svfiprintf_r+0xf6>
 80040c6:	9a07      	ldr	r2, [sp, #28]
 80040c8:	4654      	mov	r4, sl
 80040ca:	2000      	movs	r0, #0
 80040cc:	f04f 0c0a 	mov.w	ip, #10
 80040d0:	4621      	mov	r1, r4
 80040d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d6:	3b30      	subs	r3, #48	; 0x30
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d94e      	bls.n	800417a <_svfiprintf_r+0x17e>
 80040dc:	b1b0      	cbz	r0, 800410c <_svfiprintf_r+0x110>
 80040de:	9207      	str	r2, [sp, #28]
 80040e0:	e014      	b.n	800410c <_svfiprintf_r+0x110>
 80040e2:	eba0 0308 	sub.w	r3, r0, r8
 80040e6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	46a2      	mov	sl, r4
 80040f0:	e7d2      	b.n	8004098 <_svfiprintf_r+0x9c>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9103      	str	r1, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfbb      	ittet	lt
 80040fe:	425b      	neglt	r3, r3
 8004100:	f042 0202 	orrlt.w	r2, r2, #2
 8004104:	9307      	strge	r3, [sp, #28]
 8004106:	9307      	strlt	r3, [sp, #28]
 8004108:	bfb8      	it	lt
 800410a:	9204      	strlt	r2, [sp, #16]
 800410c:	7823      	ldrb	r3, [r4, #0]
 800410e:	2b2e      	cmp	r3, #46	; 0x2e
 8004110:	d10c      	bne.n	800412c <_svfiprintf_r+0x130>
 8004112:	7863      	ldrb	r3, [r4, #1]
 8004114:	2b2a      	cmp	r3, #42	; 0x2a
 8004116:	d135      	bne.n	8004184 <_svfiprintf_r+0x188>
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	9203      	str	r2, [sp, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfb8      	it	lt
 8004124:	f04f 33ff 	movlt.w	r3, #4294967295
 8004128:	3402      	adds	r4, #2
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041f8 <_svfiprintf_r+0x1fc>
 8004130:	7821      	ldrb	r1, [r4, #0]
 8004132:	2203      	movs	r2, #3
 8004134:	4650      	mov	r0, sl
 8004136:	f7fc f853 	bl	80001e0 <memchr>
 800413a:	b140      	cbz	r0, 800414e <_svfiprintf_r+0x152>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	eba0 000a 	sub.w	r0, r0, sl
 8004142:	fa03 f000 	lsl.w	r0, r3, r0
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	4303      	orrs	r3, r0
 800414a:	3401      	adds	r4, #1
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004152:	4826      	ldr	r0, [pc, #152]	; (80041ec <_svfiprintf_r+0x1f0>)
 8004154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004158:	2206      	movs	r2, #6
 800415a:	f7fc f841 	bl	80001e0 <memchr>
 800415e:	2800      	cmp	r0, #0
 8004160:	d038      	beq.n	80041d4 <_svfiprintf_r+0x1d8>
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <_svfiprintf_r+0x1f4>)
 8004164:	bb1b      	cbnz	r3, 80041ae <_svfiprintf_r+0x1b2>
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	3307      	adds	r3, #7
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	3308      	adds	r3, #8
 8004170:	9303      	str	r3, [sp, #12]
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	4433      	add	r3, r6
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	e767      	b.n	800404a <_svfiprintf_r+0x4e>
 800417a:	fb0c 3202 	mla	r2, ip, r2, r3
 800417e:	460c      	mov	r4, r1
 8004180:	2001      	movs	r0, #1
 8004182:	e7a5      	b.n	80040d0 <_svfiprintf_r+0xd4>
 8004184:	2300      	movs	r3, #0
 8004186:	3401      	adds	r4, #1
 8004188:	9305      	str	r3, [sp, #20]
 800418a:	4619      	mov	r1, r3
 800418c:	f04f 0c0a 	mov.w	ip, #10
 8004190:	4620      	mov	r0, r4
 8004192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004196:	3a30      	subs	r2, #48	; 0x30
 8004198:	2a09      	cmp	r2, #9
 800419a:	d903      	bls.n	80041a4 <_svfiprintf_r+0x1a8>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0c5      	beq.n	800412c <_svfiprintf_r+0x130>
 80041a0:	9105      	str	r1, [sp, #20]
 80041a2:	e7c3      	b.n	800412c <_svfiprintf_r+0x130>
 80041a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a8:	4604      	mov	r4, r0
 80041aa:	2301      	movs	r3, #1
 80041ac:	e7f0      	b.n	8004190 <_svfiprintf_r+0x194>
 80041ae:	ab03      	add	r3, sp, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	462a      	mov	r2, r5
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <_svfiprintf_r+0x1f8>)
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	4638      	mov	r0, r7
 80041ba:	f3af 8000 	nop.w
 80041be:	1c42      	adds	r2, r0, #1
 80041c0:	4606      	mov	r6, r0
 80041c2:	d1d6      	bne.n	8004172 <_svfiprintf_r+0x176>
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	065b      	lsls	r3, r3, #25
 80041c8:	f53f af2c 	bmi.w	8004024 <_svfiprintf_r+0x28>
 80041cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ce:	b01d      	add	sp, #116	; 0x74
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462a      	mov	r2, r5
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <_svfiprintf_r+0x1f8>)
 80041dc:	a904      	add	r1, sp, #16
 80041de:	4638      	mov	r0, r7
 80041e0:	f000 f9d4 	bl	800458c <_printf_i>
 80041e4:	e7eb      	b.n	80041be <_svfiprintf_r+0x1c2>
 80041e6:	bf00      	nop
 80041e8:	08005028 	.word	0x08005028
 80041ec:	08005032 	.word	0x08005032
 80041f0:	00000000 	.word	0x00000000
 80041f4:	08003f45 	.word	0x08003f45
 80041f8:	0800502e 	.word	0x0800502e

080041fc <__sfputc_r>:
 80041fc:	6893      	ldr	r3, [r2, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	b410      	push	{r4}
 8004204:	6093      	str	r3, [r2, #8]
 8004206:	da08      	bge.n	800421a <__sfputc_r+0x1e>
 8004208:	6994      	ldr	r4, [r2, #24]
 800420a:	42a3      	cmp	r3, r4
 800420c:	db01      	blt.n	8004212 <__sfputc_r+0x16>
 800420e:	290a      	cmp	r1, #10
 8004210:	d103      	bne.n	800421a <__sfputc_r+0x1e>
 8004212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004216:	f000 bb7b 	b.w	8004910 <__swbuf_r>
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	1c58      	adds	r0, r3, #1
 800421e:	6010      	str	r0, [r2, #0]
 8004220:	7019      	strb	r1, [r3, #0]
 8004222:	4608      	mov	r0, r1
 8004224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004228:	4770      	bx	lr

0800422a <__sfputs_r>:
 800422a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422c:	4606      	mov	r6, r0
 800422e:	460f      	mov	r7, r1
 8004230:	4614      	mov	r4, r2
 8004232:	18d5      	adds	r5, r2, r3
 8004234:	42ac      	cmp	r4, r5
 8004236:	d101      	bne.n	800423c <__sfputs_r+0x12>
 8004238:	2000      	movs	r0, #0
 800423a:	e007      	b.n	800424c <__sfputs_r+0x22>
 800423c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004240:	463a      	mov	r2, r7
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff ffda 	bl	80041fc <__sfputc_r>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d1f3      	bne.n	8004234 <__sfputs_r+0xa>
 800424c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004250 <_vfiprintf_r>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	460d      	mov	r5, r1
 8004256:	b09d      	sub	sp, #116	; 0x74
 8004258:	4614      	mov	r4, r2
 800425a:	4698      	mov	r8, r3
 800425c:	4606      	mov	r6, r0
 800425e:	b118      	cbz	r0, 8004268 <_vfiprintf_r+0x18>
 8004260:	6983      	ldr	r3, [r0, #24]
 8004262:	b90b      	cbnz	r3, 8004268 <_vfiprintf_r+0x18>
 8004264:	f7ff fc80 	bl	8003b68 <__sinit>
 8004268:	4b89      	ldr	r3, [pc, #548]	; (8004490 <_vfiprintf_r+0x240>)
 800426a:	429d      	cmp	r5, r3
 800426c:	d11b      	bne.n	80042a6 <_vfiprintf_r+0x56>
 800426e:	6875      	ldr	r5, [r6, #4]
 8004270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004272:	07d9      	lsls	r1, r3, #31
 8004274:	d405      	bmi.n	8004282 <_vfiprintf_r+0x32>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	059a      	lsls	r2, r3, #22
 800427a:	d402      	bmi.n	8004282 <_vfiprintf_r+0x32>
 800427c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800427e:	f7ff fd11 	bl	8003ca4 <__retarget_lock_acquire_recursive>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	d501      	bpl.n	800428c <_vfiprintf_r+0x3c>
 8004288:	692b      	ldr	r3, [r5, #16]
 800428a:	b9eb      	cbnz	r3, 80042c8 <_vfiprintf_r+0x78>
 800428c:	4629      	mov	r1, r5
 800428e:	4630      	mov	r0, r6
 8004290:	f000 fb90 	bl	80049b4 <__swsetup_r>
 8004294:	b1c0      	cbz	r0, 80042c8 <_vfiprintf_r+0x78>
 8004296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004298:	07dc      	lsls	r4, r3, #31
 800429a:	d50e      	bpl.n	80042ba <_vfiprintf_r+0x6a>
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	b01d      	add	sp, #116	; 0x74
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	4b7b      	ldr	r3, [pc, #492]	; (8004494 <_vfiprintf_r+0x244>)
 80042a8:	429d      	cmp	r5, r3
 80042aa:	d101      	bne.n	80042b0 <_vfiprintf_r+0x60>
 80042ac:	68b5      	ldr	r5, [r6, #8]
 80042ae:	e7df      	b.n	8004270 <_vfiprintf_r+0x20>
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <_vfiprintf_r+0x248>)
 80042b2:	429d      	cmp	r5, r3
 80042b4:	bf08      	it	eq
 80042b6:	68f5      	ldreq	r5, [r6, #12]
 80042b8:	e7da      	b.n	8004270 <_vfiprintf_r+0x20>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	0598      	lsls	r0, r3, #22
 80042be:	d4ed      	bmi.n	800429c <_vfiprintf_r+0x4c>
 80042c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042c2:	f7ff fcf0 	bl	8003ca6 <__retarget_lock_release_recursive>
 80042c6:	e7e9      	b.n	800429c <_vfiprintf_r+0x4c>
 80042c8:	2300      	movs	r3, #0
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	2320      	movs	r3, #32
 80042ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d6:	2330      	movs	r3, #48	; 0x30
 80042d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800449c <_vfiprintf_r+0x24c>
 80042dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e0:	f04f 0901 	mov.w	r9, #1
 80042e4:	4623      	mov	r3, r4
 80042e6:	469a      	mov	sl, r3
 80042e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ec:	b10a      	cbz	r2, 80042f2 <_vfiprintf_r+0xa2>
 80042ee:	2a25      	cmp	r2, #37	; 0x25
 80042f0:	d1f9      	bne.n	80042e6 <_vfiprintf_r+0x96>
 80042f2:	ebba 0b04 	subs.w	fp, sl, r4
 80042f6:	d00b      	beq.n	8004310 <_vfiprintf_r+0xc0>
 80042f8:	465b      	mov	r3, fp
 80042fa:	4622      	mov	r2, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff ff93 	bl	800422a <__sfputs_r>
 8004304:	3001      	adds	r0, #1
 8004306:	f000 80aa 	beq.w	800445e <_vfiprintf_r+0x20e>
 800430a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800430c:	445a      	add	r2, fp
 800430e:	9209      	str	r2, [sp, #36]	; 0x24
 8004310:	f89a 3000 	ldrb.w	r3, [sl]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a2 	beq.w	800445e <_vfiprintf_r+0x20e>
 800431a:	2300      	movs	r3, #0
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004324:	f10a 0a01 	add.w	sl, sl, #1
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	9307      	str	r3, [sp, #28]
 800432c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004330:	931a      	str	r3, [sp, #104]	; 0x68
 8004332:	4654      	mov	r4, sl
 8004334:	2205      	movs	r2, #5
 8004336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433a:	4858      	ldr	r0, [pc, #352]	; (800449c <_vfiprintf_r+0x24c>)
 800433c:	f7fb ff50 	bl	80001e0 <memchr>
 8004340:	9a04      	ldr	r2, [sp, #16]
 8004342:	b9d8      	cbnz	r0, 800437c <_vfiprintf_r+0x12c>
 8004344:	06d1      	lsls	r1, r2, #27
 8004346:	bf44      	itt	mi
 8004348:	2320      	movmi	r3, #32
 800434a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800434e:	0713      	lsls	r3, r2, #28
 8004350:	bf44      	itt	mi
 8004352:	232b      	movmi	r3, #43	; 0x2b
 8004354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004358:	f89a 3000 	ldrb.w	r3, [sl]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d015      	beq.n	800438c <_vfiprintf_r+0x13c>
 8004360:	9a07      	ldr	r2, [sp, #28]
 8004362:	4654      	mov	r4, sl
 8004364:	2000      	movs	r0, #0
 8004366:	f04f 0c0a 	mov.w	ip, #10
 800436a:	4621      	mov	r1, r4
 800436c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004370:	3b30      	subs	r3, #48	; 0x30
 8004372:	2b09      	cmp	r3, #9
 8004374:	d94e      	bls.n	8004414 <_vfiprintf_r+0x1c4>
 8004376:	b1b0      	cbz	r0, 80043a6 <_vfiprintf_r+0x156>
 8004378:	9207      	str	r2, [sp, #28]
 800437a:	e014      	b.n	80043a6 <_vfiprintf_r+0x156>
 800437c:	eba0 0308 	sub.w	r3, r0, r8
 8004380:	fa09 f303 	lsl.w	r3, r9, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	46a2      	mov	sl, r4
 800438a:	e7d2      	b.n	8004332 <_vfiprintf_r+0xe2>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	1d19      	adds	r1, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	9103      	str	r1, [sp, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfbb      	ittet	lt
 8004398:	425b      	neglt	r3, r3
 800439a:	f042 0202 	orrlt.w	r2, r2, #2
 800439e:	9307      	strge	r3, [sp, #28]
 80043a0:	9307      	strlt	r3, [sp, #28]
 80043a2:	bfb8      	it	lt
 80043a4:	9204      	strlt	r2, [sp, #16]
 80043a6:	7823      	ldrb	r3, [r4, #0]
 80043a8:	2b2e      	cmp	r3, #46	; 0x2e
 80043aa:	d10c      	bne.n	80043c6 <_vfiprintf_r+0x176>
 80043ac:	7863      	ldrb	r3, [r4, #1]
 80043ae:	2b2a      	cmp	r3, #42	; 0x2a
 80043b0:	d135      	bne.n	800441e <_vfiprintf_r+0x1ce>
 80043b2:	9b03      	ldr	r3, [sp, #12]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9203      	str	r2, [sp, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfb8      	it	lt
 80043be:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c2:	3402      	adds	r4, #2
 80043c4:	9305      	str	r3, [sp, #20]
 80043c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044ac <_vfiprintf_r+0x25c>
 80043ca:	7821      	ldrb	r1, [r4, #0]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4650      	mov	r0, sl
 80043d0:	f7fb ff06 	bl	80001e0 <memchr>
 80043d4:	b140      	cbz	r0, 80043e8 <_vfiprintf_r+0x198>
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	eba0 000a 	sub.w	r0, r0, sl
 80043dc:	fa03 f000 	lsl.w	r0, r3, r0
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	4303      	orrs	r3, r0
 80043e4:	3401      	adds	r4, #1
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ec:	482c      	ldr	r0, [pc, #176]	; (80044a0 <_vfiprintf_r+0x250>)
 80043ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f2:	2206      	movs	r2, #6
 80043f4:	f7fb fef4 	bl	80001e0 <memchr>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d03f      	beq.n	800447c <_vfiprintf_r+0x22c>
 80043fc:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <_vfiprintf_r+0x254>)
 80043fe:	bb1b      	cbnz	r3, 8004448 <_vfiprintf_r+0x1f8>
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	3307      	adds	r3, #7
 8004404:	f023 0307 	bic.w	r3, r3, #7
 8004408:	3308      	adds	r3, #8
 800440a:	9303      	str	r3, [sp, #12]
 800440c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440e:	443b      	add	r3, r7
 8004410:	9309      	str	r3, [sp, #36]	; 0x24
 8004412:	e767      	b.n	80042e4 <_vfiprintf_r+0x94>
 8004414:	fb0c 3202 	mla	r2, ip, r2, r3
 8004418:	460c      	mov	r4, r1
 800441a:	2001      	movs	r0, #1
 800441c:	e7a5      	b.n	800436a <_vfiprintf_r+0x11a>
 800441e:	2300      	movs	r3, #0
 8004420:	3401      	adds	r4, #1
 8004422:	9305      	str	r3, [sp, #20]
 8004424:	4619      	mov	r1, r3
 8004426:	f04f 0c0a 	mov.w	ip, #10
 800442a:	4620      	mov	r0, r4
 800442c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004430:	3a30      	subs	r2, #48	; 0x30
 8004432:	2a09      	cmp	r2, #9
 8004434:	d903      	bls.n	800443e <_vfiprintf_r+0x1ee>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0c5      	beq.n	80043c6 <_vfiprintf_r+0x176>
 800443a:	9105      	str	r1, [sp, #20]
 800443c:	e7c3      	b.n	80043c6 <_vfiprintf_r+0x176>
 800443e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004442:	4604      	mov	r4, r0
 8004444:	2301      	movs	r3, #1
 8004446:	e7f0      	b.n	800442a <_vfiprintf_r+0x1da>
 8004448:	ab03      	add	r3, sp, #12
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	462a      	mov	r2, r5
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <_vfiprintf_r+0x258>)
 8004450:	a904      	add	r1, sp, #16
 8004452:	4630      	mov	r0, r6
 8004454:	f3af 8000 	nop.w
 8004458:	4607      	mov	r7, r0
 800445a:	1c78      	adds	r0, r7, #1
 800445c:	d1d6      	bne.n	800440c <_vfiprintf_r+0x1bc>
 800445e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	d405      	bmi.n	8004470 <_vfiprintf_r+0x220>
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	059a      	lsls	r2, r3, #22
 8004468:	d402      	bmi.n	8004470 <_vfiprintf_r+0x220>
 800446a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800446c:	f7ff fc1b 	bl	8003ca6 <__retarget_lock_release_recursive>
 8004470:	89ab      	ldrh	r3, [r5, #12]
 8004472:	065b      	lsls	r3, r3, #25
 8004474:	f53f af12 	bmi.w	800429c <_vfiprintf_r+0x4c>
 8004478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447a:	e711      	b.n	80042a0 <_vfiprintf_r+0x50>
 800447c:	ab03      	add	r3, sp, #12
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	462a      	mov	r2, r5
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <_vfiprintf_r+0x258>)
 8004484:	a904      	add	r1, sp, #16
 8004486:	4630      	mov	r0, r6
 8004488:	f000 f880 	bl	800458c <_printf_i>
 800448c:	e7e4      	b.n	8004458 <_vfiprintf_r+0x208>
 800448e:	bf00      	nop
 8004490:	08004fe8 	.word	0x08004fe8
 8004494:	08005008 	.word	0x08005008
 8004498:	08004fc8 	.word	0x08004fc8
 800449c:	08005028 	.word	0x08005028
 80044a0:	08005032 	.word	0x08005032
 80044a4:	00000000 	.word	0x00000000
 80044a8:	0800422b 	.word	0x0800422b
 80044ac:	0800502e 	.word	0x0800502e

080044b0 <_printf_common>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	4616      	mov	r6, r2
 80044b6:	4699      	mov	r9, r3
 80044b8:	688a      	ldr	r2, [r1, #8]
 80044ba:	690b      	ldr	r3, [r1, #16]
 80044bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bfb8      	it	lt
 80044c4:	4613      	movlt	r3, r2
 80044c6:	6033      	str	r3, [r6, #0]
 80044c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044cc:	4607      	mov	r7, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	b10a      	cbz	r2, 80044d6 <_printf_common+0x26>
 80044d2:	3301      	adds	r3, #1
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	0699      	lsls	r1, r3, #26
 80044da:	bf42      	ittt	mi
 80044dc:	6833      	ldrmi	r3, [r6, #0]
 80044de:	3302      	addmi	r3, #2
 80044e0:	6033      	strmi	r3, [r6, #0]
 80044e2:	6825      	ldr	r5, [r4, #0]
 80044e4:	f015 0506 	ands.w	r5, r5, #6
 80044e8:	d106      	bne.n	80044f8 <_printf_common+0x48>
 80044ea:	f104 0a19 	add.w	sl, r4, #25
 80044ee:	68e3      	ldr	r3, [r4, #12]
 80044f0:	6832      	ldr	r2, [r6, #0]
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	42ab      	cmp	r3, r5
 80044f6:	dc26      	bgt.n	8004546 <_printf_common+0x96>
 80044f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044fc:	1e13      	subs	r3, r2, #0
 80044fe:	6822      	ldr	r2, [r4, #0]
 8004500:	bf18      	it	ne
 8004502:	2301      	movne	r3, #1
 8004504:	0692      	lsls	r2, r2, #26
 8004506:	d42b      	bmi.n	8004560 <_printf_common+0xb0>
 8004508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800450c:	4649      	mov	r1, r9
 800450e:	4638      	mov	r0, r7
 8004510:	47c0      	blx	r8
 8004512:	3001      	adds	r0, #1
 8004514:	d01e      	beq.n	8004554 <_printf_common+0xa4>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	68e5      	ldr	r5, [r4, #12]
 800451a:	6832      	ldr	r2, [r6, #0]
 800451c:	f003 0306 	and.w	r3, r3, #6
 8004520:	2b04      	cmp	r3, #4
 8004522:	bf08      	it	eq
 8004524:	1aad      	subeq	r5, r5, r2
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	bf0c      	ite	eq
 800452c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004530:	2500      	movne	r5, #0
 8004532:	4293      	cmp	r3, r2
 8004534:	bfc4      	itt	gt
 8004536:	1a9b      	subgt	r3, r3, r2
 8004538:	18ed      	addgt	r5, r5, r3
 800453a:	2600      	movs	r6, #0
 800453c:	341a      	adds	r4, #26
 800453e:	42b5      	cmp	r5, r6
 8004540:	d11a      	bne.n	8004578 <_printf_common+0xc8>
 8004542:	2000      	movs	r0, #0
 8004544:	e008      	b.n	8004558 <_printf_common+0xa8>
 8004546:	2301      	movs	r3, #1
 8004548:	4652      	mov	r2, sl
 800454a:	4649      	mov	r1, r9
 800454c:	4638      	mov	r0, r7
 800454e:	47c0      	blx	r8
 8004550:	3001      	adds	r0, #1
 8004552:	d103      	bne.n	800455c <_printf_common+0xac>
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	3501      	adds	r5, #1
 800455e:	e7c6      	b.n	80044ee <_printf_common+0x3e>
 8004560:	18e1      	adds	r1, r4, r3
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	2030      	movs	r0, #48	; 0x30
 8004566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800456a:	4422      	add	r2, r4
 800456c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004574:	3302      	adds	r3, #2
 8004576:	e7c7      	b.n	8004508 <_printf_common+0x58>
 8004578:	2301      	movs	r3, #1
 800457a:	4622      	mov	r2, r4
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d0e6      	beq.n	8004554 <_printf_common+0xa4>
 8004586:	3601      	adds	r6, #1
 8004588:	e7d9      	b.n	800453e <_printf_common+0x8e>
	...

0800458c <_printf_i>:
 800458c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	7e0f      	ldrb	r7, [r1, #24]
 8004592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004594:	2f78      	cmp	r7, #120	; 0x78
 8004596:	4691      	mov	r9, r2
 8004598:	4680      	mov	r8, r0
 800459a:	460c      	mov	r4, r1
 800459c:	469a      	mov	sl, r3
 800459e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045a2:	d807      	bhi.n	80045b4 <_printf_i+0x28>
 80045a4:	2f62      	cmp	r7, #98	; 0x62
 80045a6:	d80a      	bhi.n	80045be <_printf_i+0x32>
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	f000 80d8 	beq.w	800475e <_printf_i+0x1d2>
 80045ae:	2f58      	cmp	r7, #88	; 0x58
 80045b0:	f000 80a3 	beq.w	80046fa <_printf_i+0x16e>
 80045b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045bc:	e03a      	b.n	8004634 <_printf_i+0xa8>
 80045be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045c2:	2b15      	cmp	r3, #21
 80045c4:	d8f6      	bhi.n	80045b4 <_printf_i+0x28>
 80045c6:	a101      	add	r1, pc, #4	; (adr r1, 80045cc <_printf_i+0x40>)
 80045c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004639 	.word	0x08004639
 80045d4:	080045b5 	.word	0x080045b5
 80045d8:	080045b5 	.word	0x080045b5
 80045dc:	080045b5 	.word	0x080045b5
 80045e0:	080045b5 	.word	0x080045b5
 80045e4:	08004639 	.word	0x08004639
 80045e8:	080045b5 	.word	0x080045b5
 80045ec:	080045b5 	.word	0x080045b5
 80045f0:	080045b5 	.word	0x080045b5
 80045f4:	080045b5 	.word	0x080045b5
 80045f8:	08004745 	.word	0x08004745
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004727 	.word	0x08004727
 8004604:	080045b5 	.word	0x080045b5
 8004608:	080045b5 	.word	0x080045b5
 800460c:	08004767 	.word	0x08004767
 8004610:	080045b5 	.word	0x080045b5
 8004614:	08004669 	.word	0x08004669
 8004618:	080045b5 	.word	0x080045b5
 800461c:	080045b5 	.word	0x080045b5
 8004620:	0800472f 	.word	0x0800472f
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	602a      	str	r2, [r5, #0]
 800462c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004634:	2301      	movs	r3, #1
 8004636:	e0a3      	b.n	8004780 <_printf_i+0x1f4>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	6829      	ldr	r1, [r5, #0]
 800463c:	0606      	lsls	r6, r0, #24
 800463e:	f101 0304 	add.w	r3, r1, #4
 8004642:	d50a      	bpl.n	800465a <_printf_i+0xce>
 8004644:	680e      	ldr	r6, [r1, #0]
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	2e00      	cmp	r6, #0
 800464a:	da03      	bge.n	8004654 <_printf_i+0xc8>
 800464c:	232d      	movs	r3, #45	; 0x2d
 800464e:	4276      	negs	r6, r6
 8004650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004654:	485e      	ldr	r0, [pc, #376]	; (80047d0 <_printf_i+0x244>)
 8004656:	230a      	movs	r3, #10
 8004658:	e019      	b.n	800468e <_printf_i+0x102>
 800465a:	680e      	ldr	r6, [r1, #0]
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004662:	bf18      	it	ne
 8004664:	b236      	sxthne	r6, r6
 8004666:	e7ef      	b.n	8004648 <_printf_i+0xbc>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	1d19      	adds	r1, r3, #4
 800466e:	6029      	str	r1, [r5, #0]
 8004670:	0601      	lsls	r1, r0, #24
 8004672:	d501      	bpl.n	8004678 <_printf_i+0xec>
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	e002      	b.n	800467e <_printf_i+0xf2>
 8004678:	0646      	lsls	r6, r0, #25
 800467a:	d5fb      	bpl.n	8004674 <_printf_i+0xe8>
 800467c:	881e      	ldrh	r6, [r3, #0]
 800467e:	4854      	ldr	r0, [pc, #336]	; (80047d0 <_printf_i+0x244>)
 8004680:	2f6f      	cmp	r7, #111	; 0x6f
 8004682:	bf0c      	ite	eq
 8004684:	2308      	moveq	r3, #8
 8004686:	230a      	movne	r3, #10
 8004688:	2100      	movs	r1, #0
 800468a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800468e:	6865      	ldr	r5, [r4, #4]
 8004690:	60a5      	str	r5, [r4, #8]
 8004692:	2d00      	cmp	r5, #0
 8004694:	bfa2      	ittt	ge
 8004696:	6821      	ldrge	r1, [r4, #0]
 8004698:	f021 0104 	bicge.w	r1, r1, #4
 800469c:	6021      	strge	r1, [r4, #0]
 800469e:	b90e      	cbnz	r6, 80046a4 <_printf_i+0x118>
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	d04d      	beq.n	8004740 <_printf_i+0x1b4>
 80046a4:	4615      	mov	r5, r2
 80046a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80046aa:	fb03 6711 	mls	r7, r3, r1, r6
 80046ae:	5dc7      	ldrb	r7, [r0, r7]
 80046b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046b4:	4637      	mov	r7, r6
 80046b6:	42bb      	cmp	r3, r7
 80046b8:	460e      	mov	r6, r1
 80046ba:	d9f4      	bls.n	80046a6 <_printf_i+0x11a>
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d10b      	bne.n	80046d8 <_printf_i+0x14c>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	07de      	lsls	r6, r3, #31
 80046c4:	d508      	bpl.n	80046d8 <_printf_i+0x14c>
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	6861      	ldr	r1, [r4, #4]
 80046ca:	4299      	cmp	r1, r3
 80046cc:	bfde      	ittt	le
 80046ce:	2330      	movle	r3, #48	; 0x30
 80046d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d8:	1b52      	subs	r2, r2, r5
 80046da:	6122      	str	r2, [r4, #16]
 80046dc:	f8cd a000 	str.w	sl, [sp]
 80046e0:	464b      	mov	r3, r9
 80046e2:	aa03      	add	r2, sp, #12
 80046e4:	4621      	mov	r1, r4
 80046e6:	4640      	mov	r0, r8
 80046e8:	f7ff fee2 	bl	80044b0 <_printf_common>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d14c      	bne.n	800478a <_printf_i+0x1fe>
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	b004      	add	sp, #16
 80046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fa:	4835      	ldr	r0, [pc, #212]	; (80047d0 <_printf_i+0x244>)
 80046fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004700:	6829      	ldr	r1, [r5, #0]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	f851 6b04 	ldr.w	r6, [r1], #4
 8004708:	6029      	str	r1, [r5, #0]
 800470a:	061d      	lsls	r5, r3, #24
 800470c:	d514      	bpl.n	8004738 <_printf_i+0x1ac>
 800470e:	07df      	lsls	r7, r3, #31
 8004710:	bf44      	itt	mi
 8004712:	f043 0320 	orrmi.w	r3, r3, #32
 8004716:	6023      	strmi	r3, [r4, #0]
 8004718:	b91e      	cbnz	r6, 8004722 <_printf_i+0x196>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f023 0320 	bic.w	r3, r3, #32
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	2310      	movs	r3, #16
 8004724:	e7b0      	b.n	8004688 <_printf_i+0xfc>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f043 0320 	orr.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2378      	movs	r3, #120	; 0x78
 8004730:	4828      	ldr	r0, [pc, #160]	; (80047d4 <_printf_i+0x248>)
 8004732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004736:	e7e3      	b.n	8004700 <_printf_i+0x174>
 8004738:	0659      	lsls	r1, r3, #25
 800473a:	bf48      	it	mi
 800473c:	b2b6      	uxthmi	r6, r6
 800473e:	e7e6      	b.n	800470e <_printf_i+0x182>
 8004740:	4615      	mov	r5, r2
 8004742:	e7bb      	b.n	80046bc <_printf_i+0x130>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	6826      	ldr	r6, [r4, #0]
 8004748:	6961      	ldr	r1, [r4, #20]
 800474a:	1d18      	adds	r0, r3, #4
 800474c:	6028      	str	r0, [r5, #0]
 800474e:	0635      	lsls	r5, r6, #24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	d501      	bpl.n	8004758 <_printf_i+0x1cc>
 8004754:	6019      	str	r1, [r3, #0]
 8004756:	e002      	b.n	800475e <_printf_i+0x1d2>
 8004758:	0670      	lsls	r0, r6, #25
 800475a:	d5fb      	bpl.n	8004754 <_printf_i+0x1c8>
 800475c:	8019      	strh	r1, [r3, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	4615      	mov	r5, r2
 8004764:	e7ba      	b.n	80046dc <_printf_i+0x150>
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	602a      	str	r2, [r5, #0]
 800476c:	681d      	ldr	r5, [r3, #0]
 800476e:	6862      	ldr	r2, [r4, #4]
 8004770:	2100      	movs	r1, #0
 8004772:	4628      	mov	r0, r5
 8004774:	f7fb fd34 	bl	80001e0 <memchr>
 8004778:	b108      	cbz	r0, 800477e <_printf_i+0x1f2>
 800477a:	1b40      	subs	r0, r0, r5
 800477c:	6060      	str	r0, [r4, #4]
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	2300      	movs	r3, #0
 8004784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004788:	e7a8      	b.n	80046dc <_printf_i+0x150>
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	462a      	mov	r2, r5
 800478e:	4649      	mov	r1, r9
 8004790:	4640      	mov	r0, r8
 8004792:	47d0      	blx	sl
 8004794:	3001      	adds	r0, #1
 8004796:	d0ab      	beq.n	80046f0 <_printf_i+0x164>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	079b      	lsls	r3, r3, #30
 800479c:	d413      	bmi.n	80047c6 <_printf_i+0x23a>
 800479e:	68e0      	ldr	r0, [r4, #12]
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	4298      	cmp	r0, r3
 80047a4:	bfb8      	it	lt
 80047a6:	4618      	movlt	r0, r3
 80047a8:	e7a4      	b.n	80046f4 <_printf_i+0x168>
 80047aa:	2301      	movs	r3, #1
 80047ac:	4632      	mov	r2, r6
 80047ae:	4649      	mov	r1, r9
 80047b0:	4640      	mov	r0, r8
 80047b2:	47d0      	blx	sl
 80047b4:	3001      	adds	r0, #1
 80047b6:	d09b      	beq.n	80046f0 <_printf_i+0x164>
 80047b8:	3501      	adds	r5, #1
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	9903      	ldr	r1, [sp, #12]
 80047be:	1a5b      	subs	r3, r3, r1
 80047c0:	42ab      	cmp	r3, r5
 80047c2:	dcf2      	bgt.n	80047aa <_printf_i+0x21e>
 80047c4:	e7eb      	b.n	800479e <_printf_i+0x212>
 80047c6:	2500      	movs	r5, #0
 80047c8:	f104 0619 	add.w	r6, r4, #25
 80047cc:	e7f5      	b.n	80047ba <_printf_i+0x22e>
 80047ce:	bf00      	nop
 80047d0:	08005039 	.word	0x08005039
 80047d4:	0800504a 	.word	0x0800504a

080047d8 <_putc_r>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	460d      	mov	r5, r1
 80047dc:	4614      	mov	r4, r2
 80047de:	4606      	mov	r6, r0
 80047e0:	b118      	cbz	r0, 80047ea <_putc_r+0x12>
 80047e2:	6983      	ldr	r3, [r0, #24]
 80047e4:	b90b      	cbnz	r3, 80047ea <_putc_r+0x12>
 80047e6:	f7ff f9bf 	bl	8003b68 <__sinit>
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <_putc_r+0x84>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d124      	bne.n	800483a <_putc_r+0x62>
 80047f0:	6874      	ldr	r4, [r6, #4]
 80047f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047f4:	07d8      	lsls	r0, r3, #31
 80047f6:	d405      	bmi.n	8004804 <_putc_r+0x2c>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	0599      	lsls	r1, r3, #22
 80047fc:	d402      	bmi.n	8004804 <_putc_r+0x2c>
 80047fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004800:	f7ff fa50 	bl	8003ca4 <__retarget_lock_acquire_recursive>
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	3b01      	subs	r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	da05      	bge.n	800481a <_putc_r+0x42>
 800480e:	69a2      	ldr	r2, [r4, #24]
 8004810:	4293      	cmp	r3, r2
 8004812:	db1c      	blt.n	800484e <_putc_r+0x76>
 8004814:	b2eb      	uxtb	r3, r5
 8004816:	2b0a      	cmp	r3, #10
 8004818:	d019      	beq.n	800484e <_putc_r+0x76>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	701d      	strb	r5, [r3, #0]
 8004822:	b2ed      	uxtb	r5, r5
 8004824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d405      	bmi.n	8004836 <_putc_r+0x5e>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	d402      	bmi.n	8004836 <_putc_r+0x5e>
 8004830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004832:	f7ff fa38 	bl	8003ca6 <__retarget_lock_release_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <_putc_r+0x88>)
 800483c:	429c      	cmp	r4, r3
 800483e:	d101      	bne.n	8004844 <_putc_r+0x6c>
 8004840:	68b4      	ldr	r4, [r6, #8]
 8004842:	e7d6      	b.n	80047f2 <_putc_r+0x1a>
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <_putc_r+0x8c>)
 8004846:	429c      	cmp	r4, r3
 8004848:	bf08      	it	eq
 800484a:	68f4      	ldreq	r4, [r6, #12]
 800484c:	e7d1      	b.n	80047f2 <_putc_r+0x1a>
 800484e:	4629      	mov	r1, r5
 8004850:	4622      	mov	r2, r4
 8004852:	4630      	mov	r0, r6
 8004854:	f000 f85c 	bl	8004910 <__swbuf_r>
 8004858:	4605      	mov	r5, r0
 800485a:	e7e3      	b.n	8004824 <_putc_r+0x4c>
 800485c:	08004fe8 	.word	0x08004fe8
 8004860:	08005008 	.word	0x08005008
 8004864:	08004fc8 	.word	0x08004fc8

08004868 <_sbrk_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d06      	ldr	r5, [pc, #24]	; (8004884 <_sbrk_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fe fd3c 	bl	80032f0 <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_sbrk_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_sbrk_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	200000dc 	.word	0x200000dc

08004888 <__sread>:
 8004888:	b510      	push	{r4, lr}
 800488a:	460c      	mov	r4, r1
 800488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004890:	f000 f9a6 	bl	8004be0 <_read_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	bfab      	itete	ge
 8004898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800489a:	89a3      	ldrhlt	r3, [r4, #12]
 800489c:	181b      	addge	r3, r3, r0
 800489e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048a2:	bfac      	ite	ge
 80048a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048a6:	81a3      	strhlt	r3, [r4, #12]
 80048a8:	bd10      	pop	{r4, pc}

080048aa <__swrite>:
 80048aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ae:	461f      	mov	r7, r3
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	05db      	lsls	r3, r3, #23
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	4616      	mov	r6, r2
 80048ba:	d505      	bpl.n	80048c8 <__swrite+0x1e>
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	2302      	movs	r3, #2
 80048c2:	2200      	movs	r2, #0
 80048c4:	f000 f916 	bl	8004af4 <_lseek_r>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	4628      	mov	r0, r5
 80048da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	f7fc b8b3 	b.w	8000a48 <_write_r>

080048e2 <__sseek>:
 80048e2:	b510      	push	{r4, lr}
 80048e4:	460c      	mov	r4, r1
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 f903 	bl	8004af4 <_lseek_r>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	bf15      	itete	ne
 80048f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048fe:	81a3      	strheq	r3, [r4, #12]
 8004900:	bf18      	it	ne
 8004902:	81a3      	strhne	r3, [r4, #12]
 8004904:	bd10      	pop	{r4, pc}

08004906 <__sclose>:
 8004906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490a:	f000 b8c1 	b.w	8004a90 <_close_r>
	...

08004910 <__swbuf_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	460e      	mov	r6, r1
 8004914:	4614      	mov	r4, r2
 8004916:	4605      	mov	r5, r0
 8004918:	b118      	cbz	r0, 8004922 <__swbuf_r+0x12>
 800491a:	6983      	ldr	r3, [r0, #24]
 800491c:	b90b      	cbnz	r3, 8004922 <__swbuf_r+0x12>
 800491e:	f7ff f923 	bl	8003b68 <__sinit>
 8004922:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <__swbuf_r+0x98>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d12b      	bne.n	8004980 <__swbuf_r+0x70>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	69a3      	ldr	r3, [r4, #24]
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	071a      	lsls	r2, r3, #28
 8004932:	d52f      	bpl.n	8004994 <__swbuf_r+0x84>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b36b      	cbz	r3, 8004994 <__swbuf_r+0x84>
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	1ac0      	subs	r0, r0, r3
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	b2f6      	uxtb	r6, r6
 8004942:	4283      	cmp	r3, r0
 8004944:	4637      	mov	r7, r6
 8004946:	dc04      	bgt.n	8004952 <__swbuf_r+0x42>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f7ff f878 	bl	8003a40 <_fflush_r>
 8004950:	bb30      	cbnz	r0, 80049a0 <__swbuf_r+0x90>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	3b01      	subs	r3, #1
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	701e      	strb	r6, [r3, #0]
 8004960:	6963      	ldr	r3, [r4, #20]
 8004962:	3001      	adds	r0, #1
 8004964:	4283      	cmp	r3, r0
 8004966:	d004      	beq.n	8004972 <__swbuf_r+0x62>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	07db      	lsls	r3, r3, #31
 800496c:	d506      	bpl.n	800497c <__swbuf_r+0x6c>
 800496e:	2e0a      	cmp	r6, #10
 8004970:	d104      	bne.n	800497c <__swbuf_r+0x6c>
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f7ff f863 	bl	8003a40 <_fflush_r>
 800497a:	b988      	cbnz	r0, 80049a0 <__swbuf_r+0x90>
 800497c:	4638      	mov	r0, r7
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <__swbuf_r+0x9c>)
 8004982:	429c      	cmp	r4, r3
 8004984:	d101      	bne.n	800498a <__swbuf_r+0x7a>
 8004986:	68ac      	ldr	r4, [r5, #8]
 8004988:	e7cf      	b.n	800492a <__swbuf_r+0x1a>
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <__swbuf_r+0xa0>)
 800498c:	429c      	cmp	r4, r3
 800498e:	bf08      	it	eq
 8004990:	68ec      	ldreq	r4, [r5, #12]
 8004992:	e7ca      	b.n	800492a <__swbuf_r+0x1a>
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f80c 	bl	80049b4 <__swsetup_r>
 800499c:	2800      	cmp	r0, #0
 800499e:	d0cb      	beq.n	8004938 <__swbuf_r+0x28>
 80049a0:	f04f 37ff 	mov.w	r7, #4294967295
 80049a4:	e7ea      	b.n	800497c <__swbuf_r+0x6c>
 80049a6:	bf00      	nop
 80049a8:	08004fe8 	.word	0x08004fe8
 80049ac:	08005008 	.word	0x08005008
 80049b0:	08004fc8 	.word	0x08004fc8

080049b4 <__swsetup_r>:
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <__swsetup_r+0xcc>)
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	681d      	ldr	r5, [r3, #0]
 80049ba:	4606      	mov	r6, r0
 80049bc:	460c      	mov	r4, r1
 80049be:	b125      	cbz	r5, 80049ca <__swsetup_r+0x16>
 80049c0:	69ab      	ldr	r3, [r5, #24]
 80049c2:	b913      	cbnz	r3, 80049ca <__swsetup_r+0x16>
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7ff f8cf 	bl	8003b68 <__sinit>
 80049ca:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <__swsetup_r+0xd0>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	d10f      	bne.n	80049f0 <__swsetup_r+0x3c>
 80049d0:	686c      	ldr	r4, [r5, #4]
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049d8:	0719      	lsls	r1, r3, #28
 80049da:	d42c      	bmi.n	8004a36 <__swsetup_r+0x82>
 80049dc:	06dd      	lsls	r5, r3, #27
 80049de:	d411      	bmi.n	8004a04 <__swsetup_r+0x50>
 80049e0:	2309      	movs	r3, #9
 80049e2:	6033      	str	r3, [r6, #0]
 80049e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	f04f 30ff 	mov.w	r0, #4294967295
 80049ee:	e03e      	b.n	8004a6e <__swsetup_r+0xba>
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <__swsetup_r+0xd4>)
 80049f2:	429c      	cmp	r4, r3
 80049f4:	d101      	bne.n	80049fa <__swsetup_r+0x46>
 80049f6:	68ac      	ldr	r4, [r5, #8]
 80049f8:	e7eb      	b.n	80049d2 <__swsetup_r+0x1e>
 80049fa:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <__swsetup_r+0xd8>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	bf08      	it	eq
 8004a00:	68ec      	ldreq	r4, [r5, #12]
 8004a02:	e7e6      	b.n	80049d2 <__swsetup_r+0x1e>
 8004a04:	0758      	lsls	r0, r3, #29
 8004a06:	d512      	bpl.n	8004a2e <__swsetup_r+0x7a>
 8004a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a0a:	b141      	cbz	r1, 8004a1e <__swsetup_r+0x6a>
 8004a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a10:	4299      	cmp	r1, r3
 8004a12:	d002      	beq.n	8004a1a <__swsetup_r+0x66>
 8004a14:	4630      	mov	r0, r6
 8004a16:	f7ff f9b5 	bl	8003d84 <_free_r>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	2300      	movs	r3, #0
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f043 0308 	orr.w	r3, r3, #8
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	b94b      	cbnz	r3, 8004a4e <__swsetup_r+0x9a>
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a44:	d003      	beq.n	8004a4e <__swsetup_r+0x9a>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff f953 	bl	8003cf4 <__smakebuf_r>
 8004a4e:	89a0      	ldrh	r0, [r4, #12]
 8004a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a54:	f010 0301 	ands.w	r3, r0, #1
 8004a58:	d00a      	beq.n	8004a70 <__swsetup_r+0xbc>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60a3      	str	r3, [r4, #8]
 8004a5e:	6963      	ldr	r3, [r4, #20]
 8004a60:	425b      	negs	r3, r3
 8004a62:	61a3      	str	r3, [r4, #24]
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	b943      	cbnz	r3, 8004a7a <__swsetup_r+0xc6>
 8004a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a6c:	d1ba      	bne.n	80049e4 <__swsetup_r+0x30>
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	0781      	lsls	r1, r0, #30
 8004a72:	bf58      	it	pl
 8004a74:	6963      	ldrpl	r3, [r4, #20]
 8004a76:	60a3      	str	r3, [r4, #8]
 8004a78:	e7f4      	b.n	8004a64 <__swsetup_r+0xb0>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e7f7      	b.n	8004a6e <__swsetup_r+0xba>
 8004a7e:	bf00      	nop
 8004a80:	20000034 	.word	0x20000034
 8004a84:	08004fe8 	.word	0x08004fe8
 8004a88:	08005008 	.word	0x08005008
 8004a8c:	08004fc8 	.word	0x08004fc8

08004a90 <_close_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d06      	ldr	r5, [pc, #24]	; (8004aac <_close_r+0x1c>)
 8004a94:	2300      	movs	r3, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	602b      	str	r3, [r5, #0]
 8004a9c:	f7fe fbf3 	bl	8003286 <_close>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_close_r+0x1a>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_close_r+0x1a>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	200000dc 	.word	0x200000dc

08004ab0 <_fstat_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d07      	ldr	r5, [pc, #28]	; (8004ad0 <_fstat_r+0x20>)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	f7fe fbee 	bl	800329e <_fstat>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d102      	bne.n	8004acc <_fstat_r+0x1c>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	b103      	cbz	r3, 8004acc <_fstat_r+0x1c>
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	bf00      	nop
 8004ad0:	200000dc 	.word	0x200000dc

08004ad4 <_isatty_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_isatty_r+0x1c>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fe fbed 	bl	80032be <_isatty>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_isatty_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_isatty_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	200000dc 	.word	0x200000dc

08004af4 <_lseek_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_lseek_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fe fbe6 	bl	80032d4 <_lseek>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_lseek_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_lseek_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	200000dc 	.word	0x200000dc

08004b18 <memcpy>:
 8004b18:	440a      	add	r2, r1
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b20:	d100      	bne.n	8004b24 <memcpy+0xc>
 8004b22:	4770      	bx	lr
 8004b24:	b510      	push	{r4, lr}
 8004b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b2e:	4291      	cmp	r1, r2
 8004b30:	d1f9      	bne.n	8004b26 <memcpy+0xe>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <memmove>:
 8004b34:	4288      	cmp	r0, r1
 8004b36:	b510      	push	{r4, lr}
 8004b38:	eb01 0402 	add.w	r4, r1, r2
 8004b3c:	d902      	bls.n	8004b44 <memmove+0x10>
 8004b3e:	4284      	cmp	r4, r0
 8004b40:	4623      	mov	r3, r4
 8004b42:	d807      	bhi.n	8004b54 <memmove+0x20>
 8004b44:	1e43      	subs	r3, r0, #1
 8004b46:	42a1      	cmp	r1, r4
 8004b48:	d008      	beq.n	8004b5c <memmove+0x28>
 8004b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b52:	e7f8      	b.n	8004b46 <memmove+0x12>
 8004b54:	4402      	add	r2, r0
 8004b56:	4601      	mov	r1, r0
 8004b58:	428a      	cmp	r2, r1
 8004b5a:	d100      	bne.n	8004b5e <memmove+0x2a>
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b66:	e7f7      	b.n	8004b58 <memmove+0x24>

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff b89b 	b.w	8003ca4 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200000d0 	.word	0x200000d0

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff b896 	b.w	8003ca6 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	200000d0 	.word	0x200000d0

08004b80 <_realloc_r>:
 8004b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	4680      	mov	r8, r0
 8004b86:	4614      	mov	r4, r2
 8004b88:	460e      	mov	r6, r1
 8004b8a:	b921      	cbnz	r1, 8004b96 <_realloc_r+0x16>
 8004b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	4611      	mov	r1, r2
 8004b92:	f7ff b963 	b.w	8003e5c <_malloc_r>
 8004b96:	b92a      	cbnz	r2, 8004ba4 <_realloc_r+0x24>
 8004b98:	f7ff f8f4 	bl	8003d84 <_free_r>
 8004b9c:	4625      	mov	r5, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba4:	f000 f82e 	bl	8004c04 <_malloc_usable_size_r>
 8004ba8:	4284      	cmp	r4, r0
 8004baa:	4607      	mov	r7, r0
 8004bac:	d802      	bhi.n	8004bb4 <_realloc_r+0x34>
 8004bae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bb2:	d812      	bhi.n	8004bda <_realloc_r+0x5a>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f7ff f950 	bl	8003e5c <_malloc_r>
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0ed      	beq.n	8004b9e <_realloc_r+0x1e>
 8004bc2:	42bc      	cmp	r4, r7
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	bf28      	it	cs
 8004bca:	463a      	movcs	r2, r7
 8004bcc:	f7ff ffa4 	bl	8004b18 <memcpy>
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f7ff f8d6 	bl	8003d84 <_free_r>
 8004bd8:	e7e1      	b.n	8004b9e <_realloc_r+0x1e>
 8004bda:	4635      	mov	r5, r6
 8004bdc:	e7df      	b.n	8004b9e <_realloc_r+0x1e>
	...

08004be0 <_read_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4d07      	ldr	r5, [pc, #28]	; (8004c00 <_read_r+0x20>)
 8004be4:	4604      	mov	r4, r0
 8004be6:	4608      	mov	r0, r1
 8004be8:	4611      	mov	r1, r2
 8004bea:	2200      	movs	r2, #0
 8004bec:	602a      	str	r2, [r5, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7fe fb2c 	bl	800324c <_read>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_read_r+0x1e>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_read_r+0x1e>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	200000dc 	.word	0x200000dc

08004c04 <_malloc_usable_size_r>:
 8004c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c08:	1f18      	subs	r0, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfbc      	itt	lt
 8004c0e:	580b      	ldrlt	r3, [r1, r0]
 8004c10:	18c0      	addlt	r0, r0, r3
 8004c12:	4770      	bx	lr

08004c14 <_init>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr

08004c20 <_fini>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	bf00      	nop
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr
