
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800320c  0800320c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800320c  0800320c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800320c  0800320c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08003214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000094  080032a8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080032a8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ecc  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001472  00000000  00000000  00026f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00028bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001065a  00000000  00000000  000292e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2f1  00000000  00000000  0003993a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005acfa  00000000  00000000  00043c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009e925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  0009e978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003128 	.word	0x08003128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08003128 	.word	0x08003128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000a6e:	78bb      	ldrb	r3, [r7, #2]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d821      	bhi.n	8000ab8 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000a7a:	78ba      	ldrb	r2, [r7, #2]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	461a      	mov	r2, r3
 8000a86:	231f      	movs	r3, #31
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4013      	ands	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000a96:	78f9      	ldrb	r1, [r7, #3]
 8000a98:	78ba      	ldrb	r2, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab6:	e074      	b.n	8000ba2 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000ab8:	78bb      	ldrb	r3, [r7, #2]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	d823      	bhi.n	8000b06 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000ac4:	78bb      	ldrb	r3, [r7, #2]
 8000ac6:	1f5a      	subs	r2, r3, #5
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000ae2:	78f9      	ldrb	r1, [r7, #3]
 8000ae4:	78bb      	ldrb	r3, [r7, #2]
 8000ae6:	1f5a      	subs	r2, r3, #5
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
 8000b04:	e04d      	b.n	8000ba2 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000b06:	78bb      	ldrb	r3, [r7, #2]
 8000b08:	2b0e      	cmp	r3, #14
 8000b0a:	d825      	bhi.n	8000b58 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b10:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000b12:	78bb      	ldrb	r3, [r7, #2]
 8000b14:	f1a3 020a 	sub.w	r2, r3, #10
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	461a      	mov	r2, r3
 8000b22:	231f      	movs	r3, #31
 8000b24:	4093      	lsls	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000b32:	78f9      	ldrb	r1, [r7, #3]
 8000b34:	78bb      	ldrb	r3, [r7, #2]
 8000b36:	f1a3 020a 	sub.w	r2, r3, #10
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38
 8000b56:	e024      	b.n	8000ba2 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000b5e:	78bb      	ldrb	r3, [r7, #2]
 8000b60:	f1a3 020f 	sub.w	r2, r3, #15
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	231f      	movs	r3, #31
 8000b70:	4093      	lsls	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000b7e:	78f9      	ldrb	r1, [r7, #3]
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	f1a3 020f 	sub.w	r2, r3, #15
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b09      	cmp	r3, #9
 8000ba6:	d923      	bls.n	8000bf0 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	f1a3 020a 	sub.w	r2, r3, #10
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	2207      	movs	r2, #7
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	699a      	ldr	r2, [r3, #24]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6999      	ldr	r1, [r3, #24]
 8000bd4:	7878      	ldrb	r0, [r7, #1]
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	f1a3 020a 	sub.w	r2, r3, #10
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	fa00 f303 	lsl.w	r3, r0, r3
 8000be6:	ea41 0203 	orr.w	r2, r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000bee:	e01f      	b.n	8000c30 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	2238      	movs	r2, #56	; 0x38
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6959      	ldr	r1, [r3, #20]
 8000c1a:	7878      	ldrb	r0, [r7, #1]
 8000c1c:	78fa      	ldrb	r2, [r7, #3]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	fa00 f303 	lsl.w	r3, r0, r3
 8000c28:	ea41 0203 	orr.w	r2, r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	615a      	str	r2, [r3, #20]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f043 0204 	orr.w	r2, r3, #4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	b29b      	uxth	r3, r3
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e001      	b.n	8000c9a <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000cc0:	787a      	ldrb	r2, [r7, #1]
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	210f      	movs	r1, #15
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	8879      	ldrh	r1, [r7, #2]
 8000cf2:	08c9      	lsrs	r1, r1, #3
 8000cf4:	b289      	uxth	r1, r1
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	ea02 0103 	and.w	r1, r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f100 0208 	add.w	r2, r0, #8
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d64:	4b8b      	ldr	r3, [pc, #556]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d011      	beq.n	8000d98 <RCC_GetClocksFreq+0x5c>
 8000d74:	6a3b      	ldr	r3, [r7, #32]
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d837      	bhi.n	8000dea <RCC_GetClocksFreq+0xae>
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <RCC_GetClocksFreq+0x4c>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d004      	beq.n	8000d90 <RCC_GetClocksFreq+0x54>
 8000d86:	e030      	b.n	8000dea <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a83      	ldr	r2, [pc, #524]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000d8c:	601a      	str	r2, [r3, #0]
      break;
 8000d8e:	e030      	b.n	8000df2 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a81      	ldr	r2, [pc, #516]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000d94:	601a      	str	r2, [r3, #0]
      break;
 8000d96:	e02c      	b.n	8000df2 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000d98:	4b7e      	ldr	r3, [pc, #504]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000da0:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000da2:	4b7c      	ldr	r3, [pc, #496]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	3302      	adds	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <RCC_GetClocksFreq+0x260>)
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc4:	e00d      	b.n	8000de2 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000dc6:	4b73      	ldr	r3, [pc, #460]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000dd2:	4a71      	ldr	r2, [pc, #452]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de6:	601a      	str	r2, [r3, #0]
      break;
 8000de8:	e003      	b.n	8000df2 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a6a      	ldr	r2, [pc, #424]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000dee:	601a      	str	r2, [r3, #0]
      break;
 8000df0:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000df2:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dfa:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000e02:	4a67      	ldr	r2, [pc, #412]	; (8000fa0 <RCC_GetClocksFreq+0x264>)
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	40da      	lsrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e22:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000e2a:	4a5d      	ldr	r2, [pc, #372]	; (8000fa0 <RCC_GetClocksFreq+0x264>)
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	40da      	lsrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000e42:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e4a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	0adb      	lsrs	r3, r3, #11
 8000e50:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000e52:	4a53      	ldr	r2, [pc, #332]	; (8000fa0 <RCC_GetClocksFreq+0x264>)
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	40da      	lsrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000e72:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000e7a:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <RCC_GetClocksFreq+0x268>)
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	e003      	b.n	8000ea6 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000eae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000eb6:	4a3b      	ldr	r2, [pc, #236]	; (8000fa4 <RCC_GetClocksFreq+0x268>)
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	e003      	b.n	8000ee2 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d003      	beq.n	8000ef6 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	e003      	b.n	8000efe <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	d003      	beq.n	8000f12 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <RCC_GetClocksFreq+0x25c>)
 8000f0e:	61da      	str	r2, [r3, #28]
 8000f10:	e003      	b.n	8000f1a <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f26:	d10d      	bne.n	8000f44 <RCC_GetClocksFreq+0x208>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d108      	bne.n	8000f44 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d104      	bne.n	8000f44 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	005a      	lsls	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	621a      	str	r2, [r3, #32]
 8000f42:	e003      	b.n	8000f4c <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f58:	d10d      	bne.n	8000f76 <RCC_GetClocksFreq+0x23a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d108      	bne.n	8000f76 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d104      	bne.n	8000f76 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	005a      	lsls	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
 8000f74:	e003      	b.n	8000f7e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <RCC_GetClocksFreq+0x258>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10e      	bne.n	8000fa8 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
 8000f92:	e028      	b.n	8000fe6 <RCC_GetClocksFreq+0x2aa>
 8000f94:	40021000 	.word	0x40021000
 8000f98:	007a1200 	.word	0x007a1200
 8000f9c:	003d0900 	.word	0x003d0900
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	; (800115c <RCC_GetClocksFreq+0x420>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d104      	bne.n	8000fbe <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
 8000fbc:	e013      	b.n	8000fe6 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <RCC_GetClocksFreq+0x420>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d104      	bne.n	8000fd4 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8000fd2:	e008      	b.n	8000fe6 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000fd4:	4b61      	ldr	r3, [pc, #388]	; (800115c <RCC_GetClocksFreq+0x420>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d102      	bne.n	8000fe6 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a5f      	ldr	r2, [pc, #380]	; (8001160 <RCC_GetClocksFreq+0x424>)
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <RCC_GetClocksFreq+0x420>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffa:	e021      	b.n	8001040 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <RCC_GetClocksFreq+0x420>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d104      	bne.n	8001014 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
 8001012:	e015      	b.n	8001040 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001014:	4b51      	ldr	r3, [pc, #324]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001020:	d104      	bne.n	800102c <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
 800102a:	e009      	b.n	8001040 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <RCC_GetClocksFreq+0x420>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001038:	d102      	bne.n	8001040 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <RCC_GetClocksFreq+0x424>)
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001040:	4b46      	ldr	r3, [pc, #280]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
 8001054:	e021      	b.n	800109a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800105e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001062:	d104      	bne.n	800106e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
 800106c:	e015      	b.n	800109a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800107a:	d104      	bne.n	8001086 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
 8001084:	e009      	b.n	800109a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800108e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001092:	d102      	bne.n	800109a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a32      	ldr	r2, [pc, #200]	; (8001160 <RCC_GetClocksFreq+0x424>)
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <RCC_GetClocksFreq+0x420>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d104      	bne.n	80010b0 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e021      	b.n	80010f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <RCC_GetClocksFreq+0x420>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010bc:	d104      	bne.n	80010c8 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	e015      	b.n	80010f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <RCC_GetClocksFreq+0x420>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010d4:	d104      	bne.n	80010e0 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
 80010de:	e009      	b.n	80010f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <RCC_GetClocksFreq+0x420>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80010ec:	d102      	bne.n	80010f4 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <RCC_GetClocksFreq+0x424>)
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <RCC_GetClocksFreq+0x420>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d104      	bne.n	800110a <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001108:	e021      	b.n	800114e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <RCC_GetClocksFreq+0x420>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001116:	d104      	bne.n	8001122 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001120:	e015      	b.n	800114e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <RCC_GetClocksFreq+0x420>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800112a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800112e:	d104      	bne.n	800113a <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001138:	e009      	b.n	800114e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <RCC_GetClocksFreq+0x420>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001142:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001146:	d102      	bne.n	800114e <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <RCC_GetClocksFreq+0x424>)
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800114e:	bf00      	nop
 8001150:	372c      	adds	r7, #44	; 0x2c
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	007a1200 	.word	0x007a1200

08001164 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4613      	mov	r3, r2
 8001194:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d103      	bne.n	80011d2 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e005      	b.n	80011de <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d102      	bne.n	80011de <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3308      	adds	r3, #8
 80011dc:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80011f0:	e006      	b.n	8001200 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69da      	ldr	r2, [r3, #28]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e001      	b.n	8001230 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	2201      	movs	r2, #1
 8001252:	fa02 f103 	lsl.w	r1, r2, r3
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <NVIC_EnableIRQ+0x30>)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <uart_put_char+0x30>)
 8001286:	f7ff ff6d 	bl	8001164 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800128a:	bf00      	nop
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <uart_put_char+0x30>)
 8001290:	f7ff ffbc 	bl	800120c <USART_GetFlagStatus>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f8      	beq.n	800128c <uart_put_char+0x18>
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004400 	.word	0x40004400

080012a8 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e012      	b.n	80012e2 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	d102      	bne.n	80012ce <_write_r+0x26>
            uart_put_char('\r');
 80012c8:	200d      	movs	r0, #13
 80012ca:	f7ff ffd3 	bl	8001274 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffcc 	bl	8001274 <uart_put_char>
    for (n = 0; n < len; n++) {
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbe8      	blt.n	80012bc <_write_r+0x14>
    }

    return len;
 80012ea:	683b      	ldr	r3, [r7, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80012fc:	4b86      	ldr	r3, [pc, #536]	; (8001518 <uart_init+0x224>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fed5 	bl	80020b4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800130a:	4b83      	ldr	r3, [pc, #524]	; (8001518 <uart_init+0x224>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fece 	bl	80020b4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001318:	4b80      	ldr	r3, [pc, #512]	; (800151c <uart_init+0x228>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	4a7f      	ldr	r2, [pc, #508]	; (800151c <uart_init+0x228>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001322:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001324:	4b7d      	ldr	r3, [pc, #500]	; (800151c <uart_init+0x228>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a7c      	ldr	r2, [pc, #496]	; (800151c <uart_init+0x228>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800133e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001340:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800134a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800135a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800135e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800136a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800136e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800137a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800137e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800138a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800138e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001394:	889b      	ldrh	r3, [r3, #4]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800139c:	f023 030c 	bic.w	r3, r3, #12
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80013a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ac:	8892      	ldrh	r2, [r2, #4]
 80013ae:	b292      	uxth	r2, r2
 80013b0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80013b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013c0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80013c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013cc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80013d0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80013d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013e0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80013e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013ec:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80013f0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80013f2:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <uart_init+0x22c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <uart_init+0x22c>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <uart_init+0x22c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a47      	ldr	r2, [pc, #284]	; (8001520 <uart_init+0x22c>)
 8001404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001408:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <uart_init+0x22c>)
 800140c:	4a44      	ldr	r2, [pc, #272]	; (8001520 <uart_init+0x22c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001412:	4b43      	ldr	r3, [pc, #268]	; (8001520 <uart_init+0x22c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a42      	ldr	r2, [pc, #264]	; (8001520 <uart_init+0x22c>)
 8001418:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800141c:	f023 030c 	bic.w	r3, r3, #12
 8001420:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <uart_init+0x22c>)
 8001424:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <uart_init+0x22c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <uart_init+0x22c>)
 800142c:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <uart_init+0x22c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <uart_init+0x22c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <uart_init+0x22c>)
 8001438:	f043 030c 	orr.w	r3, r3, #12
 800143c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <uart_init+0x22c>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <uart_init+0x22c>)
 8001444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001448:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <uart_init+0x22c>)
 800144c:	4a34      	ldr	r2, [pc, #208]	; (8001520 <uart_init+0x22c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc6a 	bl	8000d3c <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <uart_init+0x22c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d010      	beq.n	800149a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147a:	005a      	lsls	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	fbb3 f2f2 	udiv	r2, r3, r2
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	fb01 f202 	mul.w	r2, r1, r2
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
 8001498:	e00d      	b.n	80014b6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800149a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	fb01 f202 	mul.w	r2, r1, r2
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014bc:	429a      	cmp	r2, r3
 80014be:	d302      	bcc.n	80014c6 <uart_init+0x1d2>
        divider++;
 80014c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c2:	3301      	adds	r3, #1
 80014c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <uart_init+0x22c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80014d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80014dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014de:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80014e2:	4013      	ands	r3, r2
 80014e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014e6:	4313      	orrs	r3, r2
 80014e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <uart_init+0x22c>)
 80014ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014ee:	b292      	uxth	r2, r2
 80014f0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <uart_init+0x22c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <uart_init+0x22c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80014fe:	2201      	movs	r2, #1
 8001500:	4908      	ldr	r1, [pc, #32]	; (8001524 <uart_init+0x230>)
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <uart_init+0x22c>)
 8001504:	f7ff fe40 	bl	8001188 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001508:	2026      	movs	r0, #38	; 0x26
 800150a:	f7ff fe99 	bl	8001240 <NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000030 	.word	0x20000030
 800151c:	40021000 	.word	0x40021000
 8001520:	40004400 	.word	0x40004400
 8001524:	00050105 	.word	0x00050105

08001528 <ADCConfig>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"

void ADCConfig(void) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 800152e:	4b54      	ldr	r3, [pc, #336]	; (8001680 <ADCConfig+0x158>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a53      	ldr	r2, [pc, #332]	; (8001680 <ADCConfig+0x158>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6153      	str	r3, [r2, #20]
	//PA0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800153a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001544:	f023 0303 	bic.w	r3, r3, #3
 8001548:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 800154a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800154e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8001556:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001560:	f023 0303 	bic.w	r3, r3, #3
 8001564:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8001566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//PA1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 8001576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001580:	f023 030c 	bic.w	r3, r3, #12
 8001584:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8001586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8001592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800159c:	f023 030c 	bic.w	r3, r3, #12
 80015a0:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 80015a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <ADCConfig+0x158>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <ADCConfig+0x158>)
 80015b8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <ADCConfig+0x158>)
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <ADCConfig+0x158>)
 80015c4:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 80015c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <ADCConfig+0x158>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <ADCConfig+0x158>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 80015d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 80015de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <ADCConfig+0x15c>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 80015ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015f8:	f023 030f 	bic.w	r3, r3, #15
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 80015fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e002      	b.n	800161a <ADCConfig+0xf2>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001620:	dbf8      	blt.n	8001614 <ADCConfig+0xec>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8001622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800162c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001630:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8001632:	bf00      	nop
 8001634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	dafa      	bge.n	8001634 <ADCConfig+0x10c>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	e002      	b.n	800164a <ADCConfig+0x122>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b63      	cmp	r3, #99	; 0x63
 800164e:	ddf9      	ble.n	8001644 <ADCConfig+0x11c>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8001650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8001660:	bf00      	nop
 8001662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f8      	beq.n	8001662 <ADCConfig+0x13a>

}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	fdffc007 	.word	0xfdffc007

08001688 <ADCread>:
int ADCread(){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 800168e:	2300      	movs	r3, #0
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001698:	f7ff f9d8 	bl	8000a4c <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 800169c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016a0:	f7ff facc 	bl	8000c3c <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 80016a4:	bf00      	nop
 80016a6:	2104      	movs	r1, #4
 80016a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016ac:	f7ff fae3 	bl	8000c76 <ADC_GetFlagStatus>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f7      	beq.n	80016a6 <ADCread+0x1e>

	uint16_t JoystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 80016b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016ba:	f7ff facf 	bl	8000c5c <ADC_GetConversionValue>
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]

	if(JoystickWay > 2048){
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c8:	d901      	bls.n	80016ce <ADCread+0x46>
		return 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e005      	b.n	80016da <ADCread+0x52>
	}
	if(JoystickWay < 2048){
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d4:	d201      	bcs.n	80016da <ADCread+0x52>
		return 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e7ff      	b.n	80016da <ADCread+0x52>
	}
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <BuzzConfig>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "buzz.h"

static int PRESCALER_VALUE = 9;
void BuzzConfig(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= 0x00000001; // Enable clock line to timer 2;
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <BuzzConfig+0xf0>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a39      	ldr	r2, [pc, #228]	; (80017d4 <BuzzConfig+0xf0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0000; // Disable timer
 80016f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f8:	2200      	movs	r2, #0
 80016fa:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 1000; // Set auto reload value
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = PRESCALER_VALUE; // Set pre-scaler value
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <BuzzConfig+0xf4>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	b292      	uxth	r2, r2
 8001710:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->CR1 |= 0x0001; // Enable timer
 8001712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	8013      	strh	r3, [r2, #0]
	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001734:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001754:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001770:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001774:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	f023 0308 	bic.w	r3, r3, #8
 8001784:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = 500; // Set duty cycle to 50 %
 8001796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c

	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable clock line for GPIO bank B
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <BuzzConfig+0xf0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <BuzzConfig+0xf0>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017aa:	6153      	str	r3, [r2, #20]
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <BuzzConfig+0xf8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <BuzzConfig+0xf8>)
 80017b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <BuzzConfig+0xf8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <BuzzConfig+0xf8>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	210a      	movs	r1, #10
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <BuzzConfig+0xf8>)
 80017ca:	f7ff fa6d 	bl	8000ca8 <GPIO_PinAFConfig>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	2000002c 	.word	0x2000002c
 80017dc:	48000400 	.word	0x48000400

080017e0 <buzz>:
void buzz(int32_t lyd, int32_t *c, int32_t *flag){
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b098      	sub	sp, #96	; 0x60
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	//0 - player losses a life 		27sec
	//1 - Play shoots a bullet		23sec
	//2 - player hits an enemy
	//3 - Player hits an storoid
	//4 - new level
	if(lyd == 0){
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d160      	bne.n	80018b4 <buzz+0xd4>
		TIM2->CR1 = 0x0000; // Disable timer
 80017f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
		for (i=1; i<=20; i++){
 80017fa:	2301      	movs	r3, #1
 80017fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017fe:	e006      	b.n	800180e <buzz+0x2e>

			printf("bob , %d\n",i);
 8001800:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001802:	48af      	ldr	r0, [pc, #700]	; (8001ac0 <buzz+0x2e0>)
 8001804:	f000 fc3e 	bl	8002084 <iprintf>
		for (i=1; i<=20; i++){
 8001808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180a:	3301      	adds	r3, #1
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001810:	2b14      	cmp	r3, #20
 8001812:	ddf5      	ble.n	8001800 <buzz+0x20>
		}
			int32_t freq = 500/i;
 8001814:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181a:	fb92 f3f3 	sdiv	r3, r2, r3
 800181e:	65bb      	str	r3, [r7, #88]	; 0x58
			int32_t PRESCALER_VALUE = 9;
 8001820:	2309      	movs	r3, #9
 8001822:	657b      	str	r3, [r7, #84]	; 0x54
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 8001824:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001826:	f7fe fe75 	bl	8000514 <__aeabi_i2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	a1a2      	add	r1, pc, #648	; (adr r1, 8001ab8 <buzz+0x2d8>)
 8001830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001834:	f7ff f802 	bl	800083c <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001842:	3301      	adds	r3, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe65 	bl	8000514 <__aeabi_i2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fff3 	bl	800083c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b98      	ldr	r3, [pc, #608]	; (8001ac4 <buzz+0x2e4>)
 8001864:	f7fe fd08 	bl	8000278 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f8cc 	bl	8000a0c <__aeabi_d2uiz>
 8001874:	4603      	mov	r3, r0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
			TIM2->ARR = reload; // Set auto reload value
 8001878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800187e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 800188a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6153      	str	r3, [r2, #20]
			printf("%d , %d\n",freq,i);
 800189a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800189c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800189e:	488a      	ldr	r0, [pc, #552]	; (8001ac8 <buzz+0x2e8>)
 80018a0:	f000 fbf0 	bl	8002084 <iprintf>
//			//wait 10ms
		printf("test , %d \n",lyd);
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	4889      	ldr	r0, [pc, #548]	; (8001acc <buzz+0x2ec>)
 80018a8:	f000 fbec 	bl	8002084 <iprintf>

		TIM2->CR1 = 0x0000; // Disable timer
 80018ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]

	}
	if(lyd == 1){
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d151      	bne.n	800195e <buzz+0x17e>
		for (i=1000; i<=1200; i++){
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018c0:	e045      	b.n	800194e <buzz+0x16e>
			int freq = i;
 80018c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			int PRESCALER_VALUE = 9;
 80018c6:	2309      	movs	r3, #9
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 80018ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80018cc:	f7fe fe22 	bl	8000514 <__aeabi_i2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	a178      	add	r1, pc, #480	; (adr r1, 8001ab8 <buzz+0x2d8>)
 80018d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018da:	f7fe ffaf 	bl	800083c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e8:	3301      	adds	r3, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe12 	bl	8000514 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe ffa0 	bl	800083c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <buzz+0x2e4>)
 800190a:	f7fe fcb5 	bl	8000278 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f879 	bl	8000a0c <__aeabi_d2uiz>
 800191a:	4603      	mov	r3, r0
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
			TIM2->ARR = reload; // Set auto reload value
 800191e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001924:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 8001930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6153      	str	r3, [r2, #20]
			printf("%d\n",freq);
 8001940:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001942:	4863      	ldr	r0, [pc, #396]	; (8001ad0 <buzz+0x2f0>)
 8001944:	f000 fb9e 	bl	8002084 <iprintf>
		for (i=1000; i<=1200; i++){
 8001948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800194a:	3301      	adds	r3, #1
 800194c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800194e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001950:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001954:	ddb5      	ble.n	80018c2 <buzz+0xe2>
			//wait 1ms
		}
		TIM2->CR1 = 0x0000; // Disable timer
 8001956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
	}
	if(lyd == 2){
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d153      	bne.n	8001a0c <buzz+0x22c>
		for (i=1; i<=10; i++){
 8001964:	2301      	movs	r3, #1
 8001966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001968:	e049      	b.n	80019fe <buzz+0x21e>
			int freq = 1000/i;
 800196a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001970:	fb92 f3f3 	sdiv	r3, r2, r3
 8001974:	643b      	str	r3, [r7, #64]	; 0x40
			int PRESCALER_VALUE = 9;
 8001976:	2309      	movs	r3, #9
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 800197a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800197c:	f7fe fdca 	bl	8000514 <__aeabi_i2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	a14c      	add	r1, pc, #304	; (adr r1, 8001ab8 <buzz+0x2d8>)
 8001986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800198a:	f7fe ff57 	bl	800083c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	3301      	adds	r3, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdba 	bl	8000514 <__aeabi_i2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe ff48 	bl	800083c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <buzz+0x2e4>)
 80019ba:	f7fe fc5d 	bl	8000278 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f821 	bl	8000a0c <__aeabi_d2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
			TIM2->ARR = reload; // Set auto reload value
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 80019d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 80019e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6153      	str	r3, [r2, #20]
			printf("%d\n",freq);
 80019f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019f2:	4837      	ldr	r0, [pc, #220]	; (8001ad0 <buzz+0x2f0>)
 80019f4:	f000 fb46 	bl	8002084 <iprintf>
		for (i=1; i<=10; i++){
 80019f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fa:	3301      	adds	r3, #1
 80019fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	ddb2      	ble.n	800196a <buzz+0x18a>
			//wait 20ms
		}
		TIM2->CR1 = 0x0000; // Disable timer
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a08:	2200      	movs	r2, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
	}
	if(lyd == 3){
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	f040 80ad 	bne.w	8001b6e <buzz+0x38e>
		for (i=50; i<=100; i++){
 8001a14:	2332      	movs	r3, #50	; 0x32
 8001a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a18:	e045      	b.n	8001aa6 <buzz+0x2c6>
			int freq = i;
 8001a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
			int PRESCALER_VALUE = 9;
 8001a1e:	2309      	movs	r3, #9
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 8001a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a24:	f7fe fd76 	bl	8000514 <__aeabi_i2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	a122      	add	r1, pc, #136	; (adr r1, 8001ab8 <buzz+0x2d8>)
 8001a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a32:	f7fe ff03 	bl	800083c <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd66 	bl	8000514 <__aeabi_i2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fef4 	bl	800083c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <buzz+0x2e4>)
 8001a62:	f7fe fc09 	bl	8000278 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7fe ffcd 	bl	8000a0c <__aeabi_d2uiz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	623b      	str	r3, [r7, #32]
			TIM2->ARR = reload; // Set auto reload value
 8001a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 8001a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6153      	str	r3, [r2, #20]
			printf("%d\n",freq);
 8001a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <buzz+0x2f0>)
 8001a9c:	f000 faf2 	bl	8002084 <iprintf>
		for (i=50; i<=100; i++){
 8001aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	ddb6      	ble.n	8001a1a <buzz+0x23a>
			//wait 10ms
		}
		for (i=100; i<=50; i++){
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ab0:	e056      	b.n	8001b60 <buzz+0x380>
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	418e8480 	.word	0x418e8480
 8001ac0:	08003140 	.word	0x08003140
 8001ac4:	3ff00000 	.word	0x3ff00000
 8001ac8:	0800314c 	.word	0x0800314c
 8001acc:	08003158 	.word	0x08003158
 8001ad0:	08003164 	.word	0x08003164
			int freq = i;
 8001ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
			int PRESCALER_VALUE = 9;
 8001ad8:	2309      	movs	r3, #9
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 8001adc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ade:	f7fe fd19 	bl	8000514 <__aeabi_i2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	a150      	add	r1, pc, #320	; (adr r1, 8001c28 <buzz+0x448>)
 8001ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aec:	f7fe fea6 	bl	800083c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	3301      	adds	r3, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd09 	bl	8000514 <__aeabi_i2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fe97 	bl	800083c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <buzz+0x450>)
 8001b1c:	f7fe fbac 	bl	8000278 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe ff70 	bl	8000a0c <__aeabi_d2uiz>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			TIM2->ARR = reload; // Set auto reload value
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001b38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 8001b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6153      	str	r3, [r2, #20]
			printf("%d\n",freq);
 8001b52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b54:	4837      	ldr	r0, [pc, #220]	; (8001c34 <buzz+0x454>)
 8001b56:	f000 fa95 	bl	8002084 <iprintf>
		for (i=100; i<=50; i++){
 8001b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	2b32      	cmp	r3, #50	; 0x32
 8001b64:	ddb6      	ble.n	8001ad4 <buzz+0x2f4>
			//wait 5ms
		}
		TIM2->CR1 = 0x0000; // Disable timer
 8001b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
	}
	if(lyd == 4){
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d153      	bne.n	8001c1c <buzz+0x43c>
		for (i=1; i<=10; i++){
 8001b74:	2301      	movs	r3, #1
 8001b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b78:	e049      	b.n	8001c0e <buzz+0x42e>
			int freq = 1000/i;
 8001b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b84:	61fb      	str	r3, [r7, #28]
			int PRESCALER_VALUE = 9;
 8001b86:	2309      	movs	r3, #9
 8001b88:	61bb      	str	r3, [r7, #24]
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 8001b8a:	69f8      	ldr	r0, [r7, #28]
 8001b8c:	f7fe fcc2 	bl	8000514 <__aeabi_i2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	a124      	add	r1, pc, #144	; (adr r1, 8001c28 <buzz+0x448>)
 8001b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9a:	f7fe fe4f 	bl	800083c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcb2 	bl	8000514 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fe40 	bl	800083c <__aeabi_ddiv>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <buzz+0x450>)
 8001bca:	f7fe fb55 	bl	8000278 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff19 	bl	8000a0c <__aeabi_d2uiz>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	617b      	str	r3, [r7, #20]
			TIM2->ARR = reload; // Set auto reload value
 8001bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6153      	str	r3, [r2, #20]
			printf("%d\n",freq);
 8001c00:	69f9      	ldr	r1, [r7, #28]
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <buzz+0x454>)
 8001c04:	f000 fa3e 	bl	8002084 <iprintf>
		for (i=1; i<=10; i++){
 8001c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	ddb2      	ble.n	8001b7a <buzz+0x39a>
			//wait 20ms
		}
		TIM2->CR1 = 0x0000; // Disable timer
 8001c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
	}
			


}
 8001c1c:	bf00      	nop
 8001c1e:	3760      	adds	r7, #96	; 0x60
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	f3af 8000 	nop.w
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	418e8480 	.word	0x418e8480
 8001c30:	3ff00000 	.word	0x3ff00000
 8001c34:	08003164 	.word	0x08003164

08001c38 <TIM1_BRK_TIM15_IRQHandler>:
static int32_t c = 0<<8;



//Initialicering af Programmer Start
void TIM1_BRK_TIM15_IRQHandler(void) {
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	c=c+(1<<8);
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <TIM1_BRK_TIM15_IRQHandler+0x2c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <TIM1_BRK_TIM15_IRQHandler+0x2c>)
 8001c46:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~0x0001; // Clear interrupt bit
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6113      	str	r3, [r2, #16]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200000b4 	.word	0x200000b4

08001c68 <main>:
//Initialicering af Programmer Slut


int main(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	//Initialicering af forbindelse
	uart_init(115200);
 8001c6e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001c72:	f7ff fb3f 	bl	80012f4 <uart_init>


	//Initialicering af Programmer i main Start
	ADCConfig();
 8001c76:	f7ff fc57 	bl	8001528 <ADCConfig>
	BuzzConfig();
 8001c7a:	f7ff fd33 	bl	80016e4 <BuzzConfig>
	clockInit();
 8001c7e:	f000 f977 	bl	8001f70 <clockInit>


	//Hentning af Statisk info Slut

	//Klad af funktioner
	buzz(5,&c, &flag);
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <main+0x50>)
 8001c84:	490d      	ldr	r1, [pc, #52]	; (8001cbc <main+0x54>)
 8001c86:	2005      	movs	r0, #5
 8001c88:	f7ff fdaa 	bl	80017e0 <buzz>
	TIM2->CR1 = 0x0000; // Disable timer
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
	int i;
	for (i=1; i<=20; i++){
 8001c94:	2301      	movs	r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	e006      	b.n	8001ca8 <main+0x40>

		printf("bob , %d\n",i);
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <main+0x58>)
 8001c9e:	f000 f9f1 	bl	8002084 <iprintf>
	for (i=1; i<=20; i++){
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b14      	cmp	r3, #20
 8001cac:	ddf5      	ble.n	8001c9a <main+0x32>
	}

	while(1){
		//Hentning af kontinuerlig info Start
		int JoystickWay = ADCread();
 8001cae:	f7ff fceb 	bl	8001688 <ADCread>
 8001cb2:	6038      	str	r0, [r7, #0]
	while(1){
 8001cb4:	e7fb      	b.n	8001cae <main+0x46>
 8001cb6:	bf00      	nop
 8001cb8:	200000b0 	.word	0x200000b0
 8001cbc:	200000b4 	.word	0x200000b4
 8001cc0:	08003168 	.word	0x08003168

08001cc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00a      	b.n	8001cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd6:	f3af 8000 	nop.w
 8001cda:	4601      	mov	r1, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf0      	blt.n	8001cd6 <_read+0x12>
	}

return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_isatty>:

int _isatty(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x50>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x16>
		heap_end = &end;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <_sbrk+0x50>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <_sbrk+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <_sbrk+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <_sbrk+0x50>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	466a      	mov	r2, sp
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d907      	bls.n	8001da2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d92:	f000 f945 	bl	8002020 <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	220c      	movs	r2, #12
 8001d9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	e006      	b.n	8001db0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <_sbrk+0x50>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <_sbrk+0x50>)
 8001dac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200000b8 	.word	0x200000b8
 8001dbc:	200000d0 	.word	0x200000d0

08001dc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <SystemInit+0x84>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <SystemInit+0x84>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <SystemInit+0x88>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <SystemInit+0x88>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <SystemInit+0x88>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	; (8001e48 <SystemInit+0x88>)
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <SystemInit+0x8c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <SystemInit+0x88>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <SystemInit+0x88>)
 8001df2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <SystemInit+0x88>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <SystemInit+0x88>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <SystemInit+0x88>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <SystemInit+0x88>)
 8001e0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e12:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <SystemInit+0x88>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <SystemInit+0x88>)
 8001e1a:	f023 030f 	bic.w	r3, r3, #15
 8001e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <SystemInit+0x88>)
 8001e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e24:	4908      	ldr	r1, [pc, #32]	; (8001e48 <SystemInit+0x88>)
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <SystemInit+0x90>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x88>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e32:	f000 f80f 	bl	8001e54 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <SystemInit+0x84>)
 8001e38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3c:	609a      	str	r2, [r3, #8]
#endif  
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	f87fc00c 	.word	0xf87fc00c
 8001e50:	ff00fccc 	.word	0xff00fccc

08001e54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <SetSysClock+0x8c>)
 8001e5a:	2212      	movs	r2, #18
 8001e5c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <SetSysClock+0x90>)
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <SetSysClock+0x90>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <SetSysClock+0x90>)
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <SetSysClock+0x90>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <SetSysClock+0x90>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <SetSysClock+0x90>)
 8001e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e78:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <SetSysClock+0x90>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <SetSysClock+0x90>)
 8001e80:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001e84:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <SetSysClock+0x90>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <SetSysClock+0x90>)
 8001e8c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001e90:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <SetSysClock+0x90>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <SetSysClock+0x90>)
 8001e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001e9e:	bf00      	nop
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SetSysClock+0x90>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f9      	beq.n	8001ea0 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <SetSysClock+0x90>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <SetSysClock+0x90>)
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SetSysClock+0x90>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <SetSysClock+0x90>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001ec4:	bf00      	nop
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <SetSysClock+0x90>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d1f9      	bne.n	8001ec6 <SetSysClock+0x72>
  {
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <NVIC_EnableIRQ>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2201      	movs	r2, #1
 8001efa:	fa02 f103 	lsl.w	r1, r2, r3
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <NVIC_EnableIRQ+0x30>)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0b      	bge.n	8001f48 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <NVIC_SetPriority+0x4c>)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	3b04      	subs	r3, #4
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001f46:	e009      	b.n	8001f5c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <NVIC_SetPriority+0x50>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <clockInit>:
#include "timer.h"



void clockInit(){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 2;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <clockInit+0x54>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <clockInit+0x54>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7e:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0x0000; TIM15->ARR = 63999; // Set auto reload value
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <clockInit+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <clockInit+0x58>)
 8001f88:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 9; // Set pre-scaler value
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <clockInit+0x58>)
 8001f90:	2209      	movs	r2, #9
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 0x0001; // Enable timer interrupt
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <clockInit+0x58>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <clockInit+0x58>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2018      	movs	r0, #24
 8001fa4:	f7ff ffba 	bl	8001f1c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fa8:	2018      	movs	r0, #24
 8001faa:	f7ff ff9d 	bl	8001ee8 <NVIC_EnableIRQ>
	TIM15->CR1 |= 0x0001; // Enable timer
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <clockInit+0x58>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <clockInit+0x58>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40014000 	.word	0x40014000

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ff6:	f7ff fee3 	bl	8001dc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f000 f817 	bl	800202c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff fe33 	bl	8001c68 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002010:	08003214 	.word	0x08003214
  ldr r2, =_sbss
 8002014:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002018:	200000cc 	.word	0x200000cc

0800201c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_2_IRQHandler>
	...

08002020 <__errno>:
 8002020:	4b01      	ldr	r3, [pc, #4]	; (8002028 <__errno+0x8>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000030 	.word	0x20000030

0800202c <__libc_init_array>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4d0d      	ldr	r5, [pc, #52]	; (8002064 <__libc_init_array+0x38>)
 8002030:	4c0d      	ldr	r4, [pc, #52]	; (8002068 <__libc_init_array+0x3c>)
 8002032:	1b64      	subs	r4, r4, r5
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	2600      	movs	r6, #0
 8002038:	42a6      	cmp	r6, r4
 800203a:	d109      	bne.n	8002050 <__libc_init_array+0x24>
 800203c:	4d0b      	ldr	r5, [pc, #44]	; (800206c <__libc_init_array+0x40>)
 800203e:	4c0c      	ldr	r4, [pc, #48]	; (8002070 <__libc_init_array+0x44>)
 8002040:	f001 f872 	bl	8003128 <_init>
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	2600      	movs	r6, #0
 800204a:	42a6      	cmp	r6, r4
 800204c:	d105      	bne.n	800205a <__libc_init_array+0x2e>
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	f855 3b04 	ldr.w	r3, [r5], #4
 8002054:	4798      	blx	r3
 8002056:	3601      	adds	r6, #1
 8002058:	e7ee      	b.n	8002038 <__libc_init_array+0xc>
 800205a:	f855 3b04 	ldr.w	r3, [r5], #4
 800205e:	4798      	blx	r3
 8002060:	3601      	adds	r6, #1
 8002062:	e7f2      	b.n	800204a <__libc_init_array+0x1e>
 8002064:	0800320c 	.word	0x0800320c
 8002068:	0800320c 	.word	0x0800320c
 800206c:	0800320c 	.word	0x0800320c
 8002070:	08003210 	.word	0x08003210

08002074 <memset>:
 8002074:	4402      	add	r2, r0
 8002076:	4603      	mov	r3, r0
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <memset+0xa>
 800207c:	4770      	bx	lr
 800207e:	f803 1b01 	strb.w	r1, [r3], #1
 8002082:	e7f9      	b.n	8002078 <memset+0x4>

08002084 <iprintf>:
 8002084:	b40f      	push	{r0, r1, r2, r3}
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <iprintf+0x2c>)
 8002088:	b513      	push	{r0, r1, r4, lr}
 800208a:	681c      	ldr	r4, [r3, #0]
 800208c:	b124      	cbz	r4, 8002098 <iprintf+0x14>
 800208e:	69a3      	ldr	r3, [r4, #24]
 8002090:	b913      	cbnz	r3, 8002098 <iprintf+0x14>
 8002092:	4620      	mov	r0, r4
 8002094:	f000 f9f6 	bl	8002484 <__sinit>
 8002098:	ab05      	add	r3, sp, #20
 800209a:	9a04      	ldr	r2, [sp, #16]
 800209c:	68a1      	ldr	r1, [r4, #8]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	4620      	mov	r0, r4
 80020a2:	f000 fc07 	bl	80028b4 <_vfiprintf_r>
 80020a6:	b002      	add	sp, #8
 80020a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ac:	b004      	add	sp, #16
 80020ae:	4770      	bx	lr
 80020b0:	20000030 	.word	0x20000030

080020b4 <setbuf>:
 80020b4:	2900      	cmp	r1, #0
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	bf0c      	ite	eq
 80020bc:	2202      	moveq	r2, #2
 80020be:	2200      	movne	r2, #0
 80020c0:	f000 b800 	b.w	80020c4 <setvbuf>

080020c4 <setvbuf>:
 80020c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020c8:	461d      	mov	r5, r3
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <setvbuf+0x17c>)
 80020cc:	681f      	ldr	r7, [r3, #0]
 80020ce:	4604      	mov	r4, r0
 80020d0:	460e      	mov	r6, r1
 80020d2:	4690      	mov	r8, r2
 80020d4:	b127      	cbz	r7, 80020e0 <setvbuf+0x1c>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	b913      	cbnz	r3, 80020e0 <setvbuf+0x1c>
 80020da:	4638      	mov	r0, r7
 80020dc:	f000 f9d2 	bl	8002484 <__sinit>
 80020e0:	4b58      	ldr	r3, [pc, #352]	; (8002244 <setvbuf+0x180>)
 80020e2:	429c      	cmp	r4, r3
 80020e4:	d167      	bne.n	80021b6 <setvbuf+0xf2>
 80020e6:	687c      	ldr	r4, [r7, #4]
 80020e8:	f1b8 0f02 	cmp.w	r8, #2
 80020ec:	d006      	beq.n	80020fc <setvbuf+0x38>
 80020ee:	f1b8 0f01 	cmp.w	r8, #1
 80020f2:	f200 809f 	bhi.w	8002234 <setvbuf+0x170>
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	f2c0 809c 	blt.w	8002234 <setvbuf+0x170>
 80020fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020fe:	07db      	lsls	r3, r3, #31
 8002100:	d405      	bmi.n	800210e <setvbuf+0x4a>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	0598      	lsls	r0, r3, #22
 8002106:	d402      	bmi.n	800210e <setvbuf+0x4a>
 8002108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800210a:	f000 fa59 	bl	80025c0 <__retarget_lock_acquire_recursive>
 800210e:	4621      	mov	r1, r4
 8002110:	4638      	mov	r0, r7
 8002112:	f000 f923 	bl	800235c <_fflush_r>
 8002116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002118:	b141      	cbz	r1, 800212c <setvbuf+0x68>
 800211a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800211e:	4299      	cmp	r1, r3
 8002120:	d002      	beq.n	8002128 <setvbuf+0x64>
 8002122:	4638      	mov	r0, r7
 8002124:	f000 fabc 	bl	80026a0 <_free_r>
 8002128:	2300      	movs	r3, #0
 800212a:	6363      	str	r3, [r4, #52]	; 0x34
 800212c:	2300      	movs	r3, #0
 800212e:	61a3      	str	r3, [r4, #24]
 8002130:	6063      	str	r3, [r4, #4]
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	0619      	lsls	r1, r3, #24
 8002136:	d503      	bpl.n	8002140 <setvbuf+0x7c>
 8002138:	6921      	ldr	r1, [r4, #16]
 800213a:	4638      	mov	r0, r7
 800213c:	f000 fab0 	bl	80026a0 <_free_r>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	f1b8 0f02 	cmp.w	r8, #2
 800214e:	81a3      	strh	r3, [r4, #12]
 8002150:	d06c      	beq.n	800222c <setvbuf+0x168>
 8002152:	ab01      	add	r3, sp, #4
 8002154:	466a      	mov	r2, sp
 8002156:	4621      	mov	r1, r4
 8002158:	4638      	mov	r0, r7
 800215a:	f000 fa33 	bl	80025c4 <__swhatbuf_r>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	4318      	orrs	r0, r3
 8002162:	81a0      	strh	r0, [r4, #12]
 8002164:	2d00      	cmp	r5, #0
 8002166:	d130      	bne.n	80021ca <setvbuf+0x106>
 8002168:	9d00      	ldr	r5, [sp, #0]
 800216a:	4628      	mov	r0, r5
 800216c:	f000 fa90 	bl	8002690 <malloc>
 8002170:	4606      	mov	r6, r0
 8002172:	2800      	cmp	r0, #0
 8002174:	d155      	bne.n	8002222 <setvbuf+0x15e>
 8002176:	f8dd 9000 	ldr.w	r9, [sp]
 800217a:	45a9      	cmp	r9, r5
 800217c:	d14a      	bne.n	8002214 <setvbuf+0x150>
 800217e:	f04f 35ff 	mov.w	r5, #4294967295
 8002182:	2200      	movs	r2, #0
 8002184:	60a2      	str	r2, [r4, #8]
 8002186:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800218a:	6022      	str	r2, [r4, #0]
 800218c:	6122      	str	r2, [r4, #16]
 800218e:	2201      	movs	r2, #1
 8002190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002194:	6162      	str	r2, [r4, #20]
 8002196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	07d2      	lsls	r2, r2, #31
 800219e:	81a3      	strh	r3, [r4, #12]
 80021a0:	d405      	bmi.n	80021ae <setvbuf+0xea>
 80021a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80021a6:	d102      	bne.n	80021ae <setvbuf+0xea>
 80021a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021aa:	f000 fa0a 	bl	80025c2 <__retarget_lock_release_recursive>
 80021ae:	4628      	mov	r0, r5
 80021b0:	b003      	add	sp, #12
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <setvbuf+0x184>)
 80021b8:	429c      	cmp	r4, r3
 80021ba:	d101      	bne.n	80021c0 <setvbuf+0xfc>
 80021bc:	68bc      	ldr	r4, [r7, #8]
 80021be:	e793      	b.n	80020e8 <setvbuf+0x24>
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <setvbuf+0x188>)
 80021c2:	429c      	cmp	r4, r3
 80021c4:	bf08      	it	eq
 80021c6:	68fc      	ldreq	r4, [r7, #12]
 80021c8:	e78e      	b.n	80020e8 <setvbuf+0x24>
 80021ca:	2e00      	cmp	r6, #0
 80021cc:	d0cd      	beq.n	800216a <setvbuf+0xa6>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	b913      	cbnz	r3, 80021d8 <setvbuf+0x114>
 80021d2:	4638      	mov	r0, r7
 80021d4:	f000 f956 	bl	8002484 <__sinit>
 80021d8:	f1b8 0f01 	cmp.w	r8, #1
 80021dc:	bf08      	it	eq
 80021de:	89a3      	ldrheq	r3, [r4, #12]
 80021e0:	6026      	str	r6, [r4, #0]
 80021e2:	bf04      	itt	eq
 80021e4:	f043 0301 	orreq.w	r3, r3, #1
 80021e8:	81a3      	strheq	r3, [r4, #12]
 80021ea:	89a2      	ldrh	r2, [r4, #12]
 80021ec:	f012 0308 	ands.w	r3, r2, #8
 80021f0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80021f4:	d01c      	beq.n	8002230 <setvbuf+0x16c>
 80021f6:	07d3      	lsls	r3, r2, #31
 80021f8:	bf41      	itttt	mi
 80021fa:	2300      	movmi	r3, #0
 80021fc:	426d      	negmi	r5, r5
 80021fe:	60a3      	strmi	r3, [r4, #8]
 8002200:	61a5      	strmi	r5, [r4, #24]
 8002202:	bf58      	it	pl
 8002204:	60a5      	strpl	r5, [r4, #8]
 8002206:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002208:	f015 0501 	ands.w	r5, r5, #1
 800220c:	d115      	bne.n	800223a <setvbuf+0x176>
 800220e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002212:	e7c8      	b.n	80021a6 <setvbuf+0xe2>
 8002214:	4648      	mov	r0, r9
 8002216:	f000 fa3b 	bl	8002690 <malloc>
 800221a:	4606      	mov	r6, r0
 800221c:	2800      	cmp	r0, #0
 800221e:	d0ae      	beq.n	800217e <setvbuf+0xba>
 8002220:	464d      	mov	r5, r9
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	81a3      	strh	r3, [r4, #12]
 800222a:	e7d0      	b.n	80021ce <setvbuf+0x10a>
 800222c:	2500      	movs	r5, #0
 800222e:	e7a8      	b.n	8002182 <setvbuf+0xbe>
 8002230:	60a3      	str	r3, [r4, #8]
 8002232:	e7e8      	b.n	8002206 <setvbuf+0x142>
 8002234:	f04f 35ff 	mov.w	r5, #4294967295
 8002238:	e7b9      	b.n	80021ae <setvbuf+0xea>
 800223a:	2500      	movs	r5, #0
 800223c:	e7b7      	b.n	80021ae <setvbuf+0xea>
 800223e:	bf00      	nop
 8002240:	20000030 	.word	0x20000030
 8002244:	08003198 	.word	0x08003198
 8002248:	080031b8 	.word	0x080031b8
 800224c:	08003178 	.word	0x08003178

08002250 <__sflush_r>:
 8002250:	898a      	ldrh	r2, [r1, #12]
 8002252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002256:	4605      	mov	r5, r0
 8002258:	0710      	lsls	r0, r2, #28
 800225a:	460c      	mov	r4, r1
 800225c:	d458      	bmi.n	8002310 <__sflush_r+0xc0>
 800225e:	684b      	ldr	r3, [r1, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	dc05      	bgt.n	8002270 <__sflush_r+0x20>
 8002264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	dc02      	bgt.n	8002270 <__sflush_r+0x20>
 800226a:	2000      	movs	r0, #0
 800226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002272:	2e00      	cmp	r6, #0
 8002274:	d0f9      	beq.n	800226a <__sflush_r+0x1a>
 8002276:	2300      	movs	r3, #0
 8002278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800227c:	682f      	ldr	r7, [r5, #0]
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	d032      	beq.n	80022e8 <__sflush_r+0x98>
 8002282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002284:	89a3      	ldrh	r3, [r4, #12]
 8002286:	075a      	lsls	r2, r3, #29
 8002288:	d505      	bpl.n	8002296 <__sflush_r+0x46>
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	1ac0      	subs	r0, r0, r3
 800228e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002290:	b10b      	cbz	r3, 8002296 <__sflush_r+0x46>
 8002292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002294:	1ac0      	subs	r0, r0, r3
 8002296:	2300      	movs	r3, #0
 8002298:	4602      	mov	r2, r0
 800229a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800229c:	6a21      	ldr	r1, [r4, #32]
 800229e:	4628      	mov	r0, r5
 80022a0:	47b0      	blx	r6
 80022a2:	1c43      	adds	r3, r0, #1
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	d106      	bne.n	80022b6 <__sflush_r+0x66>
 80022a8:	6829      	ldr	r1, [r5, #0]
 80022aa:	291d      	cmp	r1, #29
 80022ac:	d82c      	bhi.n	8002308 <__sflush_r+0xb8>
 80022ae:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <__sflush_r+0x108>)
 80022b0:	40ca      	lsrs	r2, r1
 80022b2:	07d6      	lsls	r6, r2, #31
 80022b4:	d528      	bpl.n	8002308 <__sflush_r+0xb8>
 80022b6:	2200      	movs	r2, #0
 80022b8:	6062      	str	r2, [r4, #4]
 80022ba:	04d9      	lsls	r1, r3, #19
 80022bc:	6922      	ldr	r2, [r4, #16]
 80022be:	6022      	str	r2, [r4, #0]
 80022c0:	d504      	bpl.n	80022cc <__sflush_r+0x7c>
 80022c2:	1c42      	adds	r2, r0, #1
 80022c4:	d101      	bne.n	80022ca <__sflush_r+0x7a>
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	b903      	cbnz	r3, 80022cc <__sflush_r+0x7c>
 80022ca:	6560      	str	r0, [r4, #84]	; 0x54
 80022cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ce:	602f      	str	r7, [r5, #0]
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d0ca      	beq.n	800226a <__sflush_r+0x1a>
 80022d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022d8:	4299      	cmp	r1, r3
 80022da:	d002      	beq.n	80022e2 <__sflush_r+0x92>
 80022dc:	4628      	mov	r0, r5
 80022de:	f000 f9df 	bl	80026a0 <_free_r>
 80022e2:	2000      	movs	r0, #0
 80022e4:	6360      	str	r0, [r4, #52]	; 0x34
 80022e6:	e7c1      	b.n	800226c <__sflush_r+0x1c>
 80022e8:	6a21      	ldr	r1, [r4, #32]
 80022ea:	2301      	movs	r3, #1
 80022ec:	4628      	mov	r0, r5
 80022ee:	47b0      	blx	r6
 80022f0:	1c41      	adds	r1, r0, #1
 80022f2:	d1c7      	bne.n	8002284 <__sflush_r+0x34>
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0c4      	beq.n	8002284 <__sflush_r+0x34>
 80022fa:	2b1d      	cmp	r3, #29
 80022fc:	d001      	beq.n	8002302 <__sflush_r+0xb2>
 80022fe:	2b16      	cmp	r3, #22
 8002300:	d101      	bne.n	8002306 <__sflush_r+0xb6>
 8002302:	602f      	str	r7, [r5, #0]
 8002304:	e7b1      	b.n	800226a <__sflush_r+0x1a>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	e7ad      	b.n	800226c <__sflush_r+0x1c>
 8002310:	690f      	ldr	r7, [r1, #16]
 8002312:	2f00      	cmp	r7, #0
 8002314:	d0a9      	beq.n	800226a <__sflush_r+0x1a>
 8002316:	0793      	lsls	r3, r2, #30
 8002318:	680e      	ldr	r6, [r1, #0]
 800231a:	bf08      	it	eq
 800231c:	694b      	ldreq	r3, [r1, #20]
 800231e:	600f      	str	r7, [r1, #0]
 8002320:	bf18      	it	ne
 8002322:	2300      	movne	r3, #0
 8002324:	eba6 0807 	sub.w	r8, r6, r7
 8002328:	608b      	str	r3, [r1, #8]
 800232a:	f1b8 0f00 	cmp.w	r8, #0
 800232e:	dd9c      	ble.n	800226a <__sflush_r+0x1a>
 8002330:	6a21      	ldr	r1, [r4, #32]
 8002332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002334:	4643      	mov	r3, r8
 8002336:	463a      	mov	r2, r7
 8002338:	4628      	mov	r0, r5
 800233a:	47b0      	blx	r6
 800233c:	2800      	cmp	r0, #0
 800233e:	dc06      	bgt.n	800234e <__sflush_r+0xfe>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	e78e      	b.n	800226c <__sflush_r+0x1c>
 800234e:	4407      	add	r7, r0
 8002350:	eba8 0800 	sub.w	r8, r8, r0
 8002354:	e7e9      	b.n	800232a <__sflush_r+0xda>
 8002356:	bf00      	nop
 8002358:	20400001 	.word	0x20400001

0800235c <_fflush_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	690b      	ldr	r3, [r1, #16]
 8002360:	4605      	mov	r5, r0
 8002362:	460c      	mov	r4, r1
 8002364:	b913      	cbnz	r3, 800236c <_fflush_r+0x10>
 8002366:	2500      	movs	r5, #0
 8002368:	4628      	mov	r0, r5
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	b118      	cbz	r0, 8002376 <_fflush_r+0x1a>
 800236e:	6983      	ldr	r3, [r0, #24]
 8002370:	b90b      	cbnz	r3, 8002376 <_fflush_r+0x1a>
 8002372:	f000 f887 	bl	8002484 <__sinit>
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <_fflush_r+0x6c>)
 8002378:	429c      	cmp	r4, r3
 800237a:	d11b      	bne.n	80023b4 <_fflush_r+0x58>
 800237c:	686c      	ldr	r4, [r5, #4]
 800237e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ef      	beq.n	8002366 <_fflush_r+0xa>
 8002386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002388:	07d0      	lsls	r0, r2, #31
 800238a:	d404      	bmi.n	8002396 <_fflush_r+0x3a>
 800238c:	0599      	lsls	r1, r3, #22
 800238e:	d402      	bmi.n	8002396 <_fflush_r+0x3a>
 8002390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002392:	f000 f915 	bl	80025c0 <__retarget_lock_acquire_recursive>
 8002396:	4628      	mov	r0, r5
 8002398:	4621      	mov	r1, r4
 800239a:	f7ff ff59 	bl	8002250 <__sflush_r>
 800239e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023a0:	07da      	lsls	r2, r3, #31
 80023a2:	4605      	mov	r5, r0
 80023a4:	d4e0      	bmi.n	8002368 <_fflush_r+0xc>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	059b      	lsls	r3, r3, #22
 80023aa:	d4dd      	bmi.n	8002368 <_fflush_r+0xc>
 80023ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ae:	f000 f908 	bl	80025c2 <__retarget_lock_release_recursive>
 80023b2:	e7d9      	b.n	8002368 <_fflush_r+0xc>
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <_fflush_r+0x70>)
 80023b6:	429c      	cmp	r4, r3
 80023b8:	d101      	bne.n	80023be <_fflush_r+0x62>
 80023ba:	68ac      	ldr	r4, [r5, #8]
 80023bc:	e7df      	b.n	800237e <_fflush_r+0x22>
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <_fflush_r+0x74>)
 80023c0:	429c      	cmp	r4, r3
 80023c2:	bf08      	it	eq
 80023c4:	68ec      	ldreq	r4, [r5, #12]
 80023c6:	e7da      	b.n	800237e <_fflush_r+0x22>
 80023c8:	08003198 	.word	0x08003198
 80023cc:	080031b8 	.word	0x080031b8
 80023d0:	08003178 	.word	0x08003178

080023d4 <std>:
 80023d4:	2300      	movs	r3, #0
 80023d6:	b510      	push	{r4, lr}
 80023d8:	4604      	mov	r4, r0
 80023da:	e9c0 3300 	strd	r3, r3, [r0]
 80023de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023e2:	6083      	str	r3, [r0, #8]
 80023e4:	8181      	strh	r1, [r0, #12]
 80023e6:	6643      	str	r3, [r0, #100]	; 0x64
 80023e8:	81c2      	strh	r2, [r0, #14]
 80023ea:	6183      	str	r3, [r0, #24]
 80023ec:	4619      	mov	r1, r3
 80023ee:	2208      	movs	r2, #8
 80023f0:	305c      	adds	r0, #92	; 0x5c
 80023f2:	f7ff fe3f 	bl	8002074 <memset>
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <std+0x38>)
 80023f8:	6263      	str	r3, [r4, #36]	; 0x24
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <std+0x3c>)
 80023fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <std+0x40>)
 8002400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <std+0x44>)
 8002404:	6224      	str	r4, [r4, #32]
 8002406:	6323      	str	r3, [r4, #48]	; 0x30
 8002408:	bd10      	pop	{r4, pc}
 800240a:	bf00      	nop
 800240c:	08002e5d 	.word	0x08002e5d
 8002410:	08002e7f 	.word	0x08002e7f
 8002414:	08002eb7 	.word	0x08002eb7
 8002418:	08002edb 	.word	0x08002edb

0800241c <_cleanup_r>:
 800241c:	4901      	ldr	r1, [pc, #4]	; (8002424 <_cleanup_r+0x8>)
 800241e:	f000 b8af 	b.w	8002580 <_fwalk_reent>
 8002422:	bf00      	nop
 8002424:	0800235d 	.word	0x0800235d

08002428 <__sfmoreglue>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	2268      	movs	r2, #104	; 0x68
 800242c:	1e4d      	subs	r5, r1, #1
 800242e:	4355      	muls	r5, r2
 8002430:	460e      	mov	r6, r1
 8002432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002436:	f000 f99f 	bl	8002778 <_malloc_r>
 800243a:	4604      	mov	r4, r0
 800243c:	b140      	cbz	r0, 8002450 <__sfmoreglue+0x28>
 800243e:	2100      	movs	r1, #0
 8002440:	e9c0 1600 	strd	r1, r6, [r0]
 8002444:	300c      	adds	r0, #12
 8002446:	60a0      	str	r0, [r4, #8]
 8002448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800244c:	f7ff fe12 	bl	8002074 <memset>
 8002450:	4620      	mov	r0, r4
 8002452:	bd70      	pop	{r4, r5, r6, pc}

08002454 <__sfp_lock_acquire>:
 8002454:	4801      	ldr	r0, [pc, #4]	; (800245c <__sfp_lock_acquire+0x8>)
 8002456:	f000 b8b3 	b.w	80025c0 <__retarget_lock_acquire_recursive>
 800245a:	bf00      	nop
 800245c:	200000bd 	.word	0x200000bd

08002460 <__sfp_lock_release>:
 8002460:	4801      	ldr	r0, [pc, #4]	; (8002468 <__sfp_lock_release+0x8>)
 8002462:	f000 b8ae 	b.w	80025c2 <__retarget_lock_release_recursive>
 8002466:	bf00      	nop
 8002468:	200000bd 	.word	0x200000bd

0800246c <__sinit_lock_acquire>:
 800246c:	4801      	ldr	r0, [pc, #4]	; (8002474 <__sinit_lock_acquire+0x8>)
 800246e:	f000 b8a7 	b.w	80025c0 <__retarget_lock_acquire_recursive>
 8002472:	bf00      	nop
 8002474:	200000be 	.word	0x200000be

08002478 <__sinit_lock_release>:
 8002478:	4801      	ldr	r0, [pc, #4]	; (8002480 <__sinit_lock_release+0x8>)
 800247a:	f000 b8a2 	b.w	80025c2 <__retarget_lock_release_recursive>
 800247e:	bf00      	nop
 8002480:	200000be 	.word	0x200000be

08002484 <__sinit>:
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	f7ff fff0 	bl	800246c <__sinit_lock_acquire>
 800248c:	69a3      	ldr	r3, [r4, #24]
 800248e:	b11b      	cbz	r3, 8002498 <__sinit+0x14>
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	f7ff bff0 	b.w	8002478 <__sinit_lock_release>
 8002498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800249c:	6523      	str	r3, [r4, #80]	; 0x50
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <__sinit+0x68>)
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <__sinit+0x6c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	bf04      	itt	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	61a3      	streq	r3, [r4, #24]
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 f820 	bl	80024f4 <__sfp>
 80024b4:	6060      	str	r0, [r4, #4]
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 f81c 	bl	80024f4 <__sfp>
 80024bc:	60a0      	str	r0, [r4, #8]
 80024be:	4620      	mov	r0, r4
 80024c0:	f000 f818 	bl	80024f4 <__sfp>
 80024c4:	2200      	movs	r2, #0
 80024c6:	60e0      	str	r0, [r4, #12]
 80024c8:	2104      	movs	r1, #4
 80024ca:	6860      	ldr	r0, [r4, #4]
 80024cc:	f7ff ff82 	bl	80023d4 <std>
 80024d0:	68a0      	ldr	r0, [r4, #8]
 80024d2:	2201      	movs	r2, #1
 80024d4:	2109      	movs	r1, #9
 80024d6:	f7ff ff7d 	bl	80023d4 <std>
 80024da:	68e0      	ldr	r0, [r4, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	2112      	movs	r1, #18
 80024e0:	f7ff ff78 	bl	80023d4 <std>
 80024e4:	2301      	movs	r3, #1
 80024e6:	61a3      	str	r3, [r4, #24]
 80024e8:	e7d2      	b.n	8002490 <__sinit+0xc>
 80024ea:	bf00      	nop
 80024ec:	08003174 	.word	0x08003174
 80024f0:	0800241d 	.word	0x0800241d

080024f4 <__sfp>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	4607      	mov	r7, r0
 80024f8:	f7ff ffac 	bl	8002454 <__sfp_lock_acquire>
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <__sfp+0x84>)
 80024fe:	681e      	ldr	r6, [r3, #0]
 8002500:	69b3      	ldr	r3, [r6, #24]
 8002502:	b913      	cbnz	r3, 800250a <__sfp+0x16>
 8002504:	4630      	mov	r0, r6
 8002506:	f7ff ffbd 	bl	8002484 <__sinit>
 800250a:	3648      	adds	r6, #72	; 0x48
 800250c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	d503      	bpl.n	800251c <__sfp+0x28>
 8002514:	6833      	ldr	r3, [r6, #0]
 8002516:	b30b      	cbz	r3, 800255c <__sfp+0x68>
 8002518:	6836      	ldr	r6, [r6, #0]
 800251a:	e7f7      	b.n	800250c <__sfp+0x18>
 800251c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002520:	b9d5      	cbnz	r5, 8002558 <__sfp+0x64>
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <__sfp+0x88>)
 8002524:	60e3      	str	r3, [r4, #12]
 8002526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800252a:	6665      	str	r5, [r4, #100]	; 0x64
 800252c:	f000 f847 	bl	80025be <__retarget_lock_init_recursive>
 8002530:	f7ff ff96 	bl	8002460 <__sfp_lock_release>
 8002534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800253c:	6025      	str	r5, [r4, #0]
 800253e:	61a5      	str	r5, [r4, #24]
 8002540:	2208      	movs	r2, #8
 8002542:	4629      	mov	r1, r5
 8002544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002548:	f7ff fd94 	bl	8002074 <memset>
 800254c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002554:	4620      	mov	r0, r4
 8002556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002558:	3468      	adds	r4, #104	; 0x68
 800255a:	e7d9      	b.n	8002510 <__sfp+0x1c>
 800255c:	2104      	movs	r1, #4
 800255e:	4638      	mov	r0, r7
 8002560:	f7ff ff62 	bl	8002428 <__sfmoreglue>
 8002564:	4604      	mov	r4, r0
 8002566:	6030      	str	r0, [r6, #0]
 8002568:	2800      	cmp	r0, #0
 800256a:	d1d5      	bne.n	8002518 <__sfp+0x24>
 800256c:	f7ff ff78 	bl	8002460 <__sfp_lock_release>
 8002570:	230c      	movs	r3, #12
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	e7ee      	b.n	8002554 <__sfp+0x60>
 8002576:	bf00      	nop
 8002578:	08003174 	.word	0x08003174
 800257c:	ffff0001 	.word	0xffff0001

08002580 <_fwalk_reent>:
 8002580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002584:	4606      	mov	r6, r0
 8002586:	4688      	mov	r8, r1
 8002588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800258c:	2700      	movs	r7, #0
 800258e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002592:	f1b9 0901 	subs.w	r9, r9, #1
 8002596:	d505      	bpl.n	80025a4 <_fwalk_reent+0x24>
 8002598:	6824      	ldr	r4, [r4, #0]
 800259a:	2c00      	cmp	r4, #0
 800259c:	d1f7      	bne.n	800258e <_fwalk_reent+0xe>
 800259e:	4638      	mov	r0, r7
 80025a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025a4:	89ab      	ldrh	r3, [r5, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d907      	bls.n	80025ba <_fwalk_reent+0x3a>
 80025aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025ae:	3301      	adds	r3, #1
 80025b0:	d003      	beq.n	80025ba <_fwalk_reent+0x3a>
 80025b2:	4629      	mov	r1, r5
 80025b4:	4630      	mov	r0, r6
 80025b6:	47c0      	blx	r8
 80025b8:	4307      	orrs	r7, r0
 80025ba:	3568      	adds	r5, #104	; 0x68
 80025bc:	e7e9      	b.n	8002592 <_fwalk_reent+0x12>

080025be <__retarget_lock_init_recursive>:
 80025be:	4770      	bx	lr

080025c0 <__retarget_lock_acquire_recursive>:
 80025c0:	4770      	bx	lr

080025c2 <__retarget_lock_release_recursive>:
 80025c2:	4770      	bx	lr

080025c4 <__swhatbuf_r>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	460e      	mov	r6, r1
 80025c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025cc:	2900      	cmp	r1, #0
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	da08      	bge.n	80025e8 <__swhatbuf_r+0x24>
 80025d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	602a      	str	r2, [r5, #0]
 80025de:	061a      	lsls	r2, r3, #24
 80025e0:	d410      	bmi.n	8002604 <__swhatbuf_r+0x40>
 80025e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e6:	e00e      	b.n	8002606 <__swhatbuf_r+0x42>
 80025e8:	466a      	mov	r2, sp
 80025ea:	f000 fd4b 	bl	8003084 <_fstat_r>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	dbf1      	blt.n	80025d6 <__swhatbuf_r+0x12>
 80025f2:	9a01      	ldr	r2, [sp, #4]
 80025f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80025fc:	425a      	negs	r2, r3
 80025fe:	415a      	adcs	r2, r3
 8002600:	602a      	str	r2, [r5, #0]
 8002602:	e7ee      	b.n	80025e2 <__swhatbuf_r+0x1e>
 8002604:	2340      	movs	r3, #64	; 0x40
 8002606:	2000      	movs	r0, #0
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	b016      	add	sp, #88	; 0x58
 800260c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002610 <__smakebuf_r>:
 8002610:	898b      	ldrh	r3, [r1, #12]
 8002612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002614:	079d      	lsls	r5, r3, #30
 8002616:	4606      	mov	r6, r0
 8002618:	460c      	mov	r4, r1
 800261a:	d507      	bpl.n	800262c <__smakebuf_r+0x1c>
 800261c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	6123      	str	r3, [r4, #16]
 8002624:	2301      	movs	r3, #1
 8002626:	6163      	str	r3, [r4, #20]
 8002628:	b002      	add	sp, #8
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	ab01      	add	r3, sp, #4
 800262e:	466a      	mov	r2, sp
 8002630:	f7ff ffc8 	bl	80025c4 <__swhatbuf_r>
 8002634:	9900      	ldr	r1, [sp, #0]
 8002636:	4605      	mov	r5, r0
 8002638:	4630      	mov	r0, r6
 800263a:	f000 f89d 	bl	8002778 <_malloc_r>
 800263e:	b948      	cbnz	r0, 8002654 <__smakebuf_r+0x44>
 8002640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002644:	059a      	lsls	r2, r3, #22
 8002646:	d4ef      	bmi.n	8002628 <__smakebuf_r+0x18>
 8002648:	f023 0303 	bic.w	r3, r3, #3
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	81a3      	strh	r3, [r4, #12]
 8002652:	e7e3      	b.n	800261c <__smakebuf_r+0xc>
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <__smakebuf_r+0x7c>)
 8002656:	62b3      	str	r3, [r6, #40]	; 0x28
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	6020      	str	r0, [r4, #0]
 800265c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002660:	81a3      	strh	r3, [r4, #12]
 8002662:	9b00      	ldr	r3, [sp, #0]
 8002664:	6163      	str	r3, [r4, #20]
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	6120      	str	r0, [r4, #16]
 800266a:	b15b      	cbz	r3, 8002684 <__smakebuf_r+0x74>
 800266c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002670:	4630      	mov	r0, r6
 8002672:	f000 fd19 	bl	80030a8 <_isatty_r>
 8002676:	b128      	cbz	r0, 8002684 <__smakebuf_r+0x74>
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	81a3      	strh	r3, [r4, #12]
 8002684:	89a0      	ldrh	r0, [r4, #12]
 8002686:	4305      	orrs	r5, r0
 8002688:	81a5      	strh	r5, [r4, #12]
 800268a:	e7cd      	b.n	8002628 <__smakebuf_r+0x18>
 800268c:	0800241d 	.word	0x0800241d

08002690 <malloc>:
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <malloc+0xc>)
 8002692:	4601      	mov	r1, r0
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	f000 b86f 	b.w	8002778 <_malloc_r>
 800269a:	bf00      	nop
 800269c:	20000030 	.word	0x20000030

080026a0 <_free_r>:
 80026a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026a2:	2900      	cmp	r1, #0
 80026a4:	d044      	beq.n	8002730 <_free_r+0x90>
 80026a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026aa:	9001      	str	r0, [sp, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f1a1 0404 	sub.w	r4, r1, #4
 80026b2:	bfb8      	it	lt
 80026b4:	18e4      	addlt	r4, r4, r3
 80026b6:	f000 fd19 	bl	80030ec <__malloc_lock>
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <_free_r+0x94>)
 80026bc:	9801      	ldr	r0, [sp, #4]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	b933      	cbnz	r3, 80026d0 <_free_r+0x30>
 80026c2:	6063      	str	r3, [r4, #4]
 80026c4:	6014      	str	r4, [r2, #0]
 80026c6:	b003      	add	sp, #12
 80026c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026cc:	f000 bd14 	b.w	80030f8 <__malloc_unlock>
 80026d0:	42a3      	cmp	r3, r4
 80026d2:	d908      	bls.n	80026e6 <_free_r+0x46>
 80026d4:	6825      	ldr	r5, [r4, #0]
 80026d6:	1961      	adds	r1, r4, r5
 80026d8:	428b      	cmp	r3, r1
 80026da:	bf01      	itttt	eq
 80026dc:	6819      	ldreq	r1, [r3, #0]
 80026de:	685b      	ldreq	r3, [r3, #4]
 80026e0:	1949      	addeq	r1, r1, r5
 80026e2:	6021      	streq	r1, [r4, #0]
 80026e4:	e7ed      	b.n	80026c2 <_free_r+0x22>
 80026e6:	461a      	mov	r2, r3
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	b10b      	cbz	r3, 80026f0 <_free_r+0x50>
 80026ec:	42a3      	cmp	r3, r4
 80026ee:	d9fa      	bls.n	80026e6 <_free_r+0x46>
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	1855      	adds	r5, r2, r1
 80026f4:	42a5      	cmp	r5, r4
 80026f6:	d10b      	bne.n	8002710 <_free_r+0x70>
 80026f8:	6824      	ldr	r4, [r4, #0]
 80026fa:	4421      	add	r1, r4
 80026fc:	1854      	adds	r4, r2, r1
 80026fe:	42a3      	cmp	r3, r4
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	d1e0      	bne.n	80026c6 <_free_r+0x26>
 8002704:	681c      	ldr	r4, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	6053      	str	r3, [r2, #4]
 800270a:	4421      	add	r1, r4
 800270c:	6011      	str	r1, [r2, #0]
 800270e:	e7da      	b.n	80026c6 <_free_r+0x26>
 8002710:	d902      	bls.n	8002718 <_free_r+0x78>
 8002712:	230c      	movs	r3, #12
 8002714:	6003      	str	r3, [r0, #0]
 8002716:	e7d6      	b.n	80026c6 <_free_r+0x26>
 8002718:	6825      	ldr	r5, [r4, #0]
 800271a:	1961      	adds	r1, r4, r5
 800271c:	428b      	cmp	r3, r1
 800271e:	bf04      	itt	eq
 8002720:	6819      	ldreq	r1, [r3, #0]
 8002722:	685b      	ldreq	r3, [r3, #4]
 8002724:	6063      	str	r3, [r4, #4]
 8002726:	bf04      	itt	eq
 8002728:	1949      	addeq	r1, r1, r5
 800272a:	6021      	streq	r1, [r4, #0]
 800272c:	6054      	str	r4, [r2, #4]
 800272e:	e7ca      	b.n	80026c6 <_free_r+0x26>
 8002730:	b003      	add	sp, #12
 8002732:	bd30      	pop	{r4, r5, pc}
 8002734:	200000c0 	.word	0x200000c0

08002738 <sbrk_aligned>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	4e0e      	ldr	r6, [pc, #56]	; (8002774 <sbrk_aligned+0x3c>)
 800273c:	460c      	mov	r4, r1
 800273e:	6831      	ldr	r1, [r6, #0]
 8002740:	4605      	mov	r5, r0
 8002742:	b911      	cbnz	r1, 800274a <sbrk_aligned+0x12>
 8002744:	f000 fb7a 	bl	8002e3c <_sbrk_r>
 8002748:	6030      	str	r0, [r6, #0]
 800274a:	4621      	mov	r1, r4
 800274c:	4628      	mov	r0, r5
 800274e:	f000 fb75 	bl	8002e3c <_sbrk_r>
 8002752:	1c43      	adds	r3, r0, #1
 8002754:	d00a      	beq.n	800276c <sbrk_aligned+0x34>
 8002756:	1cc4      	adds	r4, r0, #3
 8002758:	f024 0403 	bic.w	r4, r4, #3
 800275c:	42a0      	cmp	r0, r4
 800275e:	d007      	beq.n	8002770 <sbrk_aligned+0x38>
 8002760:	1a21      	subs	r1, r4, r0
 8002762:	4628      	mov	r0, r5
 8002764:	f000 fb6a 	bl	8002e3c <_sbrk_r>
 8002768:	3001      	adds	r0, #1
 800276a:	d101      	bne.n	8002770 <sbrk_aligned+0x38>
 800276c:	f04f 34ff 	mov.w	r4, #4294967295
 8002770:	4620      	mov	r0, r4
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	200000c4 	.word	0x200000c4

08002778 <_malloc_r>:
 8002778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800277c:	1ccd      	adds	r5, r1, #3
 800277e:	f025 0503 	bic.w	r5, r5, #3
 8002782:	3508      	adds	r5, #8
 8002784:	2d0c      	cmp	r5, #12
 8002786:	bf38      	it	cc
 8002788:	250c      	movcc	r5, #12
 800278a:	2d00      	cmp	r5, #0
 800278c:	4607      	mov	r7, r0
 800278e:	db01      	blt.n	8002794 <_malloc_r+0x1c>
 8002790:	42a9      	cmp	r1, r5
 8002792:	d905      	bls.n	80027a0 <_malloc_r+0x28>
 8002794:	230c      	movs	r3, #12
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	2600      	movs	r6, #0
 800279a:	4630      	mov	r0, r6
 800279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027a0:	4e2e      	ldr	r6, [pc, #184]	; (800285c <_malloc_r+0xe4>)
 80027a2:	f000 fca3 	bl	80030ec <__malloc_lock>
 80027a6:	6833      	ldr	r3, [r6, #0]
 80027a8:	461c      	mov	r4, r3
 80027aa:	bb34      	cbnz	r4, 80027fa <_malloc_r+0x82>
 80027ac:	4629      	mov	r1, r5
 80027ae:	4638      	mov	r0, r7
 80027b0:	f7ff ffc2 	bl	8002738 <sbrk_aligned>
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	4604      	mov	r4, r0
 80027b8:	d14d      	bne.n	8002856 <_malloc_r+0xde>
 80027ba:	6834      	ldr	r4, [r6, #0]
 80027bc:	4626      	mov	r6, r4
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d140      	bne.n	8002844 <_malloc_r+0xcc>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	4631      	mov	r1, r6
 80027c6:	4638      	mov	r0, r7
 80027c8:	eb04 0803 	add.w	r8, r4, r3
 80027cc:	f000 fb36 	bl	8002e3c <_sbrk_r>
 80027d0:	4580      	cmp	r8, r0
 80027d2:	d13a      	bne.n	800284a <_malloc_r+0xd2>
 80027d4:	6821      	ldr	r1, [r4, #0]
 80027d6:	3503      	adds	r5, #3
 80027d8:	1a6d      	subs	r5, r5, r1
 80027da:	f025 0503 	bic.w	r5, r5, #3
 80027de:	3508      	adds	r5, #8
 80027e0:	2d0c      	cmp	r5, #12
 80027e2:	bf38      	it	cc
 80027e4:	250c      	movcc	r5, #12
 80027e6:	4629      	mov	r1, r5
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7ff ffa5 	bl	8002738 <sbrk_aligned>
 80027ee:	3001      	adds	r0, #1
 80027f0:	d02b      	beq.n	800284a <_malloc_r+0xd2>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	442b      	add	r3, r5
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	e00e      	b.n	8002818 <_malloc_r+0xa0>
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	1b52      	subs	r2, r2, r5
 80027fe:	d41e      	bmi.n	800283e <_malloc_r+0xc6>
 8002800:	2a0b      	cmp	r2, #11
 8002802:	d916      	bls.n	8002832 <_malloc_r+0xba>
 8002804:	1961      	adds	r1, r4, r5
 8002806:	42a3      	cmp	r3, r4
 8002808:	6025      	str	r5, [r4, #0]
 800280a:	bf18      	it	ne
 800280c:	6059      	strne	r1, [r3, #4]
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	bf08      	it	eq
 8002812:	6031      	streq	r1, [r6, #0]
 8002814:	5162      	str	r2, [r4, r5]
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	4638      	mov	r0, r7
 800281a:	f104 060b 	add.w	r6, r4, #11
 800281e:	f000 fc6b 	bl	80030f8 <__malloc_unlock>
 8002822:	f026 0607 	bic.w	r6, r6, #7
 8002826:	1d23      	adds	r3, r4, #4
 8002828:	1af2      	subs	r2, r6, r3
 800282a:	d0b6      	beq.n	800279a <_malloc_r+0x22>
 800282c:	1b9b      	subs	r3, r3, r6
 800282e:	50a3      	str	r3, [r4, r2]
 8002830:	e7b3      	b.n	800279a <_malloc_r+0x22>
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	42a3      	cmp	r3, r4
 8002836:	bf0c      	ite	eq
 8002838:	6032      	streq	r2, [r6, #0]
 800283a:	605a      	strne	r2, [r3, #4]
 800283c:	e7ec      	b.n	8002818 <_malloc_r+0xa0>
 800283e:	4623      	mov	r3, r4
 8002840:	6864      	ldr	r4, [r4, #4]
 8002842:	e7b2      	b.n	80027aa <_malloc_r+0x32>
 8002844:	4634      	mov	r4, r6
 8002846:	6876      	ldr	r6, [r6, #4]
 8002848:	e7b9      	b.n	80027be <_malloc_r+0x46>
 800284a:	230c      	movs	r3, #12
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4638      	mov	r0, r7
 8002850:	f000 fc52 	bl	80030f8 <__malloc_unlock>
 8002854:	e7a1      	b.n	800279a <_malloc_r+0x22>
 8002856:	6025      	str	r5, [r4, #0]
 8002858:	e7de      	b.n	8002818 <_malloc_r+0xa0>
 800285a:	bf00      	nop
 800285c:	200000c0 	.word	0x200000c0

08002860 <__sfputc_r>:
 8002860:	6893      	ldr	r3, [r2, #8]
 8002862:	3b01      	subs	r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	b410      	push	{r4}
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	da08      	bge.n	800287e <__sfputc_r+0x1e>
 800286c:	6994      	ldr	r4, [r2, #24]
 800286e:	42a3      	cmp	r3, r4
 8002870:	db01      	blt.n	8002876 <__sfputc_r+0x16>
 8002872:	290a      	cmp	r1, #10
 8002874:	d103      	bne.n	800287e <__sfputc_r+0x1e>
 8002876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800287a:	f000 bb33 	b.w	8002ee4 <__swbuf_r>
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	1c58      	adds	r0, r3, #1
 8002882:	6010      	str	r0, [r2, #0]
 8002884:	7019      	strb	r1, [r3, #0]
 8002886:	4608      	mov	r0, r1
 8002888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800288c:	4770      	bx	lr

0800288e <__sfputs_r>:
 800288e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002890:	4606      	mov	r6, r0
 8002892:	460f      	mov	r7, r1
 8002894:	4614      	mov	r4, r2
 8002896:	18d5      	adds	r5, r2, r3
 8002898:	42ac      	cmp	r4, r5
 800289a:	d101      	bne.n	80028a0 <__sfputs_r+0x12>
 800289c:	2000      	movs	r0, #0
 800289e:	e007      	b.n	80028b0 <__sfputs_r+0x22>
 80028a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028a4:	463a      	mov	r2, r7
 80028a6:	4630      	mov	r0, r6
 80028a8:	f7ff ffda 	bl	8002860 <__sfputc_r>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d1f3      	bne.n	8002898 <__sfputs_r+0xa>
 80028b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028b4 <_vfiprintf_r>:
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	460d      	mov	r5, r1
 80028ba:	b09d      	sub	sp, #116	; 0x74
 80028bc:	4614      	mov	r4, r2
 80028be:	4698      	mov	r8, r3
 80028c0:	4606      	mov	r6, r0
 80028c2:	b118      	cbz	r0, 80028cc <_vfiprintf_r+0x18>
 80028c4:	6983      	ldr	r3, [r0, #24]
 80028c6:	b90b      	cbnz	r3, 80028cc <_vfiprintf_r+0x18>
 80028c8:	f7ff fddc 	bl	8002484 <__sinit>
 80028cc:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <_vfiprintf_r+0x240>)
 80028ce:	429d      	cmp	r5, r3
 80028d0:	d11b      	bne.n	800290a <_vfiprintf_r+0x56>
 80028d2:	6875      	ldr	r5, [r6, #4]
 80028d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028d6:	07d9      	lsls	r1, r3, #31
 80028d8:	d405      	bmi.n	80028e6 <_vfiprintf_r+0x32>
 80028da:	89ab      	ldrh	r3, [r5, #12]
 80028dc:	059a      	lsls	r2, r3, #22
 80028de:	d402      	bmi.n	80028e6 <_vfiprintf_r+0x32>
 80028e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e2:	f7ff fe6d 	bl	80025c0 <__retarget_lock_acquire_recursive>
 80028e6:	89ab      	ldrh	r3, [r5, #12]
 80028e8:	071b      	lsls	r3, r3, #28
 80028ea:	d501      	bpl.n	80028f0 <_vfiprintf_r+0x3c>
 80028ec:	692b      	ldr	r3, [r5, #16]
 80028ee:	b9eb      	cbnz	r3, 800292c <_vfiprintf_r+0x78>
 80028f0:	4629      	mov	r1, r5
 80028f2:	4630      	mov	r0, r6
 80028f4:	f000 fb48 	bl	8002f88 <__swsetup_r>
 80028f8:	b1c0      	cbz	r0, 800292c <_vfiprintf_r+0x78>
 80028fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028fc:	07dc      	lsls	r4, r3, #31
 80028fe:	d50e      	bpl.n	800291e <_vfiprintf_r+0x6a>
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	b01d      	add	sp, #116	; 0x74
 8002906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290a:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <_vfiprintf_r+0x244>)
 800290c:	429d      	cmp	r5, r3
 800290e:	d101      	bne.n	8002914 <_vfiprintf_r+0x60>
 8002910:	68b5      	ldr	r5, [r6, #8]
 8002912:	e7df      	b.n	80028d4 <_vfiprintf_r+0x20>
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <_vfiprintf_r+0x248>)
 8002916:	429d      	cmp	r5, r3
 8002918:	bf08      	it	eq
 800291a:	68f5      	ldreq	r5, [r6, #12]
 800291c:	e7da      	b.n	80028d4 <_vfiprintf_r+0x20>
 800291e:	89ab      	ldrh	r3, [r5, #12]
 8002920:	0598      	lsls	r0, r3, #22
 8002922:	d4ed      	bmi.n	8002900 <_vfiprintf_r+0x4c>
 8002924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002926:	f7ff fe4c 	bl	80025c2 <__retarget_lock_release_recursive>
 800292a:	e7e9      	b.n	8002900 <_vfiprintf_r+0x4c>
 800292c:	2300      	movs	r3, #0
 800292e:	9309      	str	r3, [sp, #36]	; 0x24
 8002930:	2320      	movs	r3, #32
 8002932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002936:	f8cd 800c 	str.w	r8, [sp, #12]
 800293a:	2330      	movs	r3, #48	; 0x30
 800293c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b00 <_vfiprintf_r+0x24c>
 8002940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002944:	f04f 0901 	mov.w	r9, #1
 8002948:	4623      	mov	r3, r4
 800294a:	469a      	mov	sl, r3
 800294c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002950:	b10a      	cbz	r2, 8002956 <_vfiprintf_r+0xa2>
 8002952:	2a25      	cmp	r2, #37	; 0x25
 8002954:	d1f9      	bne.n	800294a <_vfiprintf_r+0x96>
 8002956:	ebba 0b04 	subs.w	fp, sl, r4
 800295a:	d00b      	beq.n	8002974 <_vfiprintf_r+0xc0>
 800295c:	465b      	mov	r3, fp
 800295e:	4622      	mov	r2, r4
 8002960:	4629      	mov	r1, r5
 8002962:	4630      	mov	r0, r6
 8002964:	f7ff ff93 	bl	800288e <__sfputs_r>
 8002968:	3001      	adds	r0, #1
 800296a:	f000 80aa 	beq.w	8002ac2 <_vfiprintf_r+0x20e>
 800296e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002970:	445a      	add	r2, fp
 8002972:	9209      	str	r2, [sp, #36]	; 0x24
 8002974:	f89a 3000 	ldrb.w	r3, [sl]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a2 	beq.w	8002ac2 <_vfiprintf_r+0x20e>
 800297e:	2300      	movs	r3, #0
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002988:	f10a 0a01 	add.w	sl, sl, #1
 800298c:	9304      	str	r3, [sp, #16]
 800298e:	9307      	str	r3, [sp, #28]
 8002990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002994:	931a      	str	r3, [sp, #104]	; 0x68
 8002996:	4654      	mov	r4, sl
 8002998:	2205      	movs	r2, #5
 800299a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800299e:	4858      	ldr	r0, [pc, #352]	; (8002b00 <_vfiprintf_r+0x24c>)
 80029a0:	f7fd fc16 	bl	80001d0 <memchr>
 80029a4:	9a04      	ldr	r2, [sp, #16]
 80029a6:	b9d8      	cbnz	r0, 80029e0 <_vfiprintf_r+0x12c>
 80029a8:	06d1      	lsls	r1, r2, #27
 80029aa:	bf44      	itt	mi
 80029ac:	2320      	movmi	r3, #32
 80029ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029b2:	0713      	lsls	r3, r2, #28
 80029b4:	bf44      	itt	mi
 80029b6:	232b      	movmi	r3, #43	; 0x2b
 80029b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029bc:	f89a 3000 	ldrb.w	r3, [sl]
 80029c0:	2b2a      	cmp	r3, #42	; 0x2a
 80029c2:	d015      	beq.n	80029f0 <_vfiprintf_r+0x13c>
 80029c4:	9a07      	ldr	r2, [sp, #28]
 80029c6:	4654      	mov	r4, sl
 80029c8:	2000      	movs	r0, #0
 80029ca:	f04f 0c0a 	mov.w	ip, #10
 80029ce:	4621      	mov	r1, r4
 80029d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029d4:	3b30      	subs	r3, #48	; 0x30
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d94e      	bls.n	8002a78 <_vfiprintf_r+0x1c4>
 80029da:	b1b0      	cbz	r0, 8002a0a <_vfiprintf_r+0x156>
 80029dc:	9207      	str	r2, [sp, #28]
 80029de:	e014      	b.n	8002a0a <_vfiprintf_r+0x156>
 80029e0:	eba0 0308 	sub.w	r3, r0, r8
 80029e4:	fa09 f303 	lsl.w	r3, r9, r3
 80029e8:	4313      	orrs	r3, r2
 80029ea:	9304      	str	r3, [sp, #16]
 80029ec:	46a2      	mov	sl, r4
 80029ee:	e7d2      	b.n	8002996 <_vfiprintf_r+0xe2>
 80029f0:	9b03      	ldr	r3, [sp, #12]
 80029f2:	1d19      	adds	r1, r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	9103      	str	r1, [sp, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bfbb      	ittet	lt
 80029fc:	425b      	neglt	r3, r3
 80029fe:	f042 0202 	orrlt.w	r2, r2, #2
 8002a02:	9307      	strge	r3, [sp, #28]
 8002a04:	9307      	strlt	r3, [sp, #28]
 8002a06:	bfb8      	it	lt
 8002a08:	9204      	strlt	r2, [sp, #16]
 8002a0a:	7823      	ldrb	r3, [r4, #0]
 8002a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0e:	d10c      	bne.n	8002a2a <_vfiprintf_r+0x176>
 8002a10:	7863      	ldrb	r3, [r4, #1]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d135      	bne.n	8002a82 <_vfiprintf_r+0x1ce>
 8002a16:	9b03      	ldr	r3, [sp, #12]
 8002a18:	1d1a      	adds	r2, r3, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	9203      	str	r2, [sp, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bfb8      	it	lt
 8002a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a26:	3402      	adds	r4, #2
 8002a28:	9305      	str	r3, [sp, #20]
 8002a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b10 <_vfiprintf_r+0x25c>
 8002a2e:	7821      	ldrb	r1, [r4, #0]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4650      	mov	r0, sl
 8002a34:	f7fd fbcc 	bl	80001d0 <memchr>
 8002a38:	b140      	cbz	r0, 8002a4c <_vfiprintf_r+0x198>
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	eba0 000a 	sub.w	r0, r0, sl
 8002a40:	fa03 f000 	lsl.w	r0, r3, r0
 8002a44:	9b04      	ldr	r3, [sp, #16]
 8002a46:	4303      	orrs	r3, r0
 8002a48:	3401      	adds	r4, #1
 8002a4a:	9304      	str	r3, [sp, #16]
 8002a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a50:	482c      	ldr	r0, [pc, #176]	; (8002b04 <_vfiprintf_r+0x250>)
 8002a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a56:	2206      	movs	r2, #6
 8002a58:	f7fd fbba 	bl	80001d0 <memchr>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d03f      	beq.n	8002ae0 <_vfiprintf_r+0x22c>
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <_vfiprintf_r+0x254>)
 8002a62:	bb1b      	cbnz	r3, 8002aac <_vfiprintf_r+0x1f8>
 8002a64:	9b03      	ldr	r3, [sp, #12]
 8002a66:	3307      	adds	r3, #7
 8002a68:	f023 0307 	bic.w	r3, r3, #7
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	9303      	str	r3, [sp, #12]
 8002a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a72:	443b      	add	r3, r7
 8002a74:	9309      	str	r3, [sp, #36]	; 0x24
 8002a76:	e767      	b.n	8002948 <_vfiprintf_r+0x94>
 8002a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	2001      	movs	r0, #1
 8002a80:	e7a5      	b.n	80029ce <_vfiprintf_r+0x11a>
 8002a82:	2300      	movs	r3, #0
 8002a84:	3401      	adds	r4, #1
 8002a86:	9305      	str	r3, [sp, #20]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f04f 0c0a 	mov.w	ip, #10
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a94:	3a30      	subs	r2, #48	; 0x30
 8002a96:	2a09      	cmp	r2, #9
 8002a98:	d903      	bls.n	8002aa2 <_vfiprintf_r+0x1ee>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0c5      	beq.n	8002a2a <_vfiprintf_r+0x176>
 8002a9e:	9105      	str	r1, [sp, #20]
 8002aa0:	e7c3      	b.n	8002a2a <_vfiprintf_r+0x176>
 8002aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e7f0      	b.n	8002a8e <_vfiprintf_r+0x1da>
 8002aac:	ab03      	add	r3, sp, #12
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	462a      	mov	r2, r5
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <_vfiprintf_r+0x258>)
 8002ab4:	a904      	add	r1, sp, #16
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	f3af 8000 	nop.w
 8002abc:	4607      	mov	r7, r0
 8002abe:	1c78      	adds	r0, r7, #1
 8002ac0:	d1d6      	bne.n	8002a70 <_vfiprintf_r+0x1bc>
 8002ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ac4:	07d9      	lsls	r1, r3, #31
 8002ac6:	d405      	bmi.n	8002ad4 <_vfiprintf_r+0x220>
 8002ac8:	89ab      	ldrh	r3, [r5, #12]
 8002aca:	059a      	lsls	r2, r3, #22
 8002acc:	d402      	bmi.n	8002ad4 <_vfiprintf_r+0x220>
 8002ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ad0:	f7ff fd77 	bl	80025c2 <__retarget_lock_release_recursive>
 8002ad4:	89ab      	ldrh	r3, [r5, #12]
 8002ad6:	065b      	lsls	r3, r3, #25
 8002ad8:	f53f af12 	bmi.w	8002900 <_vfiprintf_r+0x4c>
 8002adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ade:	e711      	b.n	8002904 <_vfiprintf_r+0x50>
 8002ae0:	ab03      	add	r3, sp, #12
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	462a      	mov	r2, r5
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <_vfiprintf_r+0x258>)
 8002ae8:	a904      	add	r1, sp, #16
 8002aea:	4630      	mov	r0, r6
 8002aec:	f000 f880 	bl	8002bf0 <_printf_i>
 8002af0:	e7e4      	b.n	8002abc <_vfiprintf_r+0x208>
 8002af2:	bf00      	nop
 8002af4:	08003198 	.word	0x08003198
 8002af8:	080031b8 	.word	0x080031b8
 8002afc:	08003178 	.word	0x08003178
 8002b00:	080031d8 	.word	0x080031d8
 8002b04:	080031e2 	.word	0x080031e2
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	0800288f 	.word	0x0800288f
 8002b10:	080031de 	.word	0x080031de

08002b14 <_printf_common>:
 8002b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b18:	4616      	mov	r6, r2
 8002b1a:	4699      	mov	r9, r3
 8002b1c:	688a      	ldr	r2, [r1, #8]
 8002b1e:	690b      	ldr	r3, [r1, #16]
 8002b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bfb8      	it	lt
 8002b28:	4613      	movlt	r3, r2
 8002b2a:	6033      	str	r3, [r6, #0]
 8002b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b30:	4607      	mov	r7, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	b10a      	cbz	r2, 8002b3a <_printf_common+0x26>
 8002b36:	3301      	adds	r3, #1
 8002b38:	6033      	str	r3, [r6, #0]
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	0699      	lsls	r1, r3, #26
 8002b3e:	bf42      	ittt	mi
 8002b40:	6833      	ldrmi	r3, [r6, #0]
 8002b42:	3302      	addmi	r3, #2
 8002b44:	6033      	strmi	r3, [r6, #0]
 8002b46:	6825      	ldr	r5, [r4, #0]
 8002b48:	f015 0506 	ands.w	r5, r5, #6
 8002b4c:	d106      	bne.n	8002b5c <_printf_common+0x48>
 8002b4e:	f104 0a19 	add.w	sl, r4, #25
 8002b52:	68e3      	ldr	r3, [r4, #12]
 8002b54:	6832      	ldr	r2, [r6, #0]
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	42ab      	cmp	r3, r5
 8002b5a:	dc26      	bgt.n	8002baa <_printf_common+0x96>
 8002b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b60:	1e13      	subs	r3, r2, #0
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	bf18      	it	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	0692      	lsls	r2, r2, #26
 8002b6a:	d42b      	bmi.n	8002bc4 <_printf_common+0xb0>
 8002b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b70:	4649      	mov	r1, r9
 8002b72:	4638      	mov	r0, r7
 8002b74:	47c0      	blx	r8
 8002b76:	3001      	adds	r0, #1
 8002b78:	d01e      	beq.n	8002bb8 <_printf_common+0xa4>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	68e5      	ldr	r5, [r4, #12]
 8002b7e:	6832      	ldr	r2, [r6, #0]
 8002b80:	f003 0306 	and.w	r3, r3, #6
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	bf08      	it	eq
 8002b88:	1aad      	subeq	r5, r5, r2
 8002b8a:	68a3      	ldr	r3, [r4, #8]
 8002b8c:	6922      	ldr	r2, [r4, #16]
 8002b8e:	bf0c      	ite	eq
 8002b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b94:	2500      	movne	r5, #0
 8002b96:	4293      	cmp	r3, r2
 8002b98:	bfc4      	itt	gt
 8002b9a:	1a9b      	subgt	r3, r3, r2
 8002b9c:	18ed      	addgt	r5, r5, r3
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	341a      	adds	r4, #26
 8002ba2:	42b5      	cmp	r5, r6
 8002ba4:	d11a      	bne.n	8002bdc <_printf_common+0xc8>
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e008      	b.n	8002bbc <_printf_common+0xa8>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4652      	mov	r2, sl
 8002bae:	4649      	mov	r1, r9
 8002bb0:	4638      	mov	r0, r7
 8002bb2:	47c0      	blx	r8
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	d103      	bne.n	8002bc0 <_printf_common+0xac>
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc0:	3501      	adds	r5, #1
 8002bc2:	e7c6      	b.n	8002b52 <_printf_common+0x3e>
 8002bc4:	18e1      	adds	r1, r4, r3
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	2030      	movs	r0, #48	; 0x30
 8002bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bce:	4422      	add	r2, r4
 8002bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bd8:	3302      	adds	r3, #2
 8002bda:	e7c7      	b.n	8002b6c <_printf_common+0x58>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	4622      	mov	r2, r4
 8002be0:	4649      	mov	r1, r9
 8002be2:	4638      	mov	r0, r7
 8002be4:	47c0      	blx	r8
 8002be6:	3001      	adds	r0, #1
 8002be8:	d0e6      	beq.n	8002bb8 <_printf_common+0xa4>
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7d9      	b.n	8002ba2 <_printf_common+0x8e>
	...

08002bf0 <_printf_i>:
 8002bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf4:	7e0f      	ldrb	r7, [r1, #24]
 8002bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bf8:	2f78      	cmp	r7, #120	; 0x78
 8002bfa:	4691      	mov	r9, r2
 8002bfc:	4680      	mov	r8, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	469a      	mov	sl, r3
 8002c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c06:	d807      	bhi.n	8002c18 <_printf_i+0x28>
 8002c08:	2f62      	cmp	r7, #98	; 0x62
 8002c0a:	d80a      	bhi.n	8002c22 <_printf_i+0x32>
 8002c0c:	2f00      	cmp	r7, #0
 8002c0e:	f000 80d8 	beq.w	8002dc2 <_printf_i+0x1d2>
 8002c12:	2f58      	cmp	r7, #88	; 0x58
 8002c14:	f000 80a3 	beq.w	8002d5e <_printf_i+0x16e>
 8002c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c20:	e03a      	b.n	8002c98 <_printf_i+0xa8>
 8002c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c26:	2b15      	cmp	r3, #21
 8002c28:	d8f6      	bhi.n	8002c18 <_printf_i+0x28>
 8002c2a:	a101      	add	r1, pc, #4	; (adr r1, 8002c30 <_printf_i+0x40>)
 8002c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c30:	08002c89 	.word	0x08002c89
 8002c34:	08002c9d 	.word	0x08002c9d
 8002c38:	08002c19 	.word	0x08002c19
 8002c3c:	08002c19 	.word	0x08002c19
 8002c40:	08002c19 	.word	0x08002c19
 8002c44:	08002c19 	.word	0x08002c19
 8002c48:	08002c9d 	.word	0x08002c9d
 8002c4c:	08002c19 	.word	0x08002c19
 8002c50:	08002c19 	.word	0x08002c19
 8002c54:	08002c19 	.word	0x08002c19
 8002c58:	08002c19 	.word	0x08002c19
 8002c5c:	08002da9 	.word	0x08002da9
 8002c60:	08002ccd 	.word	0x08002ccd
 8002c64:	08002d8b 	.word	0x08002d8b
 8002c68:	08002c19 	.word	0x08002c19
 8002c6c:	08002c19 	.word	0x08002c19
 8002c70:	08002dcb 	.word	0x08002dcb
 8002c74:	08002c19 	.word	0x08002c19
 8002c78:	08002ccd 	.word	0x08002ccd
 8002c7c:	08002c19 	.word	0x08002c19
 8002c80:	08002c19 	.word	0x08002c19
 8002c84:	08002d93 	.word	0x08002d93
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	602a      	str	r2, [r5, #0]
 8002c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0a3      	b.n	8002de4 <_printf_i+0x1f4>
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	6829      	ldr	r1, [r5, #0]
 8002ca0:	0606      	lsls	r6, r0, #24
 8002ca2:	f101 0304 	add.w	r3, r1, #4
 8002ca6:	d50a      	bpl.n	8002cbe <_printf_i+0xce>
 8002ca8:	680e      	ldr	r6, [r1, #0]
 8002caa:	602b      	str	r3, [r5, #0]
 8002cac:	2e00      	cmp	r6, #0
 8002cae:	da03      	bge.n	8002cb8 <_printf_i+0xc8>
 8002cb0:	232d      	movs	r3, #45	; 0x2d
 8002cb2:	4276      	negs	r6, r6
 8002cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb8:	485e      	ldr	r0, [pc, #376]	; (8002e34 <_printf_i+0x244>)
 8002cba:	230a      	movs	r3, #10
 8002cbc:	e019      	b.n	8002cf2 <_printf_i+0x102>
 8002cbe:	680e      	ldr	r6, [r1, #0]
 8002cc0:	602b      	str	r3, [r5, #0]
 8002cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cc6:	bf18      	it	ne
 8002cc8:	b236      	sxthne	r6, r6
 8002cca:	e7ef      	b.n	8002cac <_printf_i+0xbc>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	6820      	ldr	r0, [r4, #0]
 8002cd0:	1d19      	adds	r1, r3, #4
 8002cd2:	6029      	str	r1, [r5, #0]
 8002cd4:	0601      	lsls	r1, r0, #24
 8002cd6:	d501      	bpl.n	8002cdc <_printf_i+0xec>
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	e002      	b.n	8002ce2 <_printf_i+0xf2>
 8002cdc:	0646      	lsls	r6, r0, #25
 8002cde:	d5fb      	bpl.n	8002cd8 <_printf_i+0xe8>
 8002ce0:	881e      	ldrh	r6, [r3, #0]
 8002ce2:	4854      	ldr	r0, [pc, #336]	; (8002e34 <_printf_i+0x244>)
 8002ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2308      	moveq	r3, #8
 8002cea:	230a      	movne	r3, #10
 8002cec:	2100      	movs	r1, #0
 8002cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cf2:	6865      	ldr	r5, [r4, #4]
 8002cf4:	60a5      	str	r5, [r4, #8]
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	bfa2      	ittt	ge
 8002cfa:	6821      	ldrge	r1, [r4, #0]
 8002cfc:	f021 0104 	bicge.w	r1, r1, #4
 8002d00:	6021      	strge	r1, [r4, #0]
 8002d02:	b90e      	cbnz	r6, 8002d08 <_printf_i+0x118>
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	d04d      	beq.n	8002da4 <_printf_i+0x1b4>
 8002d08:	4615      	mov	r5, r2
 8002d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d12:	5dc7      	ldrb	r7, [r0, r7]
 8002d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d18:	4637      	mov	r7, r6
 8002d1a:	42bb      	cmp	r3, r7
 8002d1c:	460e      	mov	r6, r1
 8002d1e:	d9f4      	bls.n	8002d0a <_printf_i+0x11a>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d10b      	bne.n	8002d3c <_printf_i+0x14c>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	07de      	lsls	r6, r3, #31
 8002d28:	d508      	bpl.n	8002d3c <_printf_i+0x14c>
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	6861      	ldr	r1, [r4, #4]
 8002d2e:	4299      	cmp	r1, r3
 8002d30:	bfde      	ittt	le
 8002d32:	2330      	movle	r3, #48	; 0x30
 8002d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d3c:	1b52      	subs	r2, r2, r5
 8002d3e:	6122      	str	r2, [r4, #16]
 8002d40:	f8cd a000 	str.w	sl, [sp]
 8002d44:	464b      	mov	r3, r9
 8002d46:	aa03      	add	r2, sp, #12
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	f7ff fee2 	bl	8002b14 <_printf_common>
 8002d50:	3001      	adds	r0, #1
 8002d52:	d14c      	bne.n	8002dee <_printf_i+0x1fe>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	b004      	add	sp, #16
 8002d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5e:	4835      	ldr	r0, [pc, #212]	; (8002e34 <_printf_i+0x244>)
 8002d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d64:	6829      	ldr	r1, [r5, #0]
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d6c:	6029      	str	r1, [r5, #0]
 8002d6e:	061d      	lsls	r5, r3, #24
 8002d70:	d514      	bpl.n	8002d9c <_printf_i+0x1ac>
 8002d72:	07df      	lsls	r7, r3, #31
 8002d74:	bf44      	itt	mi
 8002d76:	f043 0320 	orrmi.w	r3, r3, #32
 8002d7a:	6023      	strmi	r3, [r4, #0]
 8002d7c:	b91e      	cbnz	r6, 8002d86 <_printf_i+0x196>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f023 0320 	bic.w	r3, r3, #32
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	2310      	movs	r3, #16
 8002d88:	e7b0      	b.n	8002cec <_printf_i+0xfc>
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	2378      	movs	r3, #120	; 0x78
 8002d94:	4828      	ldr	r0, [pc, #160]	; (8002e38 <_printf_i+0x248>)
 8002d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d9a:	e7e3      	b.n	8002d64 <_printf_i+0x174>
 8002d9c:	0659      	lsls	r1, r3, #25
 8002d9e:	bf48      	it	mi
 8002da0:	b2b6      	uxthmi	r6, r6
 8002da2:	e7e6      	b.n	8002d72 <_printf_i+0x182>
 8002da4:	4615      	mov	r5, r2
 8002da6:	e7bb      	b.n	8002d20 <_printf_i+0x130>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	6826      	ldr	r6, [r4, #0]
 8002dac:	6961      	ldr	r1, [r4, #20]
 8002dae:	1d18      	adds	r0, r3, #4
 8002db0:	6028      	str	r0, [r5, #0]
 8002db2:	0635      	lsls	r5, r6, #24
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	d501      	bpl.n	8002dbc <_printf_i+0x1cc>
 8002db8:	6019      	str	r1, [r3, #0]
 8002dba:	e002      	b.n	8002dc2 <_printf_i+0x1d2>
 8002dbc:	0670      	lsls	r0, r6, #25
 8002dbe:	d5fb      	bpl.n	8002db8 <_printf_i+0x1c8>
 8002dc0:	8019      	strh	r1, [r3, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6123      	str	r3, [r4, #16]
 8002dc6:	4615      	mov	r5, r2
 8002dc8:	e7ba      	b.n	8002d40 <_printf_i+0x150>
 8002dca:	682b      	ldr	r3, [r5, #0]
 8002dcc:	1d1a      	adds	r2, r3, #4
 8002dce:	602a      	str	r2, [r5, #0]
 8002dd0:	681d      	ldr	r5, [r3, #0]
 8002dd2:	6862      	ldr	r2, [r4, #4]
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f7fd f9fa 	bl	80001d0 <memchr>
 8002ddc:	b108      	cbz	r0, 8002de2 <_printf_i+0x1f2>
 8002dde:	1b40      	subs	r0, r0, r5
 8002de0:	6060      	str	r0, [r4, #4]
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	6123      	str	r3, [r4, #16]
 8002de6:	2300      	movs	r3, #0
 8002de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dec:	e7a8      	b.n	8002d40 <_printf_i+0x150>
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	462a      	mov	r2, r5
 8002df2:	4649      	mov	r1, r9
 8002df4:	4640      	mov	r0, r8
 8002df6:	47d0      	blx	sl
 8002df8:	3001      	adds	r0, #1
 8002dfa:	d0ab      	beq.n	8002d54 <_printf_i+0x164>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	079b      	lsls	r3, r3, #30
 8002e00:	d413      	bmi.n	8002e2a <_printf_i+0x23a>
 8002e02:	68e0      	ldr	r0, [r4, #12]
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	4298      	cmp	r0, r3
 8002e08:	bfb8      	it	lt
 8002e0a:	4618      	movlt	r0, r3
 8002e0c:	e7a4      	b.n	8002d58 <_printf_i+0x168>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4632      	mov	r2, r6
 8002e12:	4649      	mov	r1, r9
 8002e14:	4640      	mov	r0, r8
 8002e16:	47d0      	blx	sl
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d09b      	beq.n	8002d54 <_printf_i+0x164>
 8002e1c:	3501      	adds	r5, #1
 8002e1e:	68e3      	ldr	r3, [r4, #12]
 8002e20:	9903      	ldr	r1, [sp, #12]
 8002e22:	1a5b      	subs	r3, r3, r1
 8002e24:	42ab      	cmp	r3, r5
 8002e26:	dcf2      	bgt.n	8002e0e <_printf_i+0x21e>
 8002e28:	e7eb      	b.n	8002e02 <_printf_i+0x212>
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	f104 0619 	add.w	r6, r4, #25
 8002e30:	e7f5      	b.n	8002e1e <_printf_i+0x22e>
 8002e32:	bf00      	nop
 8002e34:	080031e9 	.word	0x080031e9
 8002e38:	080031fa 	.word	0x080031fa

08002e3c <_sbrk_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4d06      	ldr	r5, [pc, #24]	; (8002e58 <_sbrk_r+0x1c>)
 8002e40:	2300      	movs	r3, #0
 8002e42:	4604      	mov	r4, r0
 8002e44:	4608      	mov	r0, r1
 8002e46:	602b      	str	r3, [r5, #0]
 8002e48:	f7fe ff8e 	bl	8001d68 <_sbrk>
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d102      	bne.n	8002e56 <_sbrk_r+0x1a>
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	b103      	cbz	r3, 8002e56 <_sbrk_r+0x1a>
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
 8002e58:	200000c8 	.word	0x200000c8

08002e5c <__sread>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	f000 f94e 	bl	8003104 <_read_r>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	bfab      	itete	ge
 8002e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e70:	181b      	addge	r3, r3, r0
 8002e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e76:	bfac      	ite	ge
 8002e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e7a:	81a3      	strhlt	r3, [r4, #12]
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <__swrite>:
 8002e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	461f      	mov	r7, r3
 8002e84:	898b      	ldrh	r3, [r1, #12]
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	4605      	mov	r5, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	d505      	bpl.n	8002e9c <__swrite+0x1e>
 8002e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e94:	2302      	movs	r3, #2
 8002e96:	2200      	movs	r2, #0
 8002e98:	f000 f916 	bl	80030c8 <_lseek_r>
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea6:	81a3      	strh	r3, [r4, #12]
 8002ea8:	4632      	mov	r2, r6
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4628      	mov	r0, r5
 8002eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb2:	f7fe b9f9 	b.w	80012a8 <_write_r>

08002eb6 <__sseek>:
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	460c      	mov	r4, r1
 8002eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ebe:	f000 f903 	bl	80030c8 <_lseek_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	bf15      	itete	ne
 8002ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ed2:	81a3      	strheq	r3, [r4, #12]
 8002ed4:	bf18      	it	ne
 8002ed6:	81a3      	strhne	r3, [r4, #12]
 8002ed8:	bd10      	pop	{r4, pc}

08002eda <__sclose>:
 8002eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ede:	f000 b8c1 	b.w	8003064 <_close_r>
	...

08002ee4 <__swbuf_r>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	460e      	mov	r6, r1
 8002ee8:	4614      	mov	r4, r2
 8002eea:	4605      	mov	r5, r0
 8002eec:	b118      	cbz	r0, 8002ef6 <__swbuf_r+0x12>
 8002eee:	6983      	ldr	r3, [r0, #24]
 8002ef0:	b90b      	cbnz	r3, 8002ef6 <__swbuf_r+0x12>
 8002ef2:	f7ff fac7 	bl	8002484 <__sinit>
 8002ef6:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <__swbuf_r+0x98>)
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	d12b      	bne.n	8002f54 <__swbuf_r+0x70>
 8002efc:	686c      	ldr	r4, [r5, #4]
 8002efe:	69a3      	ldr	r3, [r4, #24]
 8002f00:	60a3      	str	r3, [r4, #8]
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	071a      	lsls	r2, r3, #28
 8002f06:	d52f      	bpl.n	8002f68 <__swbuf_r+0x84>
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	b36b      	cbz	r3, 8002f68 <__swbuf_r+0x84>
 8002f0c:	6923      	ldr	r3, [r4, #16]
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	1ac0      	subs	r0, r0, r3
 8002f12:	6963      	ldr	r3, [r4, #20]
 8002f14:	b2f6      	uxtb	r6, r6
 8002f16:	4283      	cmp	r3, r0
 8002f18:	4637      	mov	r7, r6
 8002f1a:	dc04      	bgt.n	8002f26 <__swbuf_r+0x42>
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f7ff fa1c 	bl	800235c <_fflush_r>
 8002f24:	bb30      	cbnz	r0, 8002f74 <__swbuf_r+0x90>
 8002f26:	68a3      	ldr	r3, [r4, #8]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	6022      	str	r2, [r4, #0]
 8002f32:	701e      	strb	r6, [r3, #0]
 8002f34:	6963      	ldr	r3, [r4, #20]
 8002f36:	3001      	adds	r0, #1
 8002f38:	4283      	cmp	r3, r0
 8002f3a:	d004      	beq.n	8002f46 <__swbuf_r+0x62>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	07db      	lsls	r3, r3, #31
 8002f40:	d506      	bpl.n	8002f50 <__swbuf_r+0x6c>
 8002f42:	2e0a      	cmp	r6, #10
 8002f44:	d104      	bne.n	8002f50 <__swbuf_r+0x6c>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f7ff fa07 	bl	800235c <_fflush_r>
 8002f4e:	b988      	cbnz	r0, 8002f74 <__swbuf_r+0x90>
 8002f50:	4638      	mov	r0, r7
 8002f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <__swbuf_r+0x9c>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	d101      	bne.n	8002f5e <__swbuf_r+0x7a>
 8002f5a:	68ac      	ldr	r4, [r5, #8]
 8002f5c:	e7cf      	b.n	8002efe <__swbuf_r+0x1a>
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <__swbuf_r+0xa0>)
 8002f60:	429c      	cmp	r4, r3
 8002f62:	bf08      	it	eq
 8002f64:	68ec      	ldreq	r4, [r5, #12]
 8002f66:	e7ca      	b.n	8002efe <__swbuf_r+0x1a>
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 f80c 	bl	8002f88 <__swsetup_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d0cb      	beq.n	8002f0c <__swbuf_r+0x28>
 8002f74:	f04f 37ff 	mov.w	r7, #4294967295
 8002f78:	e7ea      	b.n	8002f50 <__swbuf_r+0x6c>
 8002f7a:	bf00      	nop
 8002f7c:	08003198 	.word	0x08003198
 8002f80:	080031b8 	.word	0x080031b8
 8002f84:	08003178 	.word	0x08003178

08002f88 <__swsetup_r>:
 8002f88:	4b32      	ldr	r3, [pc, #200]	; (8003054 <__swsetup_r+0xcc>)
 8002f8a:	b570      	push	{r4, r5, r6, lr}
 8002f8c:	681d      	ldr	r5, [r3, #0]
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	b125      	cbz	r5, 8002f9e <__swsetup_r+0x16>
 8002f94:	69ab      	ldr	r3, [r5, #24]
 8002f96:	b913      	cbnz	r3, 8002f9e <__swsetup_r+0x16>
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f7ff fa73 	bl	8002484 <__sinit>
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <__swsetup_r+0xd0>)
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	d10f      	bne.n	8002fc4 <__swsetup_r+0x3c>
 8002fa4:	686c      	ldr	r4, [r5, #4]
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fac:	0719      	lsls	r1, r3, #28
 8002fae:	d42c      	bmi.n	800300a <__swsetup_r+0x82>
 8002fb0:	06dd      	lsls	r5, r3, #27
 8002fb2:	d411      	bmi.n	8002fd8 <__swsetup_r+0x50>
 8002fb4:	2309      	movs	r3, #9
 8002fb6:	6033      	str	r3, [r6, #0]
 8002fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fbc:	81a3      	strh	r3, [r4, #12]
 8002fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc2:	e03e      	b.n	8003042 <__swsetup_r+0xba>
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <__swsetup_r+0xd4>)
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	d101      	bne.n	8002fce <__swsetup_r+0x46>
 8002fca:	68ac      	ldr	r4, [r5, #8]
 8002fcc:	e7eb      	b.n	8002fa6 <__swsetup_r+0x1e>
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <__swsetup_r+0xd8>)
 8002fd0:	429c      	cmp	r4, r3
 8002fd2:	bf08      	it	eq
 8002fd4:	68ec      	ldreq	r4, [r5, #12]
 8002fd6:	e7e6      	b.n	8002fa6 <__swsetup_r+0x1e>
 8002fd8:	0758      	lsls	r0, r3, #29
 8002fda:	d512      	bpl.n	8003002 <__swsetup_r+0x7a>
 8002fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fde:	b141      	cbz	r1, 8002ff2 <__swsetup_r+0x6a>
 8002fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fe4:	4299      	cmp	r1, r3
 8002fe6:	d002      	beq.n	8002fee <__swsetup_r+0x66>
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7ff fb59 	bl	80026a0 <_free_r>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ff8:	81a3      	strh	r3, [r4, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	6923      	ldr	r3, [r4, #16]
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f043 0308 	orr.w	r3, r3, #8
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	6923      	ldr	r3, [r4, #16]
 800300c:	b94b      	cbnz	r3, 8003022 <__swsetup_r+0x9a>
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d003      	beq.n	8003022 <__swsetup_r+0x9a>
 800301a:	4621      	mov	r1, r4
 800301c:	4630      	mov	r0, r6
 800301e:	f7ff faf7 	bl	8002610 <__smakebuf_r>
 8003022:	89a0      	ldrh	r0, [r4, #12]
 8003024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003028:	f010 0301 	ands.w	r3, r0, #1
 800302c:	d00a      	beq.n	8003044 <__swsetup_r+0xbc>
 800302e:	2300      	movs	r3, #0
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	6963      	ldr	r3, [r4, #20]
 8003034:	425b      	negs	r3, r3
 8003036:	61a3      	str	r3, [r4, #24]
 8003038:	6923      	ldr	r3, [r4, #16]
 800303a:	b943      	cbnz	r3, 800304e <__swsetup_r+0xc6>
 800303c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003040:	d1ba      	bne.n	8002fb8 <__swsetup_r+0x30>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	0781      	lsls	r1, r0, #30
 8003046:	bf58      	it	pl
 8003048:	6963      	ldrpl	r3, [r4, #20]
 800304a:	60a3      	str	r3, [r4, #8]
 800304c:	e7f4      	b.n	8003038 <__swsetup_r+0xb0>
 800304e:	2000      	movs	r0, #0
 8003050:	e7f7      	b.n	8003042 <__swsetup_r+0xba>
 8003052:	bf00      	nop
 8003054:	20000030 	.word	0x20000030
 8003058:	08003198 	.word	0x08003198
 800305c:	080031b8 	.word	0x080031b8
 8003060:	08003178 	.word	0x08003178

08003064 <_close_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d06      	ldr	r5, [pc, #24]	; (8003080 <_close_r+0x1c>)
 8003068:	2300      	movs	r3, #0
 800306a:	4604      	mov	r4, r0
 800306c:	4608      	mov	r0, r1
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	f7fe fe45 	bl	8001cfe <_close>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_close_r+0x1a>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_close_r+0x1a>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	200000c8 	.word	0x200000c8

08003084 <_fstat_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4d07      	ldr	r5, [pc, #28]	; (80030a4 <_fstat_r+0x20>)
 8003088:	2300      	movs	r3, #0
 800308a:	4604      	mov	r4, r0
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	602b      	str	r3, [r5, #0]
 8003092:	f7fe fe40 	bl	8001d16 <_fstat>
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	d102      	bne.n	80030a0 <_fstat_r+0x1c>
 800309a:	682b      	ldr	r3, [r5, #0]
 800309c:	b103      	cbz	r3, 80030a0 <_fstat_r+0x1c>
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	bd38      	pop	{r3, r4, r5, pc}
 80030a2:	bf00      	nop
 80030a4:	200000c8 	.word	0x200000c8

080030a8 <_isatty_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	4d06      	ldr	r5, [pc, #24]	; (80030c4 <_isatty_r+0x1c>)
 80030ac:	2300      	movs	r3, #0
 80030ae:	4604      	mov	r4, r0
 80030b0:	4608      	mov	r0, r1
 80030b2:	602b      	str	r3, [r5, #0]
 80030b4:	f7fe fe3f 	bl	8001d36 <_isatty>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d102      	bne.n	80030c2 <_isatty_r+0x1a>
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	b103      	cbz	r3, 80030c2 <_isatty_r+0x1a>
 80030c0:	6023      	str	r3, [r4, #0]
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	200000c8 	.word	0x200000c8

080030c8 <_lseek_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4d07      	ldr	r5, [pc, #28]	; (80030e8 <_lseek_r+0x20>)
 80030cc:	4604      	mov	r4, r0
 80030ce:	4608      	mov	r0, r1
 80030d0:	4611      	mov	r1, r2
 80030d2:	2200      	movs	r2, #0
 80030d4:	602a      	str	r2, [r5, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7fe fe38 	bl	8001d4c <_lseek>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d102      	bne.n	80030e6 <_lseek_r+0x1e>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	b103      	cbz	r3, 80030e6 <_lseek_r+0x1e>
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	200000c8 	.word	0x200000c8

080030ec <__malloc_lock>:
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <__malloc_lock+0x8>)
 80030ee:	f7ff ba67 	b.w	80025c0 <__retarget_lock_acquire_recursive>
 80030f2:	bf00      	nop
 80030f4:	200000bc 	.word	0x200000bc

080030f8 <__malloc_unlock>:
 80030f8:	4801      	ldr	r0, [pc, #4]	; (8003100 <__malloc_unlock+0x8>)
 80030fa:	f7ff ba62 	b.w	80025c2 <__retarget_lock_release_recursive>
 80030fe:	bf00      	nop
 8003100:	200000bc 	.word	0x200000bc

08003104 <_read_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4d07      	ldr	r5, [pc, #28]	; (8003124 <_read_r+0x20>)
 8003108:	4604      	mov	r4, r0
 800310a:	4608      	mov	r0, r1
 800310c:	4611      	mov	r1, r2
 800310e:	2200      	movs	r2, #0
 8003110:	602a      	str	r2, [r5, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f7fe fdd6 	bl	8001cc4 <_read>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_read_r+0x1e>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_read_r+0x1e>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	200000c8 	.word	0x200000c8

08003128 <_init>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr

08003134 <_fini>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr
