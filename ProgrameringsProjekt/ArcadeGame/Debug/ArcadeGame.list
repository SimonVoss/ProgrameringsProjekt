
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039cc  080039cc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080039cc  080039cc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039cc  080039cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000090  08003a64  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003a64  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ab7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a1  00000000  00000000  00026b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00028118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00028990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114ab  00000000  00000000  00029110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b080  00000000  00000000  0003a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005acdc  00000000  00000000  0004563b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a0317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  000a0368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037a4 	.word	0x080037a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080037a4 	.word	0x080037a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	4608      	mov	r0, r1
 800027a:	4611      	mov	r1, r2
 800027c:	461a      	mov	r2, r3
 800027e:	4603      	mov	r3, r0
 8000280:	70fb      	strb	r3, [r7, #3]
 8000282:	460b      	mov	r3, r1
 8000284:	70bb      	strb	r3, [r7, #2]
 8000286:	4613      	mov	r3, r2
 8000288:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b04      	cmp	r3, #4
 8000296:	d821      	bhi.n	80002dc <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 800029e:	78ba      	ldrb	r2, [r7, #2]
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	461a      	mov	r2, r3
 80002aa:	231f      	movs	r3, #31
 80002ac:	4093      	lsls	r3, r2
 80002ae:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	43db      	mvns	r3, r3
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	4013      	ands	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	78ba      	ldrb	r2, [r7, #2]
 80002be:	4613      	mov	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4413      	add	r3, r2
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	631a      	str	r2, [r3, #48]	; 0x30
 80002da:	e074      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80002dc:	78bb      	ldrb	r3, [r7, #2]
 80002de:	2b09      	cmp	r3, #9
 80002e0:	d823      	bhi.n	800032a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002e6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80002e8:	78bb      	ldrb	r3, [r7, #2]
 80002ea:	1f5a      	subs	r2, r3, #5
 80002ec:	4613      	mov	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	461a      	mov	r2, r3
 80002f6:	231f      	movs	r3, #31
 80002f8:	4093      	lsls	r3, r2
 80002fa:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	43db      	mvns	r3, r3
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4013      	ands	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000306:	78f9      	ldrb	r1, [r7, #3]
 8000308:	78bb      	ldrb	r3, [r7, #2]
 800030a:	1f5a      	subs	r2, r3, #5
 800030c:	4613      	mov	r3, r2
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
 8000320:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
 8000328:	e04d      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 800032a:	78bb      	ldrb	r3, [r7, #2]
 800032c:	2b0e      	cmp	r3, #14
 800032e:	d825      	bhi.n	800037c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000334:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000336:	78bb      	ldrb	r3, [r7, #2]
 8000338:	f1a3 020a 	sub.w	r2, r3, #10
 800033c:	4613      	mov	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	461a      	mov	r2, r3
 8000346:	231f      	movs	r3, #31
 8000348:	4093      	lsls	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	43db      	mvns	r3, r3
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000356:	78f9      	ldrb	r1, [r7, #3]
 8000358:	78bb      	ldrb	r3, [r7, #2]
 800035a:	f1a3 020a 	sub.w	r2, r3, #10
 800035e:	4613      	mov	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	4313      	orrs	r3, r2
 8000372:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	639a      	str	r2, [r3, #56]	; 0x38
 800037a:	e024      	b.n	80003c6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000380:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000382:	78bb      	ldrb	r3, [r7, #2]
 8000384:	f1a3 020f 	sub.w	r2, r3, #15
 8000388:	4613      	mov	r3, r2
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	4413      	add	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	461a      	mov	r2, r3
 8000392:	231f      	movs	r3, #31
 8000394:	4093      	lsls	r3, r2
 8000396:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	43db      	mvns	r3, r3
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80003a2:	78f9      	ldrb	r1, [r7, #3]
 80003a4:	78bb      	ldrb	r3, [r7, #2]
 80003a6:	f1a3 020f 	sub.w	r2, r3, #15
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	4313      	orrs	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2b09      	cmp	r3, #9
 80003ca:	d923      	bls.n	8000414 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	f1a3 020a 	sub.w	r2, r3, #10
 80003d8:	4613      	mov	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	4413      	add	r3, r2
 80003de:	2207      	movs	r2, #7
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6999      	ldr	r1, [r3, #24]
 80003f8:	7878      	ldrb	r0, [r7, #1]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	f1a3 020a 	sub.w	r2, r3, #10
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	fa00 f303 	lsl.w	r3, r0, r3
 800040a:	ea41 0203 	orr.w	r2, r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000412:	e01f      	b.n	8000454 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	1e5a      	subs	r2, r3, #1
 800041e:	4613      	mov	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4413      	add	r3, r2
 8000424:	2238      	movs	r2, #56	; 0x38
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6959      	ldr	r1, [r3, #20]
 800043e:	7878      	ldrb	r0, [r7, #1]
 8000440:	78fa      	ldrb	r2, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	fa00 f303 	lsl.w	r3, r0, r3
 800044c:	ea41 0203 	orr.w	r2, r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	615a      	str	r2, [r3, #20]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f043 0204 	orr.w	r2, r3, #4
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	b29b      	uxth	r3, r3
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800049a:	b480      	push	{r7}
 800049c:	b085      	sub	sp, #20
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	4013      	ands	r3, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e001      	b.n	80004be <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004be:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004f4:	4b8b      	ldr	r3, [pc, #556]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f003 030c 	and.w	r3, r3, #12
 80004fc:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	2b08      	cmp	r3, #8
 8000502:	d011      	beq.n	8000528 <RCC_GetClocksFreq+0x5c>
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	2b08      	cmp	r3, #8
 8000508:	d837      	bhi.n	800057a <RCC_GetClocksFreq+0xae>
 800050a:	6a3b      	ldr	r3, [r7, #32]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <RCC_GetClocksFreq+0x4c>
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d004      	beq.n	8000520 <RCC_GetClocksFreq+0x54>
 8000516:	e030      	b.n	800057a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a83      	ldr	r2, [pc, #524]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800051c:	601a      	str	r2, [r3, #0]
      break;
 800051e:	e030      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a81      	ldr	r2, [pc, #516]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000524:	601a      	str	r2, [r3, #0]
      break;
 8000526:	e02c      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000528:	4b7e      	ldr	r3, [pc, #504]	; (8000724 <RCC_GetClocksFreq+0x258>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000530:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000532:	4b7c      	ldr	r3, [pc, #496]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800053a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	0c9b      	lsrs	r3, r3, #18
 8000540:	3302      	adds	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	4a77      	ldr	r2, [pc, #476]	; (800072c <RCC_GetClocksFreq+0x260>)
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	e00d      	b.n	8000572 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000556:	4b73      	ldr	r3, [pc, #460]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000562:	4a71      	ldr	r2, [pc, #452]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fbb2 f2f3 	udiv	r2, r2, r3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000576:	601a      	str	r2, [r3, #0]
      break;
 8000578:	e003      	b.n	8000582 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800057e:	601a      	str	r2, [r3, #0]
      break;
 8000580:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000582:	4b68      	ldr	r3, [pc, #416]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800058a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800058c:	6a3b      	ldr	r3, [r7, #32]
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000592:	4a67      	ldr	r2, [pc, #412]	; (8000730 <RCC_GetClocksFreq+0x264>)
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005aa:	4b5e      	ldr	r3, [pc, #376]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005b2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005ba:	4a5d      	ldr	r2, [pc, #372]	; (8000730 <RCC_GetClocksFreq+0x264>)
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005da:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80005dc:	6a3b      	ldr	r3, [r7, #32]
 80005de:	0adb      	lsrs	r3, r3, #11
 80005e0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80005e2:	4a53      	ldr	r2, [pc, #332]	; (8000730 <RCC_GetClocksFreq+0x264>)
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80005fa:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80005fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000602:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000604:	6a3b      	ldr	r3, [r7, #32]
 8000606:	091b      	lsrs	r3, r3, #4
 8000608:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800060a:	4a4a      	ldr	r2, [pc, #296]	; (8000734 <RCC_GetClocksFreq+0x268>)
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000612:	b29b      	uxth	r3, r3
 8000614:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	fbb2 f2f3 	udiv	r2, r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	e003      	b.n	8000636 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800063e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	0a5b      	lsrs	r3, r3, #9
 8000644:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000646:	4a3b      	ldr	r2, [pc, #236]	; (8000734 <RCC_GetClocksFreq+0x268>)
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	b29b      	uxth	r3, r3
 8000650:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800065c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	fbb2 f2f3 	udiv	r2, r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	e003      	b.n	8000672 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	2b10      	cmp	r3, #16
 800067c:	d003      	beq.n	8000686 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	e003      	b.n	800068e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	2b20      	cmp	r3, #32
 8000698:	d003      	beq.n	80006a2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <RCC_GetClocksFreq+0x25c>)
 800069e:	61da      	str	r2, [r3, #28]
 80006a0:	e003      	b.n	80006aa <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006b6:	d10d      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006be:	429a      	cmp	r2, r3
 80006c0:	d108      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d104      	bne.n	80006d4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	005a      	lsls	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	621a      	str	r2, [r3, #32]
 80006d2:	e003      	b.n	80006dc <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <RCC_GetClocksFreq+0x258>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e8:	d10d      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d108      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d104      	bne.n	8000706 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	005a      	lsls	r2, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
 8000704:	e003      	b.n	800070e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68da      	ldr	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <RCC_GetClocksFreq+0x258>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10e      	bne.n	8000738 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
 8000722:	e028      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
 8000724:	40021000 	.word	0x40021000
 8000728:	007a1200 	.word	0x007a1200
 800072c:	003d0900 	.word	0x003d0900
 8000730:	20000000 	.word	0x20000000
 8000734:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000738:	4b6c      	ldr	r3, [pc, #432]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	2b01      	cmp	r3, #1
 8000742:	d104      	bne.n	800074e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
 800074c:	e013      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800074e:	4b67      	ldr	r3, [pc, #412]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0303 	and.w	r3, r3, #3
 8000756:	2b02      	cmp	r3, #2
 8000758:	d104      	bne.n	8000764 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
 8000762:	e008      	b.n	8000776 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000764:	4b61      	ldr	r3, [pc, #388]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0303 	and.w	r3, r3, #3
 800076c:	2b03      	cmp	r3, #3
 800076e:	d102      	bne.n	8000776 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a5f      	ldr	r2, [pc, #380]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000776:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
 800078a:	e021      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800078c:	4b57      	ldr	r3, [pc, #348]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d104      	bne.n	80007a4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a2:	e015      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80007a4:	4b51      	ldr	r3, [pc, #324]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007b0:	d104      	bne.n	80007bc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ba:	e009      	b.n	80007d0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80007bc:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007c8:	d102      	bne.n	80007d0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d104      	bne.n	80007e6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689a      	ldr	r2, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
 80007e4:	e021      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007f2:	d104      	bne.n	80007fe <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
 80007fc:	e015      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800080a:	d104      	bne.n	8000816 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
 8000814:	e009      	b.n	800082a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800081e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000822:	d102      	bne.n	800082a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	e021      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800084c:	d104      	bne.n	8000858 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
 8000856:	e015      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000864:	d104      	bne.n	8000870 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	e009      	b.n	8000884 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800087c:	d102      	bne.n	8000884 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <RCC_GetClocksFreq+0x420>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000898:	e021      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <RCC_GetClocksFreq+0x420>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008a6:	d104      	bne.n	80008b2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008b0:	e015      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008be:	d104      	bne.n	80008ca <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008c8:	e009      	b.n	80008de <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <RCC_GetClocksFreq+0x420>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80008d6:	d102      	bne.n	80008de <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <RCC_GetClocksFreq+0x424>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008de:	bf00      	nop
 80008e0:	372c      	adds	r7, #44	; 0x2c
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	007a1200 	.word	0x007a1200

080008f4 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	b29b      	uxth	r3, r3
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800094a:	2201      	movs	r2, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d103      	bne.n	8000962 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	e005      	b.n	800096e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d102      	bne.n	800096e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	3308      	adds	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d006      	beq.n	8000982 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000980:	e006      	b.n	8000990 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	43da      	mvns	r2, r3
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	400a      	ands	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3724      	adds	r7, #36	; 0x24
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e001      	b.n	80009c0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2201      	movs	r2, #1
 80009e2:	fa02 f103 	lsl.w	r1, r2, r3
 80009e6:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <NVIC_EnableIRQ+0x30>)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <uart_put_char+0x30>)
 8000a16:	f7ff ff6d 	bl	80008f4 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a1a:	bf00      	nop
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <uart_put_char+0x30>)
 8000a20:	f7ff ffbc 	bl	800099c <USART_GetFlagStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f8      	beq.n	8000a1c <uart_put_char+0x18>
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400

08000a38 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e012      	b.n	8000a72 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b0a      	cmp	r3, #10
 8000a56:	d102      	bne.n	8000a5e <_write_r+0x26>
            uart_put_char('\r');
 8000a58:	200d      	movs	r0, #13
 8000a5a:	f7ff ffd3 	bl	8000a04 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffcc 	bl	8000a04 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbe8      	blt.n	8000a4c <_write_r+0x14>
    }

    return len;
 8000a7a:	683b      	ldr	r3, [r7, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000a8c:	4b86      	ldr	r3, [pc, #536]	; (8000ca8 <uart_init+0x224>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fe03 	bl	80026a0 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000a9a:	4b83      	ldr	r3, [pc, #524]	; (8000ca8 <uart_init+0x224>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fdfc 	bl	80026a0 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000aa8:	4b80      	ldr	r3, [pc, #512]	; (8000cac <uart_init+0x228>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a7f      	ldr	r2, [pc, #508]	; (8000cac <uart_init+0x228>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000ab4:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <uart_init+0x228>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a7c      	ldr	r2, [pc, #496]	; (8000cac <uart_init+0x228>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000ac0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ace:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ade:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000aee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000afa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000afe:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b0e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b1a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b1e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b24:	889b      	ldrh	r3, [r3, #4]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b2c:	f023 030c 	bic.w	r3, r3, #12
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000b34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b3c:	8892      	ldrh	r2, [r2, #4]
 8000b3e:	b292      	uxth	r2, r2
 8000b40:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000b42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b50:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000b52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b60:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b70:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b80:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <uart_init+0x22c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a4a      	ldr	r2, [pc, #296]	; (8000cb0 <uart_init+0x22c>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000b8e:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <uart_init+0x22c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a47      	ldr	r2, [pc, #284]	; (8000cb0 <uart_init+0x22c>)
 8000b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b98:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <uart_init+0x22c>)
 8000b9c:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <uart_init+0x22c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000ba2:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <uart_init+0x22c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <uart_init+0x22c>)
 8000ba8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bac:	f023 030c 	bic.w	r3, r3, #12
 8000bb0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <uart_init+0x22c>)
 8000bb4:	4a3e      	ldr	r2, [pc, #248]	; (8000cb0 <uart_init+0x22c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <uart_init+0x22c>)
 8000bbc:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <uart_init+0x22c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <uart_init+0x22c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <uart_init+0x22c>)
 8000bc8:	f043 030c 	orr.w	r3, r3, #12
 8000bcc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <uart_init+0x22c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4a37      	ldr	r2, [pc, #220]	; (8000cb0 <uart_init+0x22c>)
 8000bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bd8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <uart_init+0x22c>)
 8000bdc:	4a34      	ldr	r2, [pc, #208]	; (8000cb0 <uart_init+0x22c>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be6:	2300      	movs	r3, #0
 8000be8:	647b      	str	r3, [r7, #68]	; 0x44
 8000bea:	2300      	movs	r3, #0
 8000bec:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc6a 	bl	80004cc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <uart_init+0x22c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d010      	beq.n	8000c2a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0a:	005a      	lsls	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	fb01 f202 	mul.w	r2, r1, r2
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c28:	e00d      	b.n	8000c46 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	fb01 f202 	mul.w	r2, r1, r2
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d302      	bcc.n	8000c56 <uart_init+0x1d2>
        divider++;
 8000c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c52:	3301      	adds	r3, #1
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <uart_init+0x22c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00b      	beq.n	8000c7a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c6e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c72:	4013      	ands	r3, r2
 8000c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c76:	4313      	orrs	r3, r2
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <uart_init+0x22c>)
 8000c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <uart_init+0x22c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <uart_init+0x22c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <uart_init+0x230>)
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <uart_init+0x22c>)
 8000c94:	f7ff fe40 	bl	8000918 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000c98:	2026      	movs	r0, #38	; 0x26
 8000c9a:	f7ff fe99 	bl	80009d0 <NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3750      	adds	r7, #80	; 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000002c 	.word	0x2000002c
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	00050105 	.word	0x00050105

08000cb8 <ADCread>:
#include "adcRead.h"


int32_t ADCread(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_1Cycles5);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2109      	movs	r1, #9
 8000cc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cc8:	f7ff fad2 	bl	8000270 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8000ccc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cd0:	f7ff fbc6 	bl	8000460 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8000cd4:	bf00      	nop
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cdc:	f7ff fbdd 	bl	800049a <ADC_GetFlagStatus>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f7      	beq.n	8000cd6 <ADCread+0x1e>

	uint32_t joystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 8000ce6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cea:	f7ff fbc9 	bl	8000480 <ADC_GetConversionValue>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	607b      	str	r3, [r7, #4]

	if(joystickWay<=1000) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf8:	d801      	bhi.n	8000cfe <ADCread+0x46>
		return 1; //venstre
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e007      	b.n	8000d0e <ADCread+0x56>
	}else if(joystickWay>=3000) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d901      	bls.n	8000d0c <ADCread+0x54>
		return 2; //højre
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e000      	b.n	8000d0e <ADCread+0x56>
	}else {
		return 0;
 8000d0c:	2300      	movs	r3, #0
	}
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <fgcolor>:
#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000d22:	2316      	movs	r3, #22
 8000d24:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d904      	bls.n	8000d36 <fgcolor+0x1e>
	  type = 1;                // bold text
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3b08      	subs	r3, #8
 8000d34:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	331e      	adds	r3, #30
 8000d3c:	211b      	movs	r1, #27
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <fgcolor+0x34>)
 8000d40:	f001 fc80 	bl	8002644 <iprintf>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	080037bc 	.word	0x080037bc

08000d50 <color>:
      7        Gray
*/
  printf("%c[%dm", ESC, background+40);
}

void color(uint8_t foreground, uint8_t background) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
// combination of fgcolor() and bgcolor() - uses less bandwidth
  uint8_t type = 22;             // normal text
 8000d60:	2316      	movs	r3, #22
 8000d62:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d904      	bls.n	8000d74 <color+0x24>
	  type = 1;                // bold text
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3b08      	subs	r3, #8
 8000d72:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%d;%dm", ESC, type, foreground+30, background+40);
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f103 011e 	add.w	r1, r3, #30
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	3328      	adds	r3, #40	; 0x28
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	460b      	mov	r3, r1
 8000d84:	211b      	movs	r1, #27
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <color+0x44>)
 8000d88:	f001 fc5c 	bl	8002644 <iprintf>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	080037d0 	.word	0x080037d0

08000d98 <gotoxy>:

void clreol(void) {
	printf("%c[K", 0x1B);
}

void gotoxy(int32_t x, int32_t y) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", 0x1B,y,x);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	211b      	movs	r1, #27
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <gotoxy+0x20>)
 8000daa:	f001 fc4b 	bl	8002644 <iprintf>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	080037fc 	.word	0x080037fc

08000dbc <pinConfig>:
#include "config.h"

void pinConfig(void) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8000dc0:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <pinConfig+0x124>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <pinConfig+0x124>)
 8000dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dca:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8000dcc:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <pinConfig+0x124>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <pinConfig+0x124>)
 8000dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd6:	6153      	str	r3, [r2, #20]

	//pin A0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 8000dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000de2:	f023 0303 	bic.w	r3, r3, #3
 8000de6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8000df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8000e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin A1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 8000e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e1e:	f023 030c 	bic.w	r3, r3, #12
 8000e22:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8000e30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e3a:	f023 030c 	bic.w	r3, r3, #12
 8000e3e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 8000e40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C0
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <pinConfig+0x128>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <pinConfig+0x128>)
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <pinConfig+0x128>)
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <pinConfig+0x128>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <pinConfig+0x128>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <pinConfig+0x128>)
 8000e6a:	f023 0303 	bic.w	r3, r3, #3
 8000e6e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <pinConfig+0x128>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <pinConfig+0x128>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin C1
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <pinConfig+0x128>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <pinConfig+0x128>)
 8000e82:	f023 030c 	bic.w	r3, r3, #12
 8000e86:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <pinConfig+0x128>)
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <pinConfig+0x128>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <pinConfig+0x128>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <pinConfig+0x128>)
 8000e96:	f023 030c 	bic.w	r3, r3, #12
 8000e9a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <pinConfig+0x128>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <pinConfig+0x128>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C3
	GPIOC->MODER &= ~(0x00000003 << (3 * 2)); 		// Clear mode register
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <pinConfig+0x128>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <pinConfig+0x128>)
 8000eae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000eb2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (3 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <pinConfig+0x128>)
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <pinConfig+0x128>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (3 * 2)); 		// Clear push/pull register
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <pinConfig+0x128>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <pinConfig+0x128>)
 8000ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ec6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (3 * 2)); 		// Set push/pull register (0x00 -
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <pinConfig+0x128>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <pinConfig+0x128>)
 8000ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed2:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000800 	.word	0x48000800

08000ee8 <adcConfig>:

void adcConfig(void) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <adcConfig+0xd4>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	4a32      	ldr	r2, [pc, #200]	; (8000fbc <adcConfig+0xd4>)
 8000ef4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <adcConfig+0xd4>)
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <adcConfig+0xd4>)
 8000f00:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8000f04:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <adcConfig+0xd4>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <adcConfig+0xd4>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 8000f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8000f1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <adcConfig+0xd8>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8000f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8000f3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	e002      	b.n	8000f56 <adcConfig+0x6e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f5c:	dbf8      	blt.n	8000f50 <adcConfig+0x68>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8000f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f6c:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8000f6e:	bf00      	nop
 8000f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dafa      	bge.n	8000f70 <adcConfig+0x88>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	e002      	b.n	8000f86 <adcConfig+0x9e>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b63      	cmp	r3, #99	; 0x63
 8000f8a:	ddf9      	ble.n	8000f80 <adcConfig+0x98>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 8000f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 8000f9c:	bf00      	nop
 8000f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f8      	beq.n	8000f9e <adcConfig+0xb6>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	fdffc007 	.word	0xfdffc007

08000fc4 <config>:


void config(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	pinConfig();
 8000fc8:	f7ff fef8 	bl	8000dbc <pinConfig>
	adcConfig();
 8000fcc:	f7ff ff8c 	bl	8000ee8 <adcConfig>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <createEnemy>:
#include "enemy.h"

void createEnemy(badShip *enemy) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000fe6:	f7ff f943 	bl	8000270 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8000fea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000fee:	f7ff fa37 	bl	8000460 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8000ff2:	bf00      	nop
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ffa:	f7ff fa4e 	bl	800049a <ADC_GetFlagStatus>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f7      	beq.n	8000ff4 <createEnemy+0x20>

	uint32_t randSpawn = ADC_GetConversionValue(ADC1);
 8001004:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001008:	f7ff fa3a 	bl	8000480 <ADC_GetConversionValue>
 800100c:	4603      	mov	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 8001010:	2300      	movs	r3, #0
 8001012:	2201      	movs	r2, #1
 8001014:	2102      	movs	r1, #2
 8001016:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800101a:	f7ff f929 	bl	8000270 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 800101e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001022:	f7ff fa1d 	bl	8000460 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001026:	bf00      	nop
 8001028:	2104      	movs	r1, #4
 800102a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800102e:	f7ff fa34 	bl	800049a <ADC_GetFlagStatus>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f7      	beq.n	8001028 <createEnemy+0x54>

	randSpawn += ADC_GetConversionValue(ADC1);
 8001038:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800103c:	f7ff fa20 	bl	8000480 <ADC_GetConversionValue>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
	randSpawn = randSpawn%10;
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <createEnemy+0xc8>)
 800104e:	fba3 1302 	umull	r1, r3, r3, r2
 8001052:	08d9      	lsrs	r1, r3, #3
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	60fb      	str	r3, [r7, #12]
	enemy->x = 10+randSpawn*13;
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	f103 020a 	add.w	r2, r3, #10
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
	enemy->y = 10;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	220a      	movs	r2, #10
 8001078:	605a      	str	r2, [r3, #4]
	enemy->exist=1;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	609a      	str	r2, [r3, #8]
	enemyDraw(enemy->x, enemy->y);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f001 f81f 	bl	80020d0 <enemyDraw>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	cccccccd 	.word	0xcccccccd

080010a0 <moveEnemy>:

void moveEnemy(badShip *enemy) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(!(enemy->y==123)) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b7b      	cmp	r3, #123	; 0x7b
 80010ae:	d003      	beq.n	80010b8 <moveEnemy+0x18>
		slideEnemy(enemy);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f80e 	bl	80010d2 <slideEnemy>
	} else {
		enemyRemove(enemy->x, enemy->y);
	}
}
 80010b6:	e008      	b.n	80010ca <moveEnemy+0x2a>
		enemyRemove(enemy->x, enemy->y);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 f8cd 	bl	8002264 <enemyRemove>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <slideEnemy>:

void slideEnemy(badShip *enemy) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	fgcolor(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fe1c 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-3,enemy->y+1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	4610      	mov	r0, r2
 80010f2:	f7ff fe51 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80010f6:	20db      	movs	r0, #219	; 0xdb
 80010f8:	f001 fabc 	bl	8002674 <putchar>
	gotoxy(enemy->x+3,enemy->y+1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3303      	adds	r3, #3
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	3301      	adds	r3, #1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fe43 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001112:	20db      	movs	r0, #219	; 0xdb
 8001114:	f001 faae 	bl	8002674 <putchar>
	gotoxy(enemy->x-1,enemy->y-1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	3b01      	subs	r3, #1
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f7ff fe35 	bl	8000d98 <gotoxy>
	printf("%c",219);
 800112e:	20db      	movs	r0, #219	; 0xdb
 8001130:	f001 faa0 	bl	8002674 <putchar>
	gotoxy(enemy->x+1,enemy->y-1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	3b01      	subs	r3, #1
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff fe27 	bl	8000d98 <gotoxy>
	printf("%c",219);
 800114a:	20db      	movs	r0, #219	; 0xdb
 800114c:	f001 fa92 	bl	8002674 <putchar>
	gotoxy(enemy->x-2,enemy->y-2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b02      	subs	r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	3b02      	subs	r3, #2
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f7ff fe19 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001166:	20db      	movs	r0, #219	; 0xdb
 8001168:	f001 fa84 	bl	8002674 <putchar>
	gotoxy(enemy->x,enemy->y-2);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	3b02      	subs	r3, #2
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	f7ff fe0c 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001180:	20db      	movs	r0, #219	; 0xdb
 8001182:	f001 fa77 	bl	8002674 <putchar>
	gotoxy(enemy->x+2,enemy->y-2);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3302      	adds	r3, #2
 800118c:	461a      	mov	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	3b02      	subs	r3, #2
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	f7ff fdfe 	bl	8000d98 <gotoxy>
	printf("%c",219);
 800119c:	20db      	movs	r0, #219	; 0xdb
 800119e:	f001 fa69 	bl	8002674 <putchar>
	fgcolor(11);
 80011a2:	200b      	movs	r0, #11
 80011a4:	f7ff fdb8 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-1,enemy->y-3);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f7ff fded 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80011be:	20db      	movs	r0, #219	; 0xdb
 80011c0:	f001 fa58 	bl	8002674 <putchar>
	gotoxy(enemy->x+1,enemy->y-3);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff fddf 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80011da:	20db      	movs	r0, #219	; 0xdb
 80011dc:	f001 fa4a 	bl	8002674 <putchar>
	gotoxy(enemy->x,enemy->y-4);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	3b04      	subs	r3, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	f7ff fdd2 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80011f4:	20db      	movs	r0, #219	; 0xdb
 80011f6:	f001 fa3d 	bl	8002674 <putchar>
	fgcolor(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff fd8c 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-1,enemy->y-4);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	3b04      	subs	r3, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f7ff fdc1 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001216:	20db      	movs	r0, #219	; 0xdb
 8001218:	f001 fa2c 	bl	8002674 <putchar>
	gotoxy(enemy->x+1,enemy->y-4);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	3b04      	subs	r3, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4610      	mov	r0, r2
 800122e:	f7ff fdb3 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001232:	20db      	movs	r0, #219	; 0xdb
 8001234:	f001 fa1e 	bl	8002674 <putchar>
	fgcolor(0);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fd6d 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-3,enemy->y-4);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3b03      	subs	r3, #3
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	3b04      	subs	r3, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff fda2 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001254:	20db      	movs	r0, #219	; 0xdb
 8001256:	f001 fa0d 	bl	8002674 <putchar>
	gotoxy(enemy->x+3,enemy->y-4);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3303      	adds	r3, #3
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	3b04      	subs	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f7ff fd94 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001270:	20db      	movs	r0, #219	; 0xdb
 8001272:	f001 f9ff 	bl	8002674 <putchar>
	fgcolor(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff fd4e 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-3,enemy->y-5);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b03      	subs	r3, #3
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	3b05      	subs	r3, #5
 800128a:	4619      	mov	r1, r3
 800128c:	4610      	mov	r0, r2
 800128e:	f7ff fd83 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001292:	20db      	movs	r0, #219	; 0xdb
 8001294:	f001 f9ee 	bl	8002674 <putchar>
	gotoxy(enemy->x,enemy->y-5);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	3b05      	subs	r3, #5
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f7ff fd76 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80012ac:	20db      	movs	r0, #219	; 0xdb
 80012ae:	f001 f9e1 	bl	8002674 <putchar>
	gotoxy(enemy->x+3,enemy->y-5);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3303      	adds	r3, #3
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	3b05      	subs	r3, #5
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f7ff fd68 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80012c8:	20db      	movs	r0, #219	; 0xdb
 80012ca:	f001 f9d3 	bl	8002674 <putchar>
	fgcolor(0);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fd22 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-1,enemy->y-5);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	3b05      	subs	r3, #5
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff fd57 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80012ea:	20db      	movs	r0, #219	; 0xdb
 80012ec:	f001 f9c2 	bl	8002674 <putchar>
	gotoxy(enemy->x+1,enemy->y-5);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b05      	subs	r3, #5
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fd49 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001306:	20db      	movs	r0, #219	; 0xdb
 8001308:	f001 f9b4 	bl	8002674 <putchar>
	fgcolor(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fd03 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-4,enemy->y-6);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3b04      	subs	r3, #4
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	3b06      	subs	r3, #6
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f7ff fd38 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001328:	20db      	movs	r0, #219	; 0xdb
 800132a:	f001 f9a3 	bl	8002674 <putchar>
	gotoxy(enemy->x+4,enemy->y-6);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3304      	adds	r3, #4
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	3b06      	subs	r3, #6
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f7ff fd2a 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001344:	20db      	movs	r0, #219	; 0xdb
 8001346:	f001 f995 	bl	8002674 <putchar>
	fgcolor(0);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fce4 	bl	8000d18 <fgcolor>
	gotoxy(enemy->x-2,enemy->y-6);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b02      	subs	r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	3b06      	subs	r3, #6
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f7ff fd19 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001366:	20db      	movs	r0, #219	; 0xdb
 8001368:	f001 f984 	bl	8002674 <putchar>
	gotoxy(enemy->x,enemy->y-6);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	3b06      	subs	r3, #6
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fd0c 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001380:	20db      	movs	r0, #219	; 0xdb
 8001382:	f001 f977 	bl	8002674 <putchar>
	gotoxy(enemy->x+2,enemy->y-6);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3302      	adds	r3, #2
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	3b06      	subs	r3, #6
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fcfe 	bl	8000d98 <gotoxy>
	printf("%c",219);
 800139c:	20db      	movs	r0, #219	; 0xdb
 800139e:	f001 f969 	bl	8002674 <putchar>
	gotoxy(enemy->x-3,enemy->y-7);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b03      	subs	r3, #3
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	3b07      	subs	r3, #7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7ff fcf0 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80013b8:	20db      	movs	r0, #219	; 0xdb
 80013ba:	f001 f95b 	bl	8002674 <putchar>
	gotoxy(enemy->x+3,enemy->y-7);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3303      	adds	r3, #3
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	3b07      	subs	r3, #7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fce2 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80013d4:	20db      	movs	r0, #219	; 0xdb
 80013d6:	f001 f94d 	bl	8002674 <putchar>
	gotoxy(enemy->x-4,enemy->y-8);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3b04      	subs	r3, #4
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	3b08      	subs	r3, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7ff fcd4 	bl	8000d98 <gotoxy>
	printf("%c",219);
 80013f0:	20db      	movs	r0, #219	; 0xdb
 80013f2:	f001 f93f 	bl	8002674 <putchar>
	gotoxy(enemy->x+4,enemy->y-8);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3304      	adds	r3, #4
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	3b08      	subs	r3, #8
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fcc6 	bl	8000d98 <gotoxy>
	printf("%c",219);
 800140c:	20db      	movs	r0, #219	; 0xdb
 800140e:	f001 f931 	bl	8002674 <putchar>
	enemy->y++;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <makeBoard>:
		printf("%c",196);
	}
	printf("%c",217);
}

void makeBoard(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	int32_t i;
	int32_t j;
	fgcolor(3);
 800142a:	2003      	movs	r0, #3
 800142c:	f7ff fc74 	bl	8000d18 <fgcolor>
	gotoxy(1,1);
 8001430:	2101      	movs	r1, #1
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fcb0 	bl	8000d98 <gotoxy>
	printf("%c",218);
 8001438:	20da      	movs	r0, #218	; 0xda
 800143a:	f001 f91b 	bl	8002674 <putchar>
	for(i = 0; i <= 134; i++) {
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e005      	b.n	8001450 <makeBoard+0x2c>
		printf("%c",196);
 8001444:	20c4      	movs	r0, #196	; 0xc4
 8001446:	f001 f915 	bl	8002674 <putchar>
	for(i = 0; i <= 134; i++) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3301      	adds	r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b86      	cmp	r3, #134	; 0x86
 8001454:	ddf6      	ble.n	8001444 <makeBoard+0x20>
	}
	printf("%c",191);
 8001456:	20bf      	movs	r0, #191	; 0xbf
 8001458:	f001 f90c 	bl	8002674 <putchar>
	for(i = 2; i <= 123; i++) {
 800145c:	2302      	movs	r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	e018      	b.n	8001494 <makeBoard+0x70>
		gotoxy(1,i);
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fc97 	bl	8000d98 <gotoxy>
		printf("%c",179);
 800146a:	20b3      	movs	r0, #179	; 0xb3
 800146c:	f001 f902 	bl	8002674 <putchar>
		for(j = 0; j <= 134; j++) {
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e005      	b.n	8001482 <makeBoard+0x5e>
			printf(" ");
 8001476:	2020      	movs	r0, #32
 8001478:	f001 f8fc 	bl	8002674 <putchar>
		for(j = 0; j <= 134; j++) {
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b86      	cmp	r3, #134	; 0x86
 8001486:	ddf6      	ble.n	8001476 <makeBoard+0x52>
		}
		printf("%c",179);
 8001488:	20b3      	movs	r0, #179	; 0xb3
 800148a:	f001 f8f3 	bl	8002674 <putchar>
	for(i = 2; i <= 123; i++) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b7b      	cmp	r3, #123	; 0x7b
 8001498:	dde3      	ble.n	8001462 <makeBoard+0x3e>
	}
	gotoxy(1,124);
 800149a:	217c      	movs	r1, #124	; 0x7c
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fc7b 	bl	8000d98 <gotoxy>
	printf("%c",192);
 80014a2:	20c0      	movs	r0, #192	; 0xc0
 80014a4:	f001 f8e6 	bl	8002674 <putchar>
	for(i = 0; i <= 134; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	e005      	b.n	80014ba <makeBoard+0x96>
		printf("%c",196);
 80014ae:	20c4      	movs	r0, #196	; 0xc4
 80014b0:	f001 f8e0 	bl	8002674 <putchar>
	for(i = 0; i <= 134; i++) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b86      	cmp	r3, #134	; 0x86
 80014be:	ddf6      	ble.n	80014ae <makeBoard+0x8a>
	}
	printf("%c",217);
 80014c0:	20d9      	movs	r0, #217	; 0xd9
 80014c2:	f001 f8d7 	bl	8002674 <putchar>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM2_IRQHandler>:

//Initialicering af Programmer Start



void TIM2_IRQHandler(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	c=c+(1<<8);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <TIM2_IRQHandler+0x2c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <TIM2_IRQHandler+0x2c>)
 80014de:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~0x0001; // Clear interrupt bit
 80014e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6113      	str	r3, [r2, #16]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200000ac 	.word	0x200000ac

08001500 <main>:


//Initialicering af Programmer Slut


int main(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
	//Initialicering af forbindelse
	uart_init(1000000);
 8001506:	4816      	ldr	r0, [pc, #88]	; (8001560 <main+0x60>)
 8001508:	f7ff fabc 	bl	8000a84 <uart_init>
	int32_t i;
	color(15,0);
 800150c:	2100      	movs	r1, #0
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff fc1e 	bl	8000d50 <color>
	//Initialicering af Programmer i main Start
	config();
 8001514:	f7ff fd56 	bl	8000fc4 <config>
	//BuzzConfig();
	makeBoard();
 8001518:	f7ff ff84 	bl	8001424 <makeBoard>
	goodShip player;
	createPlayer(&player);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f821 	bl	8001568 <createPlayer>
	badShip enemy;
	createEnemy(&enemy);
 8001526:	463b      	mov	r3, r7
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fd53 	bl	8000fd4 <createEnemy>
	//Hentning af Statisk info Slut

	//Klad af funktioner
	while(1){
		//Hentning af kontinuerlig info Start
		int32_t joystickWay = ADCread();
 800152e:	f7ff fbc3 	bl	8000cb8 <ADCread>
 8001532:	61b8      	str	r0, [r7, #24]
		movePlayer(&player, joystickWay);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f829 	bl	8001592 <movePlayer>
		moveEnemy(&enemy);
 8001540:	463b      	mov	r3, r7
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fdac 	bl	80010a0 <moveEnemy>
		for(i=0; i<=100000;i++){}
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	e002      	b.n	8001554 <main+0x54>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4a03      	ldr	r2, [pc, #12]	; (8001564 <main+0x64>)
 8001558:	4293      	cmp	r3, r2
 800155a:	ddf8      	ble.n	800154e <main+0x4e>
	while(1){
 800155c:	e7e7      	b.n	800152e <main+0x2e>
 800155e:	bf00      	nop
 8001560:	000f4240 	.word	0x000f4240
 8001564:	000186a0 	.word	0x000186a0

08001568 <createPlayer>:
#include "player.h"

void createPlayer(goodShip *player) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	playerDraw(65,115);
 8001570:	2173      	movs	r1, #115	; 0x73
 8001572:	2041      	movs	r0, #65	; 0x41
 8001574:	f000 fcea 	bl	8001f4c <playerDraw>
	player->x = 65;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	601a      	str	r2, [r3, #0]
	player->y = 115;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2273      	movs	r2, #115	; 0x73
 8001582:	605a      	str	r2, [r3, #4]
	player->life = 3;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	609a      	str	r2, [r3, #8]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <movePlayer>:


void movePlayer(goodShip *player, int32_t joystick) {
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
	if(joystick == 1 && player->x>6) { //left
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10b      	bne.n	80015ba <movePlayer+0x28>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d907      	bls.n	80015ba <movePlayer+0x28>
		shiftLeft(player);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa68 	bl	8001a80 <shiftLeft>
		player->x--;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
	}
	if(joystick == 2 && player->x<132) {//right
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10b      	bne.n	80015d8 <movePlayer+0x46>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b83      	cmp	r3, #131	; 0x83
 80015c6:	d807      	bhi.n	80015d8 <movePlayer+0x46>
		shiftRight(player);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f809 	bl	80015e0 <shiftRight>
		player->x++;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
	}
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <shiftRight>:
	printf("%c", 219);
	gotoxy(player->x+4,player->y+8);
	printf("%c", 219);
}

void shiftRight(goodShip *player) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 80015e8:	200f      	movs	r0, #15
 80015ea:	f7ff fb95 	bl	8000d18 <fgcolor>
	gotoxy(player->x+1,player->y);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f7ff fbcb 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001602:	20db      	movs	r0, #219	; 0xdb
 8001604:	f001 f836 	bl	8002674 <putchar>
	fgcolor(0);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fb85 	bl	8000d18 <fgcolor>
	gotoxy(player->x,player->y);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff fbbc 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001620:	20db      	movs	r0, #219	; 0xdb
 8001622:	f001 f827 	bl	8002674 <putchar>
	fgcolor(15);
 8001626:	200f      	movs	r0, #15
 8001628:	f7ff fb76 	bl	8000d18 <fgcolor>
	gotoxy(player->x-2,player->y+1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3b02      	subs	r3, #2
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f7ff fbab 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001642:	20db      	movs	r0, #219	; 0xdb
 8001644:	f001 f816 	bl	8002674 <putchar>
	gotoxy(player->x+1,player->y+1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f7ff fb9d 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800165e:	20db      	movs	r0, #219	; 0xdb
 8001660:	f001 f808 	bl	8002674 <putchar>
	gotoxy(player->x+4,player->y+1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3304      	adds	r3, #4
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	4619      	mov	r1, r3
 8001674:	4610      	mov	r0, r2
 8001676:	f7ff fb8f 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800167a:	20db      	movs	r0, #219	; 0xdb
 800167c:	f000 fffa 	bl	8002674 <putchar>
	fgcolor(0);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fb49 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3b03      	subs	r3, #3
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f7ff fb7e 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800169c:	20db      	movs	r0, #219	; 0xdb
 800169e:	f000 ffe9 	bl	8002674 <putchar>
	gotoxy(player->x,player->y+1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	4610      	mov	r0, r2
 80016b2:	f7ff fb71 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80016b6:	20db      	movs	r0, #219	; 0xdb
 80016b8:	f000 ffdc 	bl	8002674 <putchar>
	gotoxy(player->x+3,player->y+1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3303      	adds	r3, #3
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fb63 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80016d2:	20db      	movs	r0, #219	; 0xdb
 80016d4:	f000 ffce 	bl	8002674 <putchar>
	fgcolor(15);
 80016d8:	200f      	movs	r0, #15
 80016da:	f7ff fb1d 	bl	8000d18 <fgcolor>
	gotoxy(player->x-2,player->y+2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3b02      	subs	r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	3302      	adds	r3, #2
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f7ff fb52 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80016f4:	20db      	movs	r0, #219	; 0xdb
 80016f6:	f000 ffbd 	bl	8002674 <putchar>
	gotoxy(player->x+1,player->y+2);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fb44 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001710:	20db      	movs	r0, #219	; 0xdb
 8001712:	f000 ffaf 	bl	8002674 <putchar>
	gotoxy(player->x+2,player->y+2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3302      	adds	r3, #2
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	3302      	adds	r3, #2
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7ff fb36 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800172c:	20db      	movs	r0, #219	; 0xdb
 800172e:	f000 ffa1 	bl	8002674 <putchar>
	gotoxy(player->x+4,player->y+2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3304      	adds	r3, #4
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	3302      	adds	r3, #2
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7ff fb28 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001748:	20db      	movs	r0, #219	; 0xdb
 800174a:	f000 ff93 	bl	8002674 <putchar>
	fgcolor(0);
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fae2 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b03      	subs	r3, #3
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	3302      	adds	r3, #2
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7ff fb17 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800176a:	20db      	movs	r0, #219	; 0xdb
 800176c:	f000 ff82 	bl	8002674 <putchar>
	gotoxy(player->x-1,player->y+2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	3302      	adds	r3, #2
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fb09 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001786:	20db      	movs	r0, #219	; 0xdb
 8001788:	f000 ff74 	bl	8002674 <putchar>
	gotoxy(player->x+3,player->y+2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3303      	adds	r3, #3
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	3302      	adds	r3, #2
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff fafb 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80017a2:	20db      	movs	r0, #219	; 0xdb
 80017a4:	f000 ff66 	bl	8002674 <putchar>
	fgcolor(15);
 80017a8:	200f      	movs	r0, #15
 80017aa:	f7ff fab5 	bl	8000d18 <fgcolor>
	gotoxy(player->x,player->y+3);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	3303      	adds	r3, #3
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff faeb 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80017c2:	20db      	movs	r0, #219	; 0xdb
 80017c4:	f000 ff56 	bl	8002674 <putchar>
	fgcolor(4);
 80017c8:	2004      	movs	r0, #4
 80017ca:	f7ff faa5 	bl	8000d18 <fgcolor>
	printf("%c", 219);
 80017ce:	20db      	movs	r0, #219	; 0xdb
 80017d0:	f000 ff50 	bl	8002674 <putchar>
	fgcolor(15);
 80017d4:	200f      	movs	r0, #15
 80017d6:	f7ff fa9f 	bl	8000d18 <fgcolor>
	gotoxy(player->x+4,player->y+3);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3304      	adds	r3, #4
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	3303      	adds	r3, #3
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f7ff fad4 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80017f0:	20db      	movs	r0, #219	; 0xdb
 80017f2:	f000 ff3f 	bl	8002674 <putchar>
	fgcolor(0);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fa8e 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+3);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b03      	subs	r3, #3
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	3303      	adds	r3, #3
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7ff fac3 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001812:	20db      	movs	r0, #219	; 0xdb
 8001814:	f000 ff2e 	bl	8002674 <putchar>
	fgcolor(15);
 8001818:	200f      	movs	r0, #15
 800181a:	f7ff fa7d 	bl	8000d18 <fgcolor>
	gotoxy(player->x-1,player->y+4);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fab2 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001834:	20db      	movs	r0, #219	; 0xdb
 8001836:	f000 ff1d 	bl	8002674 <putchar>
	fgcolor(4);
 800183a:	2004      	movs	r0, #4
 800183c:	f7ff fa6c 	bl	8000d18 <fgcolor>
	gotoxy(player->x+2,player->y+4);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3302      	adds	r3, #2
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f7ff faa1 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001856:	20db      	movs	r0, #219	; 0xdb
 8001858:	f000 ff0c 	bl	8002674 <putchar>
	fgcolor(15);
 800185c:	200f      	movs	r0, #15
 800185e:	f7ff fa5b 	bl	8000d18 <fgcolor>
	printf("%c", 219);
 8001862:	20db      	movs	r0, #219	; 0xdb
 8001864:	f000 ff06 	bl	8002674 <putchar>
	fgcolor(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fa55 	bl	8000d18 <fgcolor>
	gotoxy(player->x-2,player->y+4);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b02      	subs	r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f7ff fa8a 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001884:	20db      	movs	r0, #219	; 0xdb
 8001886:	f000 fef5 	bl	8002674 <putchar>
	fgcolor(15);
 800188a:	200f      	movs	r0, #15
 800188c:	f7ff fa44 	bl	8000d18 <fgcolor>
	gotoxy(player->x+4, player->y+5);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3304      	adds	r3, #4
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	3305      	adds	r3, #5
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fa79 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80018a6:	20db      	movs	r0, #219	; 0xdb
 80018a8:	f000 fee4 	bl	8002674 <putchar>
	fgcolor(0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fa33 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+5);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3b03      	subs	r3, #3
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	3305      	adds	r3, #5
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fa68 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80018c8:	20db      	movs	r0, #219	; 0xdb
 80018ca:	f000 fed3 	bl	8002674 <putchar>
	fgcolor(15);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f7ff fa22 	bl	8000d18 <fgcolor>
	gotoxy(player->x-1, player->y+6);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3306      	adds	r3, #6
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fa57 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80018ea:	20db      	movs	r0, #219	; 0xdb
 80018ec:	f000 fec2 	bl	8002674 <putchar>
	gotoxy(player->x+1, player->y+6);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	3306      	adds	r3, #6
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff fa49 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001906:	20db      	movs	r0, #219	; 0xdb
 8001908:	f000 feb4 	bl	8002674 <putchar>
	gotoxy(player->x+5, player->y+6);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3305      	adds	r3, #5
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	3306      	adds	r3, #6
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f7ff fa3b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001922:	20db      	movs	r0, #219	; 0xdb
 8001924:	f000 fea6 	bl	8002674 <putchar>
	fgcolor(0);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f9f5 	bl	8000d18 <fgcolor>
	gotoxy(player->x-4,player->y+6);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3b04      	subs	r3, #4
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	3306      	adds	r3, #6
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f7ff fa2a 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001944:	20db      	movs	r0, #219	; 0xdb
 8001946:	f000 fe95 	bl	8002674 <putchar>
	gotoxy(player->x,player->y+6);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	3306      	adds	r3, #6
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f7ff fa1d 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800195e:	20db      	movs	r0, #219	; 0xdb
 8001960:	f000 fe88 	bl	8002674 <putchar>
	gotoxy(player->x+2,player->y+6);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3302      	adds	r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	3306      	adds	r3, #6
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff fa0f 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800197a:	20db      	movs	r0, #219	; 0xdb
 800197c:	f000 fe7a 	bl	8002674 <putchar>
	fgcolor(15);
 8001980:	200f      	movs	r0, #15
 8001982:	f7ff f9c9 	bl	8000d18 <fgcolor>
	gotoxy(player->x-2,player->y+7);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3b02      	subs	r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	3307      	adds	r3, #7
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff f9fe 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 800199c:	20db      	movs	r0, #219	; 0xdb
 800199e:	f000 fe69 	bl	8002674 <putchar>
	gotoxy(player->x+5,player->y+7);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3305      	adds	r3, #5
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	3307      	adds	r3, #7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff f9f0 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80019b8:	20db      	movs	r0, #219	; 0xdb
 80019ba:	f000 fe5b 	bl	8002674 <putchar>
	fgcolor(0);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff f9aa 	bl	8000d18 <fgcolor>
	gotoxy(player->x-4,player->y+7);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3b04      	subs	r3, #4
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3307      	adds	r3, #7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff f9df 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80019da:	20db      	movs	r0, #219	; 0xdb
 80019dc:	f000 fe4a 	bl	8002674 <putchar>
	gotoxy(player->x+3,player->y+7);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3303      	adds	r3, #3
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	3307      	adds	r3, #7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff f9d1 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 80019f6:	20db      	movs	r0, #219	; 0xdb
 80019f8:	f000 fe3c 	bl	8002674 <putchar>
	fgcolor(15);
 80019fc:	200f      	movs	r0, #15
 80019fe:	f7ff f98b 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+8);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3b03      	subs	r3, #3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	3308      	adds	r3, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff f9c0 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001a18:	20db      	movs	r0, #219	; 0xdb
 8001a1a:	f000 fe2b 	bl	8002674 <putchar>
	gotoxy(player->x+5,player->y+8);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3305      	adds	r3, #5
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff f9b2 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001a34:	20db      	movs	r0, #219	; 0xdb
 8001a36:	f000 fe1d 	bl	8002674 <putchar>
	fgcolor(0);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff f96c 	bl	8000d18 <fgcolor>
	gotoxy(player->x-4,player->y+8);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b04      	subs	r3, #4
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff f9a1 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001a56:	20db      	movs	r0, #219	; 0xdb
 8001a58:	f000 fe0c 	bl	8002674 <putchar>
	gotoxy(player->x+4,player->y+8);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	3308      	adds	r3, #8
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f7ff f993 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001a72:	20db      	movs	r0, #219	; 0xdb
 8001a74:	f000 fdfe 	bl	8002674 <putchar>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <shiftLeft>:
	printf("%c", 219);
	gotoxy(player->x-4,player->y+8);
	printf("%c", 219);
}

void shiftLeft(goodShip *player) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f7ff f945 	bl	8000d18 <fgcolor>
	gotoxy(player->x-1,player->y);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f7ff f97b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001aa2:	20db      	movs	r0, #219	; 0xdb
 8001aa4:	f000 fde6 	bl	8002674 <putchar>
	fgcolor(0);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff f935 	bl	8000d18 <fgcolor>
	gotoxy(player->x,player->y);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f7ff f96c 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ac0:	20db      	movs	r0, #219	; 0xdb
 8001ac2:	f000 fdd7 	bl	8002674 <putchar>
	fgcolor(15);
 8001ac6:	200f      	movs	r0, #15
 8001ac8:	f7ff f926 	bl	8000d18 <fgcolor>
	gotoxy(player->x+2,player->y+1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4619      	mov	r1, r3
 8001adc:	4610      	mov	r0, r2
 8001ade:	f7ff f95b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ae2:	20db      	movs	r0, #219	; 0xdb
 8001ae4:	f000 fdc6 	bl	8002674 <putchar>
	gotoxy(player->x-1,player->y+1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f7ff f94d 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001afe:	20db      	movs	r0, #219	; 0xdb
 8001b00:	f000 fdb8 	bl	8002674 <putchar>
	gotoxy(player->x-4,player->y+1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3b04      	subs	r3, #4
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff f93f 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001b1a:	20db      	movs	r0, #219	; 0xdb
 8001b1c:	f000 fdaa 	bl	8002674 <putchar>
	fgcolor(0);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff f8f9 	bl	8000d18 <fgcolor>
	gotoxy(player->x+3,player->y+1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3303      	adds	r3, #3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f7ff f92e 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001b3c:	20db      	movs	r0, #219	; 0xdb
 8001b3e:	f000 fd99 	bl	8002674 <putchar>
	gotoxy(player->x,player->y+1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff f921 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001b56:	20db      	movs	r0, #219	; 0xdb
 8001b58:	f000 fd8c 	bl	8002674 <putchar>
	gotoxy(player->x-3,player->y+1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff f913 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001b72:	20db      	movs	r0, #219	; 0xdb
 8001b74:	f000 fd7e 	bl	8002674 <putchar>
	fgcolor(15);
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f7ff f8cd 	bl	8000d18 <fgcolor>
	gotoxy(player->x+2,player->y+2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3302      	adds	r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f902 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001b94:	20db      	movs	r0, #219	; 0xdb
 8001b96:	f000 fd6d 	bl	8002674 <putchar>
	gotoxy(player->x-1,player->y+2);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff f8f4 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001bb0:	20db      	movs	r0, #219	; 0xdb
 8001bb2:	f000 fd5f 	bl	8002674 <putchar>
	gotoxy(player->x-2,player->y+2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b02      	subs	r3, #2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff f8e6 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001bcc:	20db      	movs	r0, #219	; 0xdb
 8001bce:	f000 fd51 	bl	8002674 <putchar>
	gotoxy(player->x-4,player->y+2);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	3302      	adds	r3, #2
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff f8d8 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001be8:	20db      	movs	r0, #219	; 0xdb
 8001bea:	f000 fd43 	bl	8002674 <putchar>
	fgcolor(0);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff f892 	bl	8000d18 <fgcolor>
	gotoxy(player->x+3,player->y+2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	3302      	adds	r3, #2
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff f8c7 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001c0a:	20db      	movs	r0, #219	; 0xdb
 8001c0c:	f000 fd32 	bl	8002674 <putchar>
	gotoxy(player->x+1,player->y+2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7ff f8b9 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001c26:	20db      	movs	r0, #219	; 0xdb
 8001c28:	f000 fd24 	bl	8002674 <putchar>
	gotoxy(player->x-3,player->y+2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7ff f8ab 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001c42:	20db      	movs	r0, #219	; 0xdb
 8001c44:	f000 fd16 	bl	8002674 <putchar>
	fgcolor(15);
 8001c48:	200f      	movs	r0, #15
 8001c4a:	f7ff f865 	bl	8000d18 <fgcolor>
	gotoxy(player->x,player->y+3);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	3303      	adds	r3, #3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f7ff f89b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001c62:	20db      	movs	r0, #219	; 0xdb
 8001c64:	f000 fd06 	bl	8002674 <putchar>
	fgcolor(4);
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f7ff f855 	bl	8000d18 <fgcolor>
	gotoxy(player->x-1,player->y+3);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7ff f88a 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001c84:	20db      	movs	r0, #219	; 0xdb
 8001c86:	f000 fcf5 	bl	8002674 <putchar>
	fgcolor(15);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f7ff f844 	bl	8000d18 <fgcolor>
	gotoxy(player->x-4,player->y+3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b04      	subs	r3, #4
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f7ff f879 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ca6:	20db      	movs	r0, #219	; 0xdb
 8001ca8:	f000 fce4 	bl	8002674 <putchar>
	fgcolor(0);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff f833 	bl	8000d18 <fgcolor>
	gotoxy(player->x+3,player->y+3);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	3303      	adds	r3, #3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff f868 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001cc8:	20db      	movs	r0, #219	; 0xdb
 8001cca:	f000 fcd3 	bl	8002674 <putchar>
	fgcolor(15);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f7ff f822 	bl	8000d18 <fgcolor>
	gotoxy(player->x+1,player->y+4);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f7ff f857 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001cea:	20db      	movs	r0, #219	; 0xdb
 8001cec:	f000 fcc2 	bl	8002674 <putchar>
	fgcolor(4);
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f7ff f811 	bl	8000d18 <fgcolor>
	gotoxy(player->x-2,player->y+4);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3b02      	subs	r3, #2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff f846 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001d0c:	20db      	movs	r0, #219	; 0xdb
 8001d0e:	f000 fcb1 	bl	8002674 <putchar>
	fgcolor(15);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f7ff f800 	bl	8000d18 <fgcolor>
	gotoxy(player->x-3,player->y+4);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f7ff f835 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001d2e:	20db      	movs	r0, #219	; 0xdb
 8001d30:	f000 fca0 	bl	8002674 <putchar>
	fgcolor(0);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7fe ffef 	bl	8000d18 <fgcolor>
	gotoxy(player->x+2,player->y+4);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff f824 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001d50:	20db      	movs	r0, #219	; 0xdb
 8001d52:	f000 fc8f 	bl	8002674 <putchar>
	fgcolor(15);
 8001d56:	200f      	movs	r0, #15
 8001d58:	f7fe ffde 	bl	8000d18 <fgcolor>
	gotoxy(player->x-4, player->y+5);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3b04      	subs	r3, #4
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	3305      	adds	r3, #5
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	f7ff f813 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001d72:	20db      	movs	r0, #219	; 0xdb
 8001d74:	f000 fc7e 	bl	8002674 <putchar>
	fgcolor(0);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe ffcd 	bl	8000d18 <fgcolor>
	gotoxy(player->x+3,player->y+5);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3303      	adds	r3, #3
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	3305      	adds	r3, #5
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7ff f802 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001d94:	20db      	movs	r0, #219	; 0xdb
 8001d96:	f000 fc6d 	bl	8002674 <putchar>
	fgcolor(15);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f7fe ffbc 	bl	8000d18 <fgcolor>
	gotoxy(player->x+1, player->y+6);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	3306      	adds	r3, #6
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f7fe fff1 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001db6:	20db      	movs	r0, #219	; 0xdb
 8001db8:	f000 fc5c 	bl	8002674 <putchar>
	gotoxy(player->x-1, player->y+6);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	3306      	adds	r3, #6
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f7fe ffe3 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001dd2:	20db      	movs	r0, #219	; 0xdb
 8001dd4:	f000 fc4e 	bl	8002674 <putchar>
	gotoxy(player->x-5, player->y+6);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3b05      	subs	r3, #5
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	3306      	adds	r3, #6
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe ffd5 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001dee:	20db      	movs	r0, #219	; 0xdb
 8001df0:	f000 fc40 	bl	8002674 <putchar>
	fgcolor(0);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7fe ff8f 	bl	8000d18 <fgcolor>
	gotoxy(player->x+4,player->y+6);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	3306      	adds	r3, #6
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7fe ffc4 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001e10:	20db      	movs	r0, #219	; 0xdb
 8001e12:	f000 fc2f 	bl	8002674 <putchar>
	gotoxy(player->x,player->y+6);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	3306      	adds	r3, #6
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7fe ffb7 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001e2a:	20db      	movs	r0, #219	; 0xdb
 8001e2c:	f000 fc22 	bl	8002674 <putchar>
	gotoxy(player->x-2,player->y+6);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3b02      	subs	r3, #2
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7fe ffa9 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001e46:	20db      	movs	r0, #219	; 0xdb
 8001e48:	f000 fc14 	bl	8002674 <putchar>
	fgcolor(15);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f7fe ff63 	bl	8000d18 <fgcolor>
	gotoxy(player->x+2,player->y+7);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3302      	adds	r3, #2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	3307      	adds	r3, #7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7fe ff98 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001e68:	20db      	movs	r0, #219	; 0xdb
 8001e6a:	f000 fc03 	bl	8002674 <putchar>
	gotoxy(player->x-5,player->y+7);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3b05      	subs	r3, #5
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe ff8a 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001e84:	20db      	movs	r0, #219	; 0xdb
 8001e86:	f000 fbf5 	bl	8002674 <putchar>
	fgcolor(0);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7fe ff44 	bl	8000d18 <fgcolor>
	gotoxy(player->x+4,player->y+7);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3304      	adds	r3, #4
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe ff79 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ea6:	20db      	movs	r0, #219	; 0xdb
 8001ea8:	f000 fbe4 	bl	8002674 <putchar>
	gotoxy(player->x-3,player->y+7);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3307      	adds	r3, #7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7fe ff6b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ec2:	20db      	movs	r0, #219	; 0xdb
 8001ec4:	f000 fbd6 	bl	8002674 <putchar>
	fgcolor(15);
 8001ec8:	200f      	movs	r0, #15
 8001eca:	f7fe ff25 	bl	8000d18 <fgcolor>
	gotoxy(player->x+3,player->y+8);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	3308      	adds	r3, #8
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f7fe ff5a 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001ee4:	20db      	movs	r0, #219	; 0xdb
 8001ee6:	f000 fbc5 	bl	8002674 <putchar>
	gotoxy(player->x-5,player->y+8);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3b05      	subs	r3, #5
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7fe ff4c 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001f00:	20db      	movs	r0, #219	; 0xdb
 8001f02:	f000 fbb7 	bl	8002674 <putchar>
	fgcolor(0);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe ff06 	bl	8000d18 <fgcolor>
	gotoxy(player->x+4,player->y+8);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3304      	adds	r3, #4
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	3308      	adds	r3, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f7fe ff3b 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001f22:	20db      	movs	r0, #219	; 0xdb
 8001f24:	f000 fba6 	bl	8002674 <putchar>
	gotoxy(player->x-4,player->y+8);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3b04      	subs	r3, #4
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	3308      	adds	r3, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7fe ff2d 	bl	8000d98 <gotoxy>
	printf("%c", 219);
 8001f3e:	20db      	movs	r0, #219	; 0xdb
 8001f40:	f000 fb98 	bl	8002674 <putchar>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <playerDraw>:
#include "sprite.h"

void playerDraw(int32_t x, int32_t y) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	fgcolor(15);
 8001f56:	200f      	movs	r0, #15
 8001f58:	f7fe fede 	bl	8000d18 <fgcolor>
	gotoxy(x,y);
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe ff1a 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001f64:	20db      	movs	r0, #219	; 0xdb
 8001f66:	f000 fb85 	bl	8002674 <putchar>
	gotoxy(x-3,y+1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1eda      	subs	r2, r3, #3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f7fe ff0f 	bl	8000d98 <gotoxy>
	printf("%c  %c  %c",219,219,219);
 8001f7a:	23db      	movs	r3, #219	; 0xdb
 8001f7c:	22db      	movs	r2, #219	; 0xdb
 8001f7e:	21db      	movs	r1, #219	; 0xdb
 8001f80:	484c      	ldr	r0, [pc, #304]	; (80020b4 <playerDraw+0x168>)
 8001f82:	f000 fb5f 	bl	8002644 <iprintf>
	gotoxy(x-3,y+2);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1eda      	subs	r2, r3, #3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7fe ff01 	bl	8000d98 <gotoxy>
	printf("%c %c%c%c %c",219,219,219,219,219);
 8001f96:	23db      	movs	r3, #219	; 0xdb
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	23db      	movs	r3, #219	; 0xdb
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	23db      	movs	r3, #219	; 0xdb
 8001fa0:	22db      	movs	r2, #219	; 0xdb
 8001fa2:	21db      	movs	r1, #219	; 0xdb
 8001fa4:	4844      	ldr	r0, [pc, #272]	; (80020b8 <playerDraw+0x16c>)
 8001fa6:	f000 fb4d 	bl	8002644 <iprintf>
	gotoxy(x-3,y+3);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	1eda      	subs	r2, r3, #3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	f7fe feef 	bl	8000d98 <gotoxy>
	printf("%c%c%c",219,219,219);
 8001fba:	23db      	movs	r3, #219	; 0xdb
 8001fbc:	22db      	movs	r2, #219	; 0xdb
 8001fbe:	21db      	movs	r1, #219	; 0xdb
 8001fc0:	483e      	ldr	r0, [pc, #248]	; (80020bc <playerDraw+0x170>)
 8001fc2:	f000 fb3f 	bl	8002644 <iprintf>
	fgcolor(4);
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	f7fe fea6 	bl	8000d18 <fgcolor>
	printf("%c",219);
 8001fcc:	20db      	movs	r0, #219	; 0xdb
 8001fce:	f000 fb51 	bl	8002674 <putchar>
	fgcolor(15);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7fe fea0 	bl	8000d18 <fgcolor>
	printf("%c%c%c",219,219,219);
 8001fd8:	23db      	movs	r3, #219	; 0xdb
 8001fda:	22db      	movs	r2, #219	; 0xdb
 8001fdc:	21db      	movs	r1, #219	; 0xdb
 8001fde:	4837      	ldr	r0, [pc, #220]	; (80020bc <playerDraw+0x170>)
 8001fe0:	f000 fb30 	bl	8002644 <iprintf>
	gotoxy(x-2,y+4);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1e9a      	subs	r2, r3, #2
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f7fe fed2 	bl	8000d98 <gotoxy>
	printf("%c",219);
 8001ff4:	20db      	movs	r0, #219	; 0xdb
 8001ff6:	f000 fb3d 	bl	8002674 <putchar>
	fgcolor(4);
 8001ffa:	2004      	movs	r0, #4
 8001ffc:	f7fe fe8c 	bl	8000d18 <fgcolor>
	printf("%c%c%c",219,219,219);
 8002000:	23db      	movs	r3, #219	; 0xdb
 8002002:	22db      	movs	r2, #219	; 0xdb
 8002004:	21db      	movs	r1, #219	; 0xdb
 8002006:	482d      	ldr	r0, [pc, #180]	; (80020bc <playerDraw+0x170>)
 8002008:	f000 fb1c 	bl	8002644 <iprintf>
	fgcolor(15);
 800200c:	200f      	movs	r0, #15
 800200e:	f7fe fe83 	bl	8000d18 <fgcolor>
	printf("%c",219);
 8002012:	20db      	movs	r0, #219	; 0xdb
 8002014:	f000 fb2e 	bl	8002674 <putchar>
	gotoxy(x-3,y+5);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1eda      	subs	r2, r3, #3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3305      	adds	r3, #5
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f7fe feb8 	bl	8000d98 <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 8002028:	23db      	movs	r3, #219	; 0xdb
 800202a:	9303      	str	r3, [sp, #12]
 800202c:	23db      	movs	r3, #219	; 0xdb
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	23db      	movs	r3, #219	; 0xdb
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	23db      	movs	r3, #219	; 0xdb
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	23db      	movs	r3, #219	; 0xdb
 800203a:	22db      	movs	r2, #219	; 0xdb
 800203c:	21db      	movs	r1, #219	; 0xdb
 800203e:	4820      	ldr	r0, [pc, #128]	; (80020c0 <playerDraw+0x174>)
 8002040:	f000 fb00 	bl	8002644 <iprintf>
	gotoxy(x-4,y+6);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	1f1a      	subs	r2, r3, #4
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3306      	adds	r3, #6
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7fe fea2 	bl	8000d98 <gotoxy>
	printf("%c%c%c %c %c%c%c",219,219,219,219,219,219,219);
 8002054:	23db      	movs	r3, #219	; 0xdb
 8002056:	9303      	str	r3, [sp, #12]
 8002058:	23db      	movs	r3, #219	; 0xdb
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	23db      	movs	r3, #219	; 0xdb
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	23db      	movs	r3, #219	; 0xdb
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	23db      	movs	r3, #219	; 0xdb
 8002066:	22db      	movs	r2, #219	; 0xdb
 8002068:	21db      	movs	r1, #219	; 0xdb
 800206a:	4816      	ldr	r0, [pc, #88]	; (80020c4 <playerDraw+0x178>)
 800206c:	f000 faea 	bl	8002644 <iprintf>
	gotoxy(x-4,y+7);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	1f1a      	subs	r2, r3, #4
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3307      	adds	r3, #7
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f7fe fe8c 	bl	8000d98 <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 8002080:	23db      	movs	r3, #219	; 0xdb
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	23db      	movs	r3, #219	; 0xdb
 8002086:	22db      	movs	r2, #219	; 0xdb
 8002088:	21db      	movs	r1, #219	; 0xdb
 800208a:	480f      	ldr	r0, [pc, #60]	; (80020c8 <playerDraw+0x17c>)
 800208c:	f000 fada 	bl	8002644 <iprintf>
	gotoxy(x-4,y+8);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1f1a      	subs	r2, r3, #4
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	3308      	adds	r3, #8
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7fe fe7c 	bl	8000d98 <gotoxy>
	printf("%c       %c",219,219);
 80020a0:	22db      	movs	r2, #219	; 0xdb
 80020a2:	21db      	movs	r1, #219	; 0xdb
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <playerDraw+0x180>)
 80020a6:	f000 facd 	bl	8002644 <iprintf>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	08003850 	.word	0x08003850
 80020b8:	0800385c 	.word	0x0800385c
 80020bc:	0800386c 	.word	0x0800386c
 80020c0:	08003874 	.word	0x08003874
 80020c4:	08003884 	.word	0x08003884
 80020c8:	08003898 	.word	0x08003898
 80020cc:	080038a8 	.word	0x080038a8

080020d0 <enemyDraw>:
	printf("         ");
}



void enemyDraw(int32_t x, int32_t y) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	fgcolor(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7fe fe1c 	bl	8000d18 <fgcolor>
	gotoxy(x-3,y);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b03      	subs	r3, #3
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fe56 	bl	8000d98 <gotoxy>
	printf("%c     %c",219,219);
 80020ec:	22db      	movs	r2, #219	; 0xdb
 80020ee:	21db      	movs	r1, #219	; 0xdb
 80020f0:	4855      	ldr	r0, [pc, #340]	; (8002248 <enemyDraw+0x178>)
 80020f2:	f000 faa7 	bl	8002644 <iprintf>
	gotoxy(x-3,y-1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1eda      	subs	r2, r3, #3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe fe49 	bl	8000d98 <gotoxy>
	printf("%c     %c",219,219);
 8002106:	22db      	movs	r2, #219	; 0xdb
 8002108:	21db      	movs	r1, #219	; 0xdb
 800210a:	484f      	ldr	r0, [pc, #316]	; (8002248 <enemyDraw+0x178>)
 800210c:	f000 fa9a 	bl	8002644 <iprintf>
	gotoxy(x-3,y-2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1eda      	subs	r2, r3, #3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3b02      	subs	r3, #2
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7fe fe3c 	bl	8000d98 <gotoxy>
	printf("%c %c %c %c",219,219,219,219);
 8002120:	23db      	movs	r3, #219	; 0xdb
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	23db      	movs	r3, #219	; 0xdb
 8002126:	22db      	movs	r2, #219	; 0xdb
 8002128:	21db      	movs	r1, #219	; 0xdb
 800212a:	4848      	ldr	r0, [pc, #288]	; (800224c <enemyDraw+0x17c>)
 800212c:	f000 fa8a 	bl	8002644 <iprintf>
	gotoxy(x-3,y-3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1eda      	subs	r2, r3, #3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3b03      	subs	r3, #3
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7fe fe2c 	bl	8000d98 <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 8002140:	23db      	movs	r3, #219	; 0xdb
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	23db      	movs	r3, #219	; 0xdb
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	23db      	movs	r3, #219	; 0xdb
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	23db      	movs	r3, #219	; 0xdb
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	23db      	movs	r3, #219	; 0xdb
 8002152:	22db      	movs	r2, #219	; 0xdb
 8002154:	21db      	movs	r1, #219	; 0xdb
 8002156:	483e      	ldr	r0, [pc, #248]	; (8002250 <enemyDraw+0x180>)
 8002158:	f000 fa74 	bl	8002644 <iprintf>
	gotoxy(x-3,y-4);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1eda      	subs	r2, r3, #3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3b04      	subs	r3, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f7fe fe16 	bl	8000d98 <gotoxy>
	printf("%c%c",219,219);
 800216c:	22db      	movs	r2, #219	; 0xdb
 800216e:	21db      	movs	r1, #219	; 0xdb
 8002170:	4838      	ldr	r0, [pc, #224]	; (8002254 <enemyDraw+0x184>)
 8002172:	f000 fa67 	bl	8002644 <iprintf>
	fgcolor(11);
 8002176:	200b      	movs	r0, #11
 8002178:	f7fe fdce 	bl	8000d18 <fgcolor>
	printf("%c",219);
 800217c:	20db      	movs	r0, #219	; 0xdb
 800217e:	f000 fa79 	bl	8002674 <putchar>
	fgcolor(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f7fe fdc8 	bl	8000d18 <fgcolor>
	printf("%c",219);
 8002188:	20db      	movs	r0, #219	; 0xdb
 800218a:	f000 fa73 	bl	8002674 <putchar>
	fgcolor(11);
 800218e:	200b      	movs	r0, #11
 8002190:	f7fe fdc2 	bl	8000d18 <fgcolor>
	printf("%c",219);
 8002194:	20db      	movs	r0, #219	; 0xdb
 8002196:	f000 fa6d 	bl	8002674 <putchar>
	fgcolor(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f7fe fdbc 	bl	8000d18 <fgcolor>
	printf("%c%c",219,219);
 80021a0:	22db      	movs	r2, #219	; 0xdb
 80021a2:	21db      	movs	r1, #219	; 0xdb
 80021a4:	482b      	ldr	r0, [pc, #172]	; (8002254 <enemyDraw+0x184>)
 80021a6:	f000 fa4d 	bl	8002644 <iprintf>
	gotoxy(x-2,y-5);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1e9a      	subs	r2, r3, #2
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3b05      	subs	r3, #5
 80021b2:	4619      	mov	r1, r3
 80021b4:	4610      	mov	r0, r2
 80021b6:	f7fe fdef 	bl	8000d98 <gotoxy>
	printf("%c%c",219,219);
 80021ba:	22db      	movs	r2, #219	; 0xdb
 80021bc:	21db      	movs	r1, #219	; 0xdb
 80021be:	4825      	ldr	r0, [pc, #148]	; (8002254 <enemyDraw+0x184>)
 80021c0:	f000 fa40 	bl	8002644 <iprintf>
	fgcolor(11);
 80021c4:	200b      	movs	r0, #11
 80021c6:	f7fe fda7 	bl	8000d18 <fgcolor>
	printf("%c",219);
 80021ca:	20db      	movs	r0, #219	; 0xdb
 80021cc:	f000 fa52 	bl	8002674 <putchar>
	fgcolor(1);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7fe fda1 	bl	8000d18 <fgcolor>
	printf("%c%c",219,219);
 80021d6:	22db      	movs	r2, #219	; 0xdb
 80021d8:	21db      	movs	r1, #219	; 0xdb
 80021da:	481e      	ldr	r0, [pc, #120]	; (8002254 <enemyDraw+0x184>)
 80021dc:	f000 fa32 	bl	8002644 <iprintf>
	gotoxy(x-3,y-6);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1eda      	subs	r2, r3, #3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	3b06      	subs	r3, #6
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7fe fdd4 	bl	8000d98 <gotoxy>
	printf("%c%c %c %c%c",219,219,219,219,219);
 80021f0:	23db      	movs	r3, #219	; 0xdb
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	23db      	movs	r3, #219	; 0xdb
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	23db      	movs	r3, #219	; 0xdb
 80021fa:	22db      	movs	r2, #219	; 0xdb
 80021fc:	21db      	movs	r1, #219	; 0xdb
 80021fe:	4816      	ldr	r0, [pc, #88]	; (8002258 <enemyDraw+0x188>)
 8002200:	f000 fa20 	bl	8002644 <iprintf>
	gotoxy(x-4,y-7);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1f1a      	subs	r2, r3, #4
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3b07      	subs	r3, #7
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f7fe fdc2 	bl	8000d98 <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 8002214:	23db      	movs	r3, #219	; 0xdb
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	23db      	movs	r3, #219	; 0xdb
 800221a:	22db      	movs	r2, #219	; 0xdb
 800221c:	21db      	movs	r1, #219	; 0xdb
 800221e:	480f      	ldr	r0, [pc, #60]	; (800225c <enemyDraw+0x18c>)
 8002220:	f000 fa10 	bl	8002644 <iprintf>
	gotoxy(x-4,y-8);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1f1a      	subs	r2, r3, #4
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	3b08      	subs	r3, #8
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fdb2 	bl	8000d98 <gotoxy>
	printf("%c       %c",219,219);
 8002234:	22db      	movs	r2, #219	; 0xdb
 8002236:	21db      	movs	r1, #219	; 0xdb
 8002238:	4809      	ldr	r0, [pc, #36]	; (8002260 <enemyDraw+0x190>)
 800223a:	f000 fa03 	bl	8002644 <iprintf>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	080038d0 	.word	0x080038d0
 800224c:	080038dc 	.word	0x080038dc
 8002250:	08003874 	.word	0x08003874
 8002254:	080038e8 	.word	0x080038e8
 8002258:	080038f0 	.word	0x080038f0
 800225c:	08003898 	.word	0x08003898
 8002260:	080038a8 	.word	0x080038a8

08002264 <enemyRemove>:

void enemyRemove(int32_t x, int32_t y) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	gotoxy(x-3,y);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3b03      	subs	r3, #3
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fd8f 	bl	8000d98 <gotoxy>
	printf("       ");
 800227a:	4838      	ldr	r0, [pc, #224]	; (800235c <enemyRemove+0xf8>)
 800227c:	f000 f9e2 	bl	8002644 <iprintf>
	gotoxy(x-3,y-1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1eda      	subs	r2, r3, #3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f7fe fd84 	bl	8000d98 <gotoxy>
	printf("       ");
 8002290:	4832      	ldr	r0, [pc, #200]	; (800235c <enemyRemove+0xf8>)
 8002292:	f000 f9d7 	bl	8002644 <iprintf>
	gotoxy(x-3,y-2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	1eda      	subs	r2, r3, #3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3b02      	subs	r3, #2
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7fe fd79 	bl	8000d98 <gotoxy>
	printf("       ");
 80022a6:	482d      	ldr	r0, [pc, #180]	; (800235c <enemyRemove+0xf8>)
 80022a8:	f000 f9cc 	bl	8002644 <iprintf>
	gotoxy(x-3,y-3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1eda      	subs	r2, r3, #3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3b03      	subs	r3, #3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f7fe fd6e 	bl	8000d98 <gotoxy>
	printf("       ");
 80022bc:	4827      	ldr	r0, [pc, #156]	; (800235c <enemyRemove+0xf8>)
 80022be:	f000 f9c1 	bl	8002644 <iprintf>
	gotoxy(x-3,y-4);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1eda      	subs	r2, r3, #3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3b04      	subs	r3, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f7fe fd63 	bl	8000d98 <gotoxy>
	printf("  ");
 80022d2:	4823      	ldr	r0, [pc, #140]	; (8002360 <enemyRemove+0xfc>)
 80022d4:	f000 f9b6 	bl	8002644 <iprintf>
	printf(" ");
 80022d8:	2020      	movs	r0, #32
 80022da:	f000 f9cb 	bl	8002674 <putchar>
	printf(" ");
 80022de:	2020      	movs	r0, #32
 80022e0:	f000 f9c8 	bl	8002674 <putchar>
	printf(" ");
 80022e4:	2020      	movs	r0, #32
 80022e6:	f000 f9c5 	bl	8002674 <putchar>
	printf("  ");
 80022ea:	481d      	ldr	r0, [pc, #116]	; (8002360 <enemyRemove+0xfc>)
 80022ec:	f000 f9aa 	bl	8002644 <iprintf>
	gotoxy(x-2,y-5);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1e9a      	subs	r2, r3, #2
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3b05      	subs	r3, #5
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f7fe fd4c 	bl	8000d98 <gotoxy>
	printf("  ");
 8002300:	4817      	ldr	r0, [pc, #92]	; (8002360 <enemyRemove+0xfc>)
 8002302:	f000 f99f 	bl	8002644 <iprintf>
	printf(" ");
 8002306:	2020      	movs	r0, #32
 8002308:	f000 f9b4 	bl	8002674 <putchar>
	printf("  ");
 800230c:	4814      	ldr	r0, [pc, #80]	; (8002360 <enemyRemove+0xfc>)
 800230e:	f000 f999 	bl	8002644 <iprintf>
	gotoxy(x-3,y-6);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1eda      	subs	r2, r3, #3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3b06      	subs	r3, #6
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7fe fd3b 	bl	8000d98 <gotoxy>
	printf("       ");
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <enemyRemove+0xf8>)
 8002324:	f000 f98e 	bl	8002644 <iprintf>
	gotoxy(x-4,y-7);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1f1a      	subs	r2, r3, #4
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3b07      	subs	r3, #7
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f7fe fd30 	bl	8000d98 <gotoxy>
	printf("         ");
 8002338:	480a      	ldr	r0, [pc, #40]	; (8002364 <enemyRemove+0x100>)
 800233a:	f000 f983 	bl	8002644 <iprintf>
	gotoxy(x-4,y-8);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	1f1a      	subs	r2, r3, #4
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	3b08      	subs	r3, #8
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7fe fd25 	bl	8000d98 <gotoxy>
	printf("         ");
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <enemyRemove+0x100>)
 8002350:	f000 f978 	bl	8002644 <iprintf>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	080038b4 	.word	0x080038b4
 8002360:	08003900 	.word	0x08003900
 8002364:	080038c4 	.word	0x080038c4

08002368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
	}

return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x50>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x16>
		heap_end = &end;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <_sbrk+0x50>)
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <_sbrk+0x54>)
 8002420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <_sbrk+0x50>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <_sbrk+0x50>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	466a      	mov	r2, sp
 8002432:	4293      	cmp	r3, r2
 8002434:	d907      	bls.n	8002446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002436:	f000 f8d3 	bl	80025e0 <__errno>
 800243a:	4603      	mov	r3, r0
 800243c:	220c      	movs	r2, #12
 800243e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	e006      	b.n	8002454 <_sbrk+0x48>
	}

	heap_end += incr;
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <_sbrk+0x50>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <_sbrk+0x50>)
 8002450:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200000b0 	.word	0x200000b0
 8002460:	200000c8 	.word	0x200000c8

08002464 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <SystemInit+0x84>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <SystemInit+0x84>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <SystemInit+0x88>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <SystemInit+0x88>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <SystemInit+0x88>)
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4918      	ldr	r1, [pc, #96]	; (80024ec <SystemInit+0x88>)
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <SystemInit+0x8c>)
 800248c:	4013      	ands	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <SystemInit+0x88>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <SystemInit+0x88>)
 8002496:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <SystemInit+0x88>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <SystemInit+0x88>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <SystemInit+0x88>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <SystemInit+0x88>)
 80024b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024b6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <SystemInit+0x88>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <SystemInit+0x88>)
 80024be:	f023 030f 	bic.w	r3, r3, #15
 80024c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <SystemInit+0x88>)
 80024c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c8:	4908      	ldr	r1, [pc, #32]	; (80024ec <SystemInit+0x88>)
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <SystemInit+0x90>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <SystemInit+0x88>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80024d6:	f000 f80f 	bl	80024f8 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024da:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <SystemInit+0x84>)
 80024dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e0:	609a      	str	r2, [r3, #8]
#endif  
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00
 80024ec:	40021000 	.word	0x40021000
 80024f0:	f87fc00c 	.word	0xf87fc00c
 80024f4:	ff00fccc 	.word	0xff00fccc

080024f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <SetSysClock+0x8c>)
 80024fe:	2212      	movs	r2, #18
 8002500:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <SetSysClock+0x90>)
 8002504:	4a20      	ldr	r2, [pc, #128]	; (8002588 <SetSysClock+0x90>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <SetSysClock+0x90>)
 800250c:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <SetSysClock+0x90>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <SetSysClock+0x90>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <SetSysClock+0x90>)
 8002518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <SetSysClock+0x90>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <SetSysClock+0x90>)
 8002524:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002528:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <SetSysClock+0x90>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <SetSysClock+0x90>)
 8002530:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8002534:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <SetSysClock+0x90>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <SetSysClock+0x90>)
 800253c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002540:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002542:	bf00      	nop
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <SetSysClock+0x90>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f9      	beq.n	8002544 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <SetSysClock+0x90>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <SetSysClock+0x90>)
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <SetSysClock+0x90>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a09      	ldr	r2, [pc, #36]	; (8002588 <SetSysClock+0x90>)
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002568:	bf00      	nop
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <SetSysClock+0x90>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d1f9      	bne.n	800256a <SetSysClock+0x72>
  {
  }
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000

0800258c <Reset_Handler>:
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopForever+0x2>)
 800258e:	4685      	mov	sp, r0
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <LoopForever+0x6>)
 8002592:	490e      	ldr	r1, [pc, #56]	; (80025cc <LoopForever+0xa>)
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <LoopForever+0xe>)
 8002596:	2300      	movs	r3, #0
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:
 800259a:	58d4      	ldr	r4, [r2, r3]
 800259c:	50c4      	str	r4, [r0, r3]
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:
 80025a0:	18c4      	adds	r4, r0, r3
 80025a2:	428c      	cmp	r4, r1
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LoopForever+0x12>)
 80025a8:	4c0b      	ldr	r4, [pc, #44]	; (80025d8 <LoopForever+0x16>)
 80025aa:	2300      	movs	r3, #0
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:
 80025b2:	42a2      	cmp	r2, r4
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>
 80025b6:	f7ff ff55 	bl	8002464 <SystemInit>
 80025ba:	f000 f817 	bl	80025ec <__libc_init_array>
 80025be:	f7fe ff9f 	bl	8001500 <main>

080025c2 <LoopForever>:
 80025c2:	e7fe      	b.n	80025c2 <LoopForever>
 80025c4:	20004000 	.word	0x20004000
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000090 	.word	0x20000090
 80025d0:	080039d4 	.word	0x080039d4
 80025d4:	20000090 	.word	0x20000090
 80025d8:	200000c4 	.word	0x200000c4

080025dc <ADC1_2_IRQHandler>:
 80025dc:	e7fe      	b.n	80025dc <ADC1_2_IRQHandler>
	...

080025e0 <__errno>:
 80025e0:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <__errno+0x8>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000002c 	.word	0x2000002c

080025ec <__libc_init_array>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	4d0d      	ldr	r5, [pc, #52]	; (8002624 <__libc_init_array+0x38>)
 80025f0:	4c0d      	ldr	r4, [pc, #52]	; (8002628 <__libc_init_array+0x3c>)
 80025f2:	1b64      	subs	r4, r4, r5
 80025f4:	10a4      	asrs	r4, r4, #2
 80025f6:	2600      	movs	r6, #0
 80025f8:	42a6      	cmp	r6, r4
 80025fa:	d109      	bne.n	8002610 <__libc_init_array+0x24>
 80025fc:	4d0b      	ldr	r5, [pc, #44]	; (800262c <__libc_init_array+0x40>)
 80025fe:	4c0c      	ldr	r4, [pc, #48]	; (8002630 <__libc_init_array+0x44>)
 8002600:	f001 f8d0 	bl	80037a4 <_init>
 8002604:	1b64      	subs	r4, r4, r5
 8002606:	10a4      	asrs	r4, r4, #2
 8002608:	2600      	movs	r6, #0
 800260a:	42a6      	cmp	r6, r4
 800260c:	d105      	bne.n	800261a <__libc_init_array+0x2e>
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	f855 3b04 	ldr.w	r3, [r5], #4
 8002614:	4798      	blx	r3
 8002616:	3601      	adds	r6, #1
 8002618:	e7ee      	b.n	80025f8 <__libc_init_array+0xc>
 800261a:	f855 3b04 	ldr.w	r3, [r5], #4
 800261e:	4798      	blx	r3
 8002620:	3601      	adds	r6, #1
 8002622:	e7f2      	b.n	800260a <__libc_init_array+0x1e>
 8002624:	080039cc 	.word	0x080039cc
 8002628:	080039cc 	.word	0x080039cc
 800262c:	080039cc 	.word	0x080039cc
 8002630:	080039d0 	.word	0x080039d0

08002634 <memset>:
 8002634:	4402      	add	r2, r0
 8002636:	4603      	mov	r3, r0
 8002638:	4293      	cmp	r3, r2
 800263a:	d100      	bne.n	800263e <memset+0xa>
 800263c:	4770      	bx	lr
 800263e:	f803 1b01 	strb.w	r1, [r3], #1
 8002642:	e7f9      	b.n	8002638 <memset+0x4>

08002644 <iprintf>:
 8002644:	b40f      	push	{r0, r1, r2, r3}
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <iprintf+0x2c>)
 8002648:	b513      	push	{r0, r1, r4, lr}
 800264a:	681c      	ldr	r4, [r3, #0]
 800264c:	b124      	cbz	r4, 8002658 <iprintf+0x14>
 800264e:	69a3      	ldr	r3, [r4, #24]
 8002650:	b913      	cbnz	r3, 8002658 <iprintf+0x14>
 8002652:	4620      	mov	r0, r4
 8002654:	f000 fa0c 	bl	8002a70 <__sinit>
 8002658:	ab05      	add	r3, sp, #20
 800265a:	9a04      	ldr	r2, [sp, #16]
 800265c:	68a1      	ldr	r1, [r4, #8]
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	4620      	mov	r0, r4
 8002662:	f000 fc1d 	bl	8002ea0 <_vfiprintf_r>
 8002666:	b002      	add	sp, #8
 8002668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266c:	b004      	add	sp, #16
 800266e:	4770      	bx	lr
 8002670:	2000002c 	.word	0x2000002c

08002674 <putchar>:
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <putchar+0x28>)
 8002676:	b513      	push	{r0, r1, r4, lr}
 8002678:	681c      	ldr	r4, [r3, #0]
 800267a:	4601      	mov	r1, r0
 800267c:	b134      	cbz	r4, 800268c <putchar+0x18>
 800267e:	69a3      	ldr	r3, [r4, #24]
 8002680:	b923      	cbnz	r3, 800268c <putchar+0x18>
 8002682:	9001      	str	r0, [sp, #4]
 8002684:	4620      	mov	r0, r4
 8002686:	f000 f9f3 	bl	8002a70 <__sinit>
 800268a:	9901      	ldr	r1, [sp, #4]
 800268c:	68a2      	ldr	r2, [r4, #8]
 800268e:	4620      	mov	r0, r4
 8002690:	b002      	add	sp, #8
 8002692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002696:	f000 bec7 	b.w	8003428 <_putc_r>
 800269a:	bf00      	nop
 800269c:	2000002c 	.word	0x2000002c

080026a0 <setbuf>:
 80026a0:	2900      	cmp	r1, #0
 80026a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a6:	bf0c      	ite	eq
 80026a8:	2202      	moveq	r2, #2
 80026aa:	2200      	movne	r2, #0
 80026ac:	f000 b800 	b.w	80026b0 <setvbuf>

080026b0 <setvbuf>:
 80026b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026b4:	461d      	mov	r5, r3
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <setvbuf+0x17c>)
 80026b8:	681f      	ldr	r7, [r3, #0]
 80026ba:	4604      	mov	r4, r0
 80026bc:	460e      	mov	r6, r1
 80026be:	4690      	mov	r8, r2
 80026c0:	b127      	cbz	r7, 80026cc <setvbuf+0x1c>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	b913      	cbnz	r3, 80026cc <setvbuf+0x1c>
 80026c6:	4638      	mov	r0, r7
 80026c8:	f000 f9d2 	bl	8002a70 <__sinit>
 80026cc:	4b58      	ldr	r3, [pc, #352]	; (8002830 <setvbuf+0x180>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d167      	bne.n	80027a2 <setvbuf+0xf2>
 80026d2:	687c      	ldr	r4, [r7, #4]
 80026d4:	f1b8 0f02 	cmp.w	r8, #2
 80026d8:	d006      	beq.n	80026e8 <setvbuf+0x38>
 80026da:	f1b8 0f01 	cmp.w	r8, #1
 80026de:	f200 809f 	bhi.w	8002820 <setvbuf+0x170>
 80026e2:	2d00      	cmp	r5, #0
 80026e4:	f2c0 809c 	blt.w	8002820 <setvbuf+0x170>
 80026e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ea:	07db      	lsls	r3, r3, #31
 80026ec:	d405      	bmi.n	80026fa <setvbuf+0x4a>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	0598      	lsls	r0, r3, #22
 80026f2:	d402      	bmi.n	80026fa <setvbuf+0x4a>
 80026f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026f6:	f000 fa59 	bl	8002bac <__retarget_lock_acquire_recursive>
 80026fa:	4621      	mov	r1, r4
 80026fc:	4638      	mov	r0, r7
 80026fe:	f000 f923 	bl	8002948 <_fflush_r>
 8002702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002704:	b141      	cbz	r1, 8002718 <setvbuf+0x68>
 8002706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800270a:	4299      	cmp	r1, r3
 800270c:	d002      	beq.n	8002714 <setvbuf+0x64>
 800270e:	4638      	mov	r0, r7
 8002710:	f000 fabc 	bl	8002c8c <_free_r>
 8002714:	2300      	movs	r3, #0
 8002716:	6363      	str	r3, [r4, #52]	; 0x34
 8002718:	2300      	movs	r3, #0
 800271a:	61a3      	str	r3, [r4, #24]
 800271c:	6063      	str	r3, [r4, #4]
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	0619      	lsls	r1, r3, #24
 8002722:	d503      	bpl.n	800272c <setvbuf+0x7c>
 8002724:	6921      	ldr	r1, [r4, #16]
 8002726:	4638      	mov	r0, r7
 8002728:	f000 fab0 	bl	8002c8c <_free_r>
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	f1b8 0f02 	cmp.w	r8, #2
 800273a:	81a3      	strh	r3, [r4, #12]
 800273c:	d06c      	beq.n	8002818 <setvbuf+0x168>
 800273e:	ab01      	add	r3, sp, #4
 8002740:	466a      	mov	r2, sp
 8002742:	4621      	mov	r1, r4
 8002744:	4638      	mov	r0, r7
 8002746:	f000 fa33 	bl	8002bb0 <__swhatbuf_r>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	4318      	orrs	r0, r3
 800274e:	81a0      	strh	r0, [r4, #12]
 8002750:	2d00      	cmp	r5, #0
 8002752:	d130      	bne.n	80027b6 <setvbuf+0x106>
 8002754:	9d00      	ldr	r5, [sp, #0]
 8002756:	4628      	mov	r0, r5
 8002758:	f000 fa90 	bl	8002c7c <malloc>
 800275c:	4606      	mov	r6, r0
 800275e:	2800      	cmp	r0, #0
 8002760:	d155      	bne.n	800280e <setvbuf+0x15e>
 8002762:	f8dd 9000 	ldr.w	r9, [sp]
 8002766:	45a9      	cmp	r9, r5
 8002768:	d14a      	bne.n	8002800 <setvbuf+0x150>
 800276a:	f04f 35ff 	mov.w	r5, #4294967295
 800276e:	2200      	movs	r2, #0
 8002770:	60a2      	str	r2, [r4, #8]
 8002772:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002776:	6022      	str	r2, [r4, #0]
 8002778:	6122      	str	r2, [r4, #16]
 800277a:	2201      	movs	r2, #1
 800277c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002780:	6162      	str	r2, [r4, #20]
 8002782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	07d2      	lsls	r2, r2, #31
 800278a:	81a3      	strh	r3, [r4, #12]
 800278c:	d405      	bmi.n	800279a <setvbuf+0xea>
 800278e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002792:	d102      	bne.n	800279a <setvbuf+0xea>
 8002794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002796:	f000 fa0a 	bl	8002bae <__retarget_lock_release_recursive>
 800279a:	4628      	mov	r0, r5
 800279c:	b003      	add	sp, #12
 800279e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <setvbuf+0x184>)
 80027a4:	429c      	cmp	r4, r3
 80027a6:	d101      	bne.n	80027ac <setvbuf+0xfc>
 80027a8:	68bc      	ldr	r4, [r7, #8]
 80027aa:	e793      	b.n	80026d4 <setvbuf+0x24>
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <setvbuf+0x188>)
 80027ae:	429c      	cmp	r4, r3
 80027b0:	bf08      	it	eq
 80027b2:	68fc      	ldreq	r4, [r7, #12]
 80027b4:	e78e      	b.n	80026d4 <setvbuf+0x24>
 80027b6:	2e00      	cmp	r6, #0
 80027b8:	d0cd      	beq.n	8002756 <setvbuf+0xa6>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	b913      	cbnz	r3, 80027c4 <setvbuf+0x114>
 80027be:	4638      	mov	r0, r7
 80027c0:	f000 f956 	bl	8002a70 <__sinit>
 80027c4:	f1b8 0f01 	cmp.w	r8, #1
 80027c8:	bf08      	it	eq
 80027ca:	89a3      	ldrheq	r3, [r4, #12]
 80027cc:	6026      	str	r6, [r4, #0]
 80027ce:	bf04      	itt	eq
 80027d0:	f043 0301 	orreq.w	r3, r3, #1
 80027d4:	81a3      	strheq	r3, [r4, #12]
 80027d6:	89a2      	ldrh	r2, [r4, #12]
 80027d8:	f012 0308 	ands.w	r3, r2, #8
 80027dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80027e0:	d01c      	beq.n	800281c <setvbuf+0x16c>
 80027e2:	07d3      	lsls	r3, r2, #31
 80027e4:	bf41      	itttt	mi
 80027e6:	2300      	movmi	r3, #0
 80027e8:	426d      	negmi	r5, r5
 80027ea:	60a3      	strmi	r3, [r4, #8]
 80027ec:	61a5      	strmi	r5, [r4, #24]
 80027ee:	bf58      	it	pl
 80027f0:	60a5      	strpl	r5, [r4, #8]
 80027f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80027f4:	f015 0501 	ands.w	r5, r5, #1
 80027f8:	d115      	bne.n	8002826 <setvbuf+0x176>
 80027fa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80027fe:	e7c8      	b.n	8002792 <setvbuf+0xe2>
 8002800:	4648      	mov	r0, r9
 8002802:	f000 fa3b 	bl	8002c7c <malloc>
 8002806:	4606      	mov	r6, r0
 8002808:	2800      	cmp	r0, #0
 800280a:	d0ae      	beq.n	800276a <setvbuf+0xba>
 800280c:	464d      	mov	r5, r9
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	e7d0      	b.n	80027ba <setvbuf+0x10a>
 8002818:	2500      	movs	r5, #0
 800281a:	e7a8      	b.n	800276e <setvbuf+0xbe>
 800281c:	60a3      	str	r3, [r4, #8]
 800281e:	e7e8      	b.n	80027f2 <setvbuf+0x142>
 8002820:	f04f 35ff 	mov.w	r5, #4294967295
 8002824:	e7b9      	b.n	800279a <setvbuf+0xea>
 8002826:	2500      	movs	r5, #0
 8002828:	e7b7      	b.n	800279a <setvbuf+0xea>
 800282a:	bf00      	nop
 800282c:	2000002c 	.word	0x2000002c
 8002830:	08003958 	.word	0x08003958
 8002834:	08003978 	.word	0x08003978
 8002838:	08003938 	.word	0x08003938

0800283c <__sflush_r>:
 800283c:	898a      	ldrh	r2, [r1, #12]
 800283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002842:	4605      	mov	r5, r0
 8002844:	0710      	lsls	r0, r2, #28
 8002846:	460c      	mov	r4, r1
 8002848:	d458      	bmi.n	80028fc <__sflush_r+0xc0>
 800284a:	684b      	ldr	r3, [r1, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	dc05      	bgt.n	800285c <__sflush_r+0x20>
 8002850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	dc02      	bgt.n	800285c <__sflush_r+0x20>
 8002856:	2000      	movs	r0, #0
 8002858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800285c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800285e:	2e00      	cmp	r6, #0
 8002860:	d0f9      	beq.n	8002856 <__sflush_r+0x1a>
 8002862:	2300      	movs	r3, #0
 8002864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002868:	682f      	ldr	r7, [r5, #0]
 800286a:	602b      	str	r3, [r5, #0]
 800286c:	d032      	beq.n	80028d4 <__sflush_r+0x98>
 800286e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	075a      	lsls	r2, r3, #29
 8002874:	d505      	bpl.n	8002882 <__sflush_r+0x46>
 8002876:	6863      	ldr	r3, [r4, #4]
 8002878:	1ac0      	subs	r0, r0, r3
 800287a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800287c:	b10b      	cbz	r3, 8002882 <__sflush_r+0x46>
 800287e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002880:	1ac0      	subs	r0, r0, r3
 8002882:	2300      	movs	r3, #0
 8002884:	4602      	mov	r2, r0
 8002886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002888:	6a21      	ldr	r1, [r4, #32]
 800288a:	4628      	mov	r0, r5
 800288c:	47b0      	blx	r6
 800288e:	1c43      	adds	r3, r0, #1
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	d106      	bne.n	80028a2 <__sflush_r+0x66>
 8002894:	6829      	ldr	r1, [r5, #0]
 8002896:	291d      	cmp	r1, #29
 8002898:	d82c      	bhi.n	80028f4 <__sflush_r+0xb8>
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <__sflush_r+0x108>)
 800289c:	40ca      	lsrs	r2, r1
 800289e:	07d6      	lsls	r6, r2, #31
 80028a0:	d528      	bpl.n	80028f4 <__sflush_r+0xb8>
 80028a2:	2200      	movs	r2, #0
 80028a4:	6062      	str	r2, [r4, #4]
 80028a6:	04d9      	lsls	r1, r3, #19
 80028a8:	6922      	ldr	r2, [r4, #16]
 80028aa:	6022      	str	r2, [r4, #0]
 80028ac:	d504      	bpl.n	80028b8 <__sflush_r+0x7c>
 80028ae:	1c42      	adds	r2, r0, #1
 80028b0:	d101      	bne.n	80028b6 <__sflush_r+0x7a>
 80028b2:	682b      	ldr	r3, [r5, #0]
 80028b4:	b903      	cbnz	r3, 80028b8 <__sflush_r+0x7c>
 80028b6:	6560      	str	r0, [r4, #84]	; 0x54
 80028b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028ba:	602f      	str	r7, [r5, #0]
 80028bc:	2900      	cmp	r1, #0
 80028be:	d0ca      	beq.n	8002856 <__sflush_r+0x1a>
 80028c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d002      	beq.n	80028ce <__sflush_r+0x92>
 80028c8:	4628      	mov	r0, r5
 80028ca:	f000 f9df 	bl	8002c8c <_free_r>
 80028ce:	2000      	movs	r0, #0
 80028d0:	6360      	str	r0, [r4, #52]	; 0x34
 80028d2:	e7c1      	b.n	8002858 <__sflush_r+0x1c>
 80028d4:	6a21      	ldr	r1, [r4, #32]
 80028d6:	2301      	movs	r3, #1
 80028d8:	4628      	mov	r0, r5
 80028da:	47b0      	blx	r6
 80028dc:	1c41      	adds	r1, r0, #1
 80028de:	d1c7      	bne.n	8002870 <__sflush_r+0x34>
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0c4      	beq.n	8002870 <__sflush_r+0x34>
 80028e6:	2b1d      	cmp	r3, #29
 80028e8:	d001      	beq.n	80028ee <__sflush_r+0xb2>
 80028ea:	2b16      	cmp	r3, #22
 80028ec:	d101      	bne.n	80028f2 <__sflush_r+0xb6>
 80028ee:	602f      	str	r7, [r5, #0]
 80028f0:	e7b1      	b.n	8002856 <__sflush_r+0x1a>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f8:	81a3      	strh	r3, [r4, #12]
 80028fa:	e7ad      	b.n	8002858 <__sflush_r+0x1c>
 80028fc:	690f      	ldr	r7, [r1, #16]
 80028fe:	2f00      	cmp	r7, #0
 8002900:	d0a9      	beq.n	8002856 <__sflush_r+0x1a>
 8002902:	0793      	lsls	r3, r2, #30
 8002904:	680e      	ldr	r6, [r1, #0]
 8002906:	bf08      	it	eq
 8002908:	694b      	ldreq	r3, [r1, #20]
 800290a:	600f      	str	r7, [r1, #0]
 800290c:	bf18      	it	ne
 800290e:	2300      	movne	r3, #0
 8002910:	eba6 0807 	sub.w	r8, r6, r7
 8002914:	608b      	str	r3, [r1, #8]
 8002916:	f1b8 0f00 	cmp.w	r8, #0
 800291a:	dd9c      	ble.n	8002856 <__sflush_r+0x1a>
 800291c:	6a21      	ldr	r1, [r4, #32]
 800291e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002920:	4643      	mov	r3, r8
 8002922:	463a      	mov	r2, r7
 8002924:	4628      	mov	r0, r5
 8002926:	47b0      	blx	r6
 8002928:	2800      	cmp	r0, #0
 800292a:	dc06      	bgt.n	800293a <__sflush_r+0xfe>
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002932:	81a3      	strh	r3, [r4, #12]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	e78e      	b.n	8002858 <__sflush_r+0x1c>
 800293a:	4407      	add	r7, r0
 800293c:	eba8 0800 	sub.w	r8, r8, r0
 8002940:	e7e9      	b.n	8002916 <__sflush_r+0xda>
 8002942:	bf00      	nop
 8002944:	20400001 	.word	0x20400001

08002948 <_fflush_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	690b      	ldr	r3, [r1, #16]
 800294c:	4605      	mov	r5, r0
 800294e:	460c      	mov	r4, r1
 8002950:	b913      	cbnz	r3, 8002958 <_fflush_r+0x10>
 8002952:	2500      	movs	r5, #0
 8002954:	4628      	mov	r0, r5
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	b118      	cbz	r0, 8002962 <_fflush_r+0x1a>
 800295a:	6983      	ldr	r3, [r0, #24]
 800295c:	b90b      	cbnz	r3, 8002962 <_fflush_r+0x1a>
 800295e:	f000 f887 	bl	8002a70 <__sinit>
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <_fflush_r+0x6c>)
 8002964:	429c      	cmp	r4, r3
 8002966:	d11b      	bne.n	80029a0 <_fflush_r+0x58>
 8002968:	686c      	ldr	r4, [r5, #4]
 800296a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ef      	beq.n	8002952 <_fflush_r+0xa>
 8002972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002974:	07d0      	lsls	r0, r2, #31
 8002976:	d404      	bmi.n	8002982 <_fflush_r+0x3a>
 8002978:	0599      	lsls	r1, r3, #22
 800297a:	d402      	bmi.n	8002982 <_fflush_r+0x3a>
 800297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800297e:	f000 f915 	bl	8002bac <__retarget_lock_acquire_recursive>
 8002982:	4628      	mov	r0, r5
 8002984:	4621      	mov	r1, r4
 8002986:	f7ff ff59 	bl	800283c <__sflush_r>
 800298a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800298c:	07da      	lsls	r2, r3, #31
 800298e:	4605      	mov	r5, r0
 8002990:	d4e0      	bmi.n	8002954 <_fflush_r+0xc>
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	059b      	lsls	r3, r3, #22
 8002996:	d4dd      	bmi.n	8002954 <_fflush_r+0xc>
 8002998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800299a:	f000 f908 	bl	8002bae <__retarget_lock_release_recursive>
 800299e:	e7d9      	b.n	8002954 <_fflush_r+0xc>
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <_fflush_r+0x70>)
 80029a2:	429c      	cmp	r4, r3
 80029a4:	d101      	bne.n	80029aa <_fflush_r+0x62>
 80029a6:	68ac      	ldr	r4, [r5, #8]
 80029a8:	e7df      	b.n	800296a <_fflush_r+0x22>
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <_fflush_r+0x74>)
 80029ac:	429c      	cmp	r4, r3
 80029ae:	bf08      	it	eq
 80029b0:	68ec      	ldreq	r4, [r5, #12]
 80029b2:	e7da      	b.n	800296a <_fflush_r+0x22>
 80029b4:	08003958 	.word	0x08003958
 80029b8:	08003978 	.word	0x08003978
 80029bc:	08003938 	.word	0x08003938

080029c0 <std>:
 80029c0:	2300      	movs	r3, #0
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	e9c0 3300 	strd	r3, r3, [r0]
 80029ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029ce:	6083      	str	r3, [r0, #8]
 80029d0:	8181      	strh	r1, [r0, #12]
 80029d2:	6643      	str	r3, [r0, #100]	; 0x64
 80029d4:	81c2      	strh	r2, [r0, #14]
 80029d6:	6183      	str	r3, [r0, #24]
 80029d8:	4619      	mov	r1, r3
 80029da:	2208      	movs	r2, #8
 80029dc:	305c      	adds	r0, #92	; 0x5c
 80029de:	f7ff fe29 	bl	8002634 <memset>
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <std+0x38>)
 80029e4:	6263      	str	r3, [r4, #36]	; 0x24
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <std+0x3c>)
 80029e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <std+0x40>)
 80029ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <std+0x44>)
 80029f0:	6224      	str	r4, [r4, #32]
 80029f2:	6323      	str	r3, [r4, #48]	; 0x30
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	bf00      	nop
 80029f8:	080034d9 	.word	0x080034d9
 80029fc:	080034fb 	.word	0x080034fb
 8002a00:	08003533 	.word	0x08003533
 8002a04:	08003557 	.word	0x08003557

08002a08 <_cleanup_r>:
 8002a08:	4901      	ldr	r1, [pc, #4]	; (8002a10 <_cleanup_r+0x8>)
 8002a0a:	f000 b8af 	b.w	8002b6c <_fwalk_reent>
 8002a0e:	bf00      	nop
 8002a10:	08002949 	.word	0x08002949

08002a14 <__sfmoreglue>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	2268      	movs	r2, #104	; 0x68
 8002a18:	1e4d      	subs	r5, r1, #1
 8002a1a:	4355      	muls	r5, r2
 8002a1c:	460e      	mov	r6, r1
 8002a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a22:	f000 f99f 	bl	8002d64 <_malloc_r>
 8002a26:	4604      	mov	r4, r0
 8002a28:	b140      	cbz	r0, 8002a3c <__sfmoreglue+0x28>
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8002a30:	300c      	adds	r0, #12
 8002a32:	60a0      	str	r0, [r4, #8]
 8002a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a38:	f7ff fdfc 	bl	8002634 <memset>
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}

08002a40 <__sfp_lock_acquire>:
 8002a40:	4801      	ldr	r0, [pc, #4]	; (8002a48 <__sfp_lock_acquire+0x8>)
 8002a42:	f000 b8b3 	b.w	8002bac <__retarget_lock_acquire_recursive>
 8002a46:	bf00      	nop
 8002a48:	200000b5 	.word	0x200000b5

08002a4c <__sfp_lock_release>:
 8002a4c:	4801      	ldr	r0, [pc, #4]	; (8002a54 <__sfp_lock_release+0x8>)
 8002a4e:	f000 b8ae 	b.w	8002bae <__retarget_lock_release_recursive>
 8002a52:	bf00      	nop
 8002a54:	200000b5 	.word	0x200000b5

08002a58 <__sinit_lock_acquire>:
 8002a58:	4801      	ldr	r0, [pc, #4]	; (8002a60 <__sinit_lock_acquire+0x8>)
 8002a5a:	f000 b8a7 	b.w	8002bac <__retarget_lock_acquire_recursive>
 8002a5e:	bf00      	nop
 8002a60:	200000b6 	.word	0x200000b6

08002a64 <__sinit_lock_release>:
 8002a64:	4801      	ldr	r0, [pc, #4]	; (8002a6c <__sinit_lock_release+0x8>)
 8002a66:	f000 b8a2 	b.w	8002bae <__retarget_lock_release_recursive>
 8002a6a:	bf00      	nop
 8002a6c:	200000b6 	.word	0x200000b6

08002a70 <__sinit>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	4604      	mov	r4, r0
 8002a74:	f7ff fff0 	bl	8002a58 <__sinit_lock_acquire>
 8002a78:	69a3      	ldr	r3, [r4, #24]
 8002a7a:	b11b      	cbz	r3, 8002a84 <__sinit+0x14>
 8002a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a80:	f7ff bff0 	b.w	8002a64 <__sinit_lock_release>
 8002a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a88:	6523      	str	r3, [r4, #80]	; 0x50
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <__sinit+0x68>)
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <__sinit+0x6c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a92:	42a3      	cmp	r3, r4
 8002a94:	bf04      	itt	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	61a3      	streq	r3, [r4, #24]
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 f820 	bl	8002ae0 <__sfp>
 8002aa0:	6060      	str	r0, [r4, #4]
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f000 f81c 	bl	8002ae0 <__sfp>
 8002aa8:	60a0      	str	r0, [r4, #8]
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f818 	bl	8002ae0 <__sfp>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60e0      	str	r0, [r4, #12]
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	6860      	ldr	r0, [r4, #4]
 8002ab8:	f7ff ff82 	bl	80029c0 <std>
 8002abc:	68a0      	ldr	r0, [r4, #8]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2109      	movs	r1, #9
 8002ac2:	f7ff ff7d 	bl	80029c0 <std>
 8002ac6:	68e0      	ldr	r0, [r4, #12]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	2112      	movs	r1, #18
 8002acc:	f7ff ff78 	bl	80029c0 <std>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61a3      	str	r3, [r4, #24]
 8002ad4:	e7d2      	b.n	8002a7c <__sinit+0xc>
 8002ad6:	bf00      	nop
 8002ad8:	08003934 	.word	0x08003934
 8002adc:	08002a09 	.word	0x08002a09

08002ae0 <__sfp>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	4607      	mov	r7, r0
 8002ae4:	f7ff ffac 	bl	8002a40 <__sfp_lock_acquire>
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <__sfp+0x84>)
 8002aea:	681e      	ldr	r6, [r3, #0]
 8002aec:	69b3      	ldr	r3, [r6, #24]
 8002aee:	b913      	cbnz	r3, 8002af6 <__sfp+0x16>
 8002af0:	4630      	mov	r0, r6
 8002af2:	f7ff ffbd 	bl	8002a70 <__sinit>
 8002af6:	3648      	adds	r6, #72	; 0x48
 8002af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	d503      	bpl.n	8002b08 <__sfp+0x28>
 8002b00:	6833      	ldr	r3, [r6, #0]
 8002b02:	b30b      	cbz	r3, 8002b48 <__sfp+0x68>
 8002b04:	6836      	ldr	r6, [r6, #0]
 8002b06:	e7f7      	b.n	8002af8 <__sfp+0x18>
 8002b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b0c:	b9d5      	cbnz	r5, 8002b44 <__sfp+0x64>
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <__sfp+0x88>)
 8002b10:	60e3      	str	r3, [r4, #12]
 8002b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b16:	6665      	str	r5, [r4, #100]	; 0x64
 8002b18:	f000 f847 	bl	8002baa <__retarget_lock_init_recursive>
 8002b1c:	f7ff ff96 	bl	8002a4c <__sfp_lock_release>
 8002b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b28:	6025      	str	r5, [r4, #0]
 8002b2a:	61a5      	str	r5, [r4, #24]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b34:	f7ff fd7e 	bl	8002634 <memset>
 8002b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b40:	4620      	mov	r0, r4
 8002b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b44:	3468      	adds	r4, #104	; 0x68
 8002b46:	e7d9      	b.n	8002afc <__sfp+0x1c>
 8002b48:	2104      	movs	r1, #4
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	f7ff ff62 	bl	8002a14 <__sfmoreglue>
 8002b50:	4604      	mov	r4, r0
 8002b52:	6030      	str	r0, [r6, #0]
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d1d5      	bne.n	8002b04 <__sfp+0x24>
 8002b58:	f7ff ff78 	bl	8002a4c <__sfp_lock_release>
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	e7ee      	b.n	8002b40 <__sfp+0x60>
 8002b62:	bf00      	nop
 8002b64:	08003934 	.word	0x08003934
 8002b68:	ffff0001 	.word	0xffff0001

08002b6c <_fwalk_reent>:
 8002b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b70:	4606      	mov	r6, r0
 8002b72:	4688      	mov	r8, r1
 8002b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b78:	2700      	movs	r7, #0
 8002b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8002b82:	d505      	bpl.n	8002b90 <_fwalk_reent+0x24>
 8002b84:	6824      	ldr	r4, [r4, #0]
 8002b86:	2c00      	cmp	r4, #0
 8002b88:	d1f7      	bne.n	8002b7a <_fwalk_reent+0xe>
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b90:	89ab      	ldrh	r3, [r5, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d907      	bls.n	8002ba6 <_fwalk_reent+0x3a>
 8002b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	d003      	beq.n	8002ba6 <_fwalk_reent+0x3a>
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	47c0      	blx	r8
 8002ba4:	4307      	orrs	r7, r0
 8002ba6:	3568      	adds	r5, #104	; 0x68
 8002ba8:	e7e9      	b.n	8002b7e <_fwalk_reent+0x12>

08002baa <__retarget_lock_init_recursive>:
 8002baa:	4770      	bx	lr

08002bac <__retarget_lock_acquire_recursive>:
 8002bac:	4770      	bx	lr

08002bae <__retarget_lock_release_recursive>:
 8002bae:	4770      	bx	lr

08002bb0 <__swhatbuf_r>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	460e      	mov	r6, r1
 8002bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	b096      	sub	sp, #88	; 0x58
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	da08      	bge.n	8002bd4 <__swhatbuf_r+0x24>
 8002bc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	602a      	str	r2, [r5, #0]
 8002bca:	061a      	lsls	r2, r3, #24
 8002bcc:	d410      	bmi.n	8002bf0 <__swhatbuf_r+0x40>
 8002bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd2:	e00e      	b.n	8002bf2 <__swhatbuf_r+0x42>
 8002bd4:	466a      	mov	r2, sp
 8002bd6:	f000 fd93 	bl	8003700 <_fstat_r>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	dbf1      	blt.n	8002bc2 <__swhatbuf_r+0x12>
 8002bde:	9a01      	ldr	r2, [sp, #4]
 8002be0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002be4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002be8:	425a      	negs	r2, r3
 8002bea:	415a      	adcs	r2, r3
 8002bec:	602a      	str	r2, [r5, #0]
 8002bee:	e7ee      	b.n	8002bce <__swhatbuf_r+0x1e>
 8002bf0:	2340      	movs	r3, #64	; 0x40
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	b016      	add	sp, #88	; 0x58
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bfc <__smakebuf_r>:
 8002bfc:	898b      	ldrh	r3, [r1, #12]
 8002bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c00:	079d      	lsls	r5, r3, #30
 8002c02:	4606      	mov	r6, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	d507      	bpl.n	8002c18 <__smakebuf_r+0x1c>
 8002c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	6123      	str	r3, [r4, #16]
 8002c10:	2301      	movs	r3, #1
 8002c12:	6163      	str	r3, [r4, #20]
 8002c14:	b002      	add	sp, #8
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	ab01      	add	r3, sp, #4
 8002c1a:	466a      	mov	r2, sp
 8002c1c:	f7ff ffc8 	bl	8002bb0 <__swhatbuf_r>
 8002c20:	9900      	ldr	r1, [sp, #0]
 8002c22:	4605      	mov	r5, r0
 8002c24:	4630      	mov	r0, r6
 8002c26:	f000 f89d 	bl	8002d64 <_malloc_r>
 8002c2a:	b948      	cbnz	r0, 8002c40 <__smakebuf_r+0x44>
 8002c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c30:	059a      	lsls	r2, r3, #22
 8002c32:	d4ef      	bmi.n	8002c14 <__smakebuf_r+0x18>
 8002c34:	f023 0303 	bic.w	r3, r3, #3
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	e7e3      	b.n	8002c08 <__smakebuf_r+0xc>
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <__smakebuf_r+0x7c>)
 8002c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	6020      	str	r0, [r4, #0]
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	9b00      	ldr	r3, [sp, #0]
 8002c50:	6163      	str	r3, [r4, #20]
 8002c52:	9b01      	ldr	r3, [sp, #4]
 8002c54:	6120      	str	r0, [r4, #16]
 8002c56:	b15b      	cbz	r3, 8002c70 <__smakebuf_r+0x74>
 8002c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 fd61 	bl	8003724 <_isatty_r>
 8002c62:	b128      	cbz	r0, 8002c70 <__smakebuf_r+0x74>
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	89a0      	ldrh	r0, [r4, #12]
 8002c72:	4305      	orrs	r5, r0
 8002c74:	81a5      	strh	r5, [r4, #12]
 8002c76:	e7cd      	b.n	8002c14 <__smakebuf_r+0x18>
 8002c78:	08002a09 	.word	0x08002a09

08002c7c <malloc>:
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <malloc+0xc>)
 8002c7e:	4601      	mov	r1, r0
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	f000 b86f 	b.w	8002d64 <_malloc_r>
 8002c86:	bf00      	nop
 8002c88:	2000002c 	.word	0x2000002c

08002c8c <_free_r>:
 8002c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c8e:	2900      	cmp	r1, #0
 8002c90:	d044      	beq.n	8002d1c <_free_r+0x90>
 8002c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c96:	9001      	str	r0, [sp, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8002c9e:	bfb8      	it	lt
 8002ca0:	18e4      	addlt	r4, r4, r3
 8002ca2:	f000 fd61 	bl	8003768 <__malloc_lock>
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <_free_r+0x94>)
 8002ca8:	9801      	ldr	r0, [sp, #4]
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	b933      	cbnz	r3, 8002cbc <_free_r+0x30>
 8002cae:	6063      	str	r3, [r4, #4]
 8002cb0:	6014      	str	r4, [r2, #0]
 8002cb2:	b003      	add	sp, #12
 8002cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cb8:	f000 bd5c 	b.w	8003774 <__malloc_unlock>
 8002cbc:	42a3      	cmp	r3, r4
 8002cbe:	d908      	bls.n	8002cd2 <_free_r+0x46>
 8002cc0:	6825      	ldr	r5, [r4, #0]
 8002cc2:	1961      	adds	r1, r4, r5
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	bf01      	itttt	eq
 8002cc8:	6819      	ldreq	r1, [r3, #0]
 8002cca:	685b      	ldreq	r3, [r3, #4]
 8002ccc:	1949      	addeq	r1, r1, r5
 8002cce:	6021      	streq	r1, [r4, #0]
 8002cd0:	e7ed      	b.n	8002cae <_free_r+0x22>
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	b10b      	cbz	r3, 8002cdc <_free_r+0x50>
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d9fa      	bls.n	8002cd2 <_free_r+0x46>
 8002cdc:	6811      	ldr	r1, [r2, #0]
 8002cde:	1855      	adds	r5, r2, r1
 8002ce0:	42a5      	cmp	r5, r4
 8002ce2:	d10b      	bne.n	8002cfc <_free_r+0x70>
 8002ce4:	6824      	ldr	r4, [r4, #0]
 8002ce6:	4421      	add	r1, r4
 8002ce8:	1854      	adds	r4, r2, r1
 8002cea:	42a3      	cmp	r3, r4
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	d1e0      	bne.n	8002cb2 <_free_r+0x26>
 8002cf0:	681c      	ldr	r4, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	6053      	str	r3, [r2, #4]
 8002cf6:	4421      	add	r1, r4
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	e7da      	b.n	8002cb2 <_free_r+0x26>
 8002cfc:	d902      	bls.n	8002d04 <_free_r+0x78>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	6003      	str	r3, [r0, #0]
 8002d02:	e7d6      	b.n	8002cb2 <_free_r+0x26>
 8002d04:	6825      	ldr	r5, [r4, #0]
 8002d06:	1961      	adds	r1, r4, r5
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	bf04      	itt	eq
 8002d0c:	6819      	ldreq	r1, [r3, #0]
 8002d0e:	685b      	ldreq	r3, [r3, #4]
 8002d10:	6063      	str	r3, [r4, #4]
 8002d12:	bf04      	itt	eq
 8002d14:	1949      	addeq	r1, r1, r5
 8002d16:	6021      	streq	r1, [r4, #0]
 8002d18:	6054      	str	r4, [r2, #4]
 8002d1a:	e7ca      	b.n	8002cb2 <_free_r+0x26>
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bd30      	pop	{r4, r5, pc}
 8002d20:	200000b8 	.word	0x200000b8

08002d24 <sbrk_aligned>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	4e0e      	ldr	r6, [pc, #56]	; (8002d60 <sbrk_aligned+0x3c>)
 8002d28:	460c      	mov	r4, r1
 8002d2a:	6831      	ldr	r1, [r6, #0]
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	b911      	cbnz	r1, 8002d36 <sbrk_aligned+0x12>
 8002d30:	f000 fbc2 	bl	80034b8 <_sbrk_r>
 8002d34:	6030      	str	r0, [r6, #0]
 8002d36:	4621      	mov	r1, r4
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 fbbd 	bl	80034b8 <_sbrk_r>
 8002d3e:	1c43      	adds	r3, r0, #1
 8002d40:	d00a      	beq.n	8002d58 <sbrk_aligned+0x34>
 8002d42:	1cc4      	adds	r4, r0, #3
 8002d44:	f024 0403 	bic.w	r4, r4, #3
 8002d48:	42a0      	cmp	r0, r4
 8002d4a:	d007      	beq.n	8002d5c <sbrk_aligned+0x38>
 8002d4c:	1a21      	subs	r1, r4, r0
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f000 fbb2 	bl	80034b8 <_sbrk_r>
 8002d54:	3001      	adds	r0, #1
 8002d56:	d101      	bne.n	8002d5c <sbrk_aligned+0x38>
 8002d58:	f04f 34ff 	mov.w	r4, #4294967295
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	200000bc 	.word	0x200000bc

08002d64 <_malloc_r>:
 8002d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d68:	1ccd      	adds	r5, r1, #3
 8002d6a:	f025 0503 	bic.w	r5, r5, #3
 8002d6e:	3508      	adds	r5, #8
 8002d70:	2d0c      	cmp	r5, #12
 8002d72:	bf38      	it	cc
 8002d74:	250c      	movcc	r5, #12
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	4607      	mov	r7, r0
 8002d7a:	db01      	blt.n	8002d80 <_malloc_r+0x1c>
 8002d7c:	42a9      	cmp	r1, r5
 8002d7e:	d905      	bls.n	8002d8c <_malloc_r+0x28>
 8002d80:	230c      	movs	r3, #12
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	2600      	movs	r6, #0
 8002d86:	4630      	mov	r0, r6
 8002d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d8c:	4e2e      	ldr	r6, [pc, #184]	; (8002e48 <_malloc_r+0xe4>)
 8002d8e:	f000 fceb 	bl	8003768 <__malloc_lock>
 8002d92:	6833      	ldr	r3, [r6, #0]
 8002d94:	461c      	mov	r4, r3
 8002d96:	bb34      	cbnz	r4, 8002de6 <_malloc_r+0x82>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f7ff ffc2 	bl	8002d24 <sbrk_aligned>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	4604      	mov	r4, r0
 8002da4:	d14d      	bne.n	8002e42 <_malloc_r+0xde>
 8002da6:	6834      	ldr	r4, [r6, #0]
 8002da8:	4626      	mov	r6, r4
 8002daa:	2e00      	cmp	r6, #0
 8002dac:	d140      	bne.n	8002e30 <_malloc_r+0xcc>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	4631      	mov	r1, r6
 8002db2:	4638      	mov	r0, r7
 8002db4:	eb04 0803 	add.w	r8, r4, r3
 8002db8:	f000 fb7e 	bl	80034b8 <_sbrk_r>
 8002dbc:	4580      	cmp	r8, r0
 8002dbe:	d13a      	bne.n	8002e36 <_malloc_r+0xd2>
 8002dc0:	6821      	ldr	r1, [r4, #0]
 8002dc2:	3503      	adds	r5, #3
 8002dc4:	1a6d      	subs	r5, r5, r1
 8002dc6:	f025 0503 	bic.w	r5, r5, #3
 8002dca:	3508      	adds	r5, #8
 8002dcc:	2d0c      	cmp	r5, #12
 8002dce:	bf38      	it	cc
 8002dd0:	250c      	movcc	r5, #12
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	f7ff ffa5 	bl	8002d24 <sbrk_aligned>
 8002dda:	3001      	adds	r0, #1
 8002ddc:	d02b      	beq.n	8002e36 <_malloc_r+0xd2>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	442b      	add	r3, r5
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	e00e      	b.n	8002e04 <_malloc_r+0xa0>
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	1b52      	subs	r2, r2, r5
 8002dea:	d41e      	bmi.n	8002e2a <_malloc_r+0xc6>
 8002dec:	2a0b      	cmp	r2, #11
 8002dee:	d916      	bls.n	8002e1e <_malloc_r+0xba>
 8002df0:	1961      	adds	r1, r4, r5
 8002df2:	42a3      	cmp	r3, r4
 8002df4:	6025      	str	r5, [r4, #0]
 8002df6:	bf18      	it	ne
 8002df8:	6059      	strne	r1, [r3, #4]
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	bf08      	it	eq
 8002dfe:	6031      	streq	r1, [r6, #0]
 8002e00:	5162      	str	r2, [r4, r5]
 8002e02:	604b      	str	r3, [r1, #4]
 8002e04:	4638      	mov	r0, r7
 8002e06:	f104 060b 	add.w	r6, r4, #11
 8002e0a:	f000 fcb3 	bl	8003774 <__malloc_unlock>
 8002e0e:	f026 0607 	bic.w	r6, r6, #7
 8002e12:	1d23      	adds	r3, r4, #4
 8002e14:	1af2      	subs	r2, r6, r3
 8002e16:	d0b6      	beq.n	8002d86 <_malloc_r+0x22>
 8002e18:	1b9b      	subs	r3, r3, r6
 8002e1a:	50a3      	str	r3, [r4, r2]
 8002e1c:	e7b3      	b.n	8002d86 <_malloc_r+0x22>
 8002e1e:	6862      	ldr	r2, [r4, #4]
 8002e20:	42a3      	cmp	r3, r4
 8002e22:	bf0c      	ite	eq
 8002e24:	6032      	streq	r2, [r6, #0]
 8002e26:	605a      	strne	r2, [r3, #4]
 8002e28:	e7ec      	b.n	8002e04 <_malloc_r+0xa0>
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	6864      	ldr	r4, [r4, #4]
 8002e2e:	e7b2      	b.n	8002d96 <_malloc_r+0x32>
 8002e30:	4634      	mov	r4, r6
 8002e32:	6876      	ldr	r6, [r6, #4]
 8002e34:	e7b9      	b.n	8002daa <_malloc_r+0x46>
 8002e36:	230c      	movs	r3, #12
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	f000 fc9a 	bl	8003774 <__malloc_unlock>
 8002e40:	e7a1      	b.n	8002d86 <_malloc_r+0x22>
 8002e42:	6025      	str	r5, [r4, #0]
 8002e44:	e7de      	b.n	8002e04 <_malloc_r+0xa0>
 8002e46:	bf00      	nop
 8002e48:	200000b8 	.word	0x200000b8

08002e4c <__sfputc_r>:
 8002e4c:	6893      	ldr	r3, [r2, #8]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	b410      	push	{r4}
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	da08      	bge.n	8002e6a <__sfputc_r+0x1e>
 8002e58:	6994      	ldr	r4, [r2, #24]
 8002e5a:	42a3      	cmp	r3, r4
 8002e5c:	db01      	blt.n	8002e62 <__sfputc_r+0x16>
 8002e5e:	290a      	cmp	r1, #10
 8002e60:	d103      	bne.n	8002e6a <__sfputc_r+0x1e>
 8002e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e66:	f000 bb7b 	b.w	8003560 <__swbuf_r>
 8002e6a:	6813      	ldr	r3, [r2, #0]
 8002e6c:	1c58      	adds	r0, r3, #1
 8002e6e:	6010      	str	r0, [r2, #0]
 8002e70:	7019      	strb	r1, [r3, #0]
 8002e72:	4608      	mov	r0, r1
 8002e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <__sfputs_r>:
 8002e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	460f      	mov	r7, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	18d5      	adds	r5, r2, r3
 8002e84:	42ac      	cmp	r4, r5
 8002e86:	d101      	bne.n	8002e8c <__sfputs_r+0x12>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e007      	b.n	8002e9c <__sfputs_r+0x22>
 8002e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e90:	463a      	mov	r2, r7
 8002e92:	4630      	mov	r0, r6
 8002e94:	f7ff ffda 	bl	8002e4c <__sfputc_r>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d1f3      	bne.n	8002e84 <__sfputs_r+0xa>
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ea0 <_vfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	b09d      	sub	sp, #116	; 0x74
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	4698      	mov	r8, r3
 8002eac:	4606      	mov	r6, r0
 8002eae:	b118      	cbz	r0, 8002eb8 <_vfiprintf_r+0x18>
 8002eb0:	6983      	ldr	r3, [r0, #24]
 8002eb2:	b90b      	cbnz	r3, 8002eb8 <_vfiprintf_r+0x18>
 8002eb4:	f7ff fddc 	bl	8002a70 <__sinit>
 8002eb8:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <_vfiprintf_r+0x240>)
 8002eba:	429d      	cmp	r5, r3
 8002ebc:	d11b      	bne.n	8002ef6 <_vfiprintf_r+0x56>
 8002ebe:	6875      	ldr	r5, [r6, #4]
 8002ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ec2:	07d9      	lsls	r1, r3, #31
 8002ec4:	d405      	bmi.n	8002ed2 <_vfiprintf_r+0x32>
 8002ec6:	89ab      	ldrh	r3, [r5, #12]
 8002ec8:	059a      	lsls	r2, r3, #22
 8002eca:	d402      	bmi.n	8002ed2 <_vfiprintf_r+0x32>
 8002ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ece:	f7ff fe6d 	bl	8002bac <__retarget_lock_acquire_recursive>
 8002ed2:	89ab      	ldrh	r3, [r5, #12]
 8002ed4:	071b      	lsls	r3, r3, #28
 8002ed6:	d501      	bpl.n	8002edc <_vfiprintf_r+0x3c>
 8002ed8:	692b      	ldr	r3, [r5, #16]
 8002eda:	b9eb      	cbnz	r3, 8002f18 <_vfiprintf_r+0x78>
 8002edc:	4629      	mov	r1, r5
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 fb90 	bl	8003604 <__swsetup_r>
 8002ee4:	b1c0      	cbz	r0, 8002f18 <_vfiprintf_r+0x78>
 8002ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ee8:	07dc      	lsls	r4, r3, #31
 8002eea:	d50e      	bpl.n	8002f0a <_vfiprintf_r+0x6a>
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	b01d      	add	sp, #116	; 0x74
 8002ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef6:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <_vfiprintf_r+0x244>)
 8002ef8:	429d      	cmp	r5, r3
 8002efa:	d101      	bne.n	8002f00 <_vfiprintf_r+0x60>
 8002efc:	68b5      	ldr	r5, [r6, #8]
 8002efe:	e7df      	b.n	8002ec0 <_vfiprintf_r+0x20>
 8002f00:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <_vfiprintf_r+0x248>)
 8002f02:	429d      	cmp	r5, r3
 8002f04:	bf08      	it	eq
 8002f06:	68f5      	ldreq	r5, [r6, #12]
 8002f08:	e7da      	b.n	8002ec0 <_vfiprintf_r+0x20>
 8002f0a:	89ab      	ldrh	r3, [r5, #12]
 8002f0c:	0598      	lsls	r0, r3, #22
 8002f0e:	d4ed      	bmi.n	8002eec <_vfiprintf_r+0x4c>
 8002f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f12:	f7ff fe4c 	bl	8002bae <__retarget_lock_release_recursive>
 8002f16:	e7e9      	b.n	8002eec <_vfiprintf_r+0x4c>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f26:	2330      	movs	r3, #48	; 0x30
 8002f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80030ec <_vfiprintf_r+0x24c>
 8002f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f30:	f04f 0901 	mov.w	r9, #1
 8002f34:	4623      	mov	r3, r4
 8002f36:	469a      	mov	sl, r3
 8002f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f3c:	b10a      	cbz	r2, 8002f42 <_vfiprintf_r+0xa2>
 8002f3e:	2a25      	cmp	r2, #37	; 0x25
 8002f40:	d1f9      	bne.n	8002f36 <_vfiprintf_r+0x96>
 8002f42:	ebba 0b04 	subs.w	fp, sl, r4
 8002f46:	d00b      	beq.n	8002f60 <_vfiprintf_r+0xc0>
 8002f48:	465b      	mov	r3, fp
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f7ff ff93 	bl	8002e7a <__sfputs_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	f000 80aa 	beq.w	80030ae <_vfiprintf_r+0x20e>
 8002f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5c:	445a      	add	r2, fp
 8002f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f60:	f89a 3000 	ldrb.w	r3, [sl]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a2 	beq.w	80030ae <_vfiprintf_r+0x20e>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f74:	f10a 0a01 	add.w	sl, sl, #1
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	9307      	str	r3, [sp, #28]
 8002f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f80:	931a      	str	r3, [sp, #104]	; 0x68
 8002f82:	4654      	mov	r4, sl
 8002f84:	2205      	movs	r2, #5
 8002f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8a:	4858      	ldr	r0, [pc, #352]	; (80030ec <_vfiprintf_r+0x24c>)
 8002f8c:	f7fd f920 	bl	80001d0 <memchr>
 8002f90:	9a04      	ldr	r2, [sp, #16]
 8002f92:	b9d8      	cbnz	r0, 8002fcc <_vfiprintf_r+0x12c>
 8002f94:	06d1      	lsls	r1, r2, #27
 8002f96:	bf44      	itt	mi
 8002f98:	2320      	movmi	r3, #32
 8002f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f9e:	0713      	lsls	r3, r2, #28
 8002fa0:	bf44      	itt	mi
 8002fa2:	232b      	movmi	r3, #43	; 0x2b
 8002fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fac:	2b2a      	cmp	r3, #42	; 0x2a
 8002fae:	d015      	beq.n	8002fdc <_vfiprintf_r+0x13c>
 8002fb0:	9a07      	ldr	r2, [sp, #28]
 8002fb2:	4654      	mov	r4, sl
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f04f 0c0a 	mov.w	ip, #10
 8002fba:	4621      	mov	r1, r4
 8002fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc0:	3b30      	subs	r3, #48	; 0x30
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	d94e      	bls.n	8003064 <_vfiprintf_r+0x1c4>
 8002fc6:	b1b0      	cbz	r0, 8002ff6 <_vfiprintf_r+0x156>
 8002fc8:	9207      	str	r2, [sp, #28]
 8002fca:	e014      	b.n	8002ff6 <_vfiprintf_r+0x156>
 8002fcc:	eba0 0308 	sub.w	r3, r0, r8
 8002fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	9304      	str	r3, [sp, #16]
 8002fd8:	46a2      	mov	sl, r4
 8002fda:	e7d2      	b.n	8002f82 <_vfiprintf_r+0xe2>
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	1d19      	adds	r1, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	9103      	str	r1, [sp, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfbb      	ittet	lt
 8002fe8:	425b      	neglt	r3, r3
 8002fea:	f042 0202 	orrlt.w	r2, r2, #2
 8002fee:	9307      	strge	r3, [sp, #28]
 8002ff0:	9307      	strlt	r3, [sp, #28]
 8002ff2:	bfb8      	it	lt
 8002ff4:	9204      	strlt	r2, [sp, #16]
 8002ff6:	7823      	ldrb	r3, [r4, #0]
 8002ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffa:	d10c      	bne.n	8003016 <_vfiprintf_r+0x176>
 8002ffc:	7863      	ldrb	r3, [r4, #1]
 8002ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8003000:	d135      	bne.n	800306e <_vfiprintf_r+0x1ce>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	9203      	str	r2, [sp, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfb8      	it	lt
 800300e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003012:	3402      	adds	r4, #2
 8003014:	9305      	str	r3, [sp, #20]
 8003016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80030fc <_vfiprintf_r+0x25c>
 800301a:	7821      	ldrb	r1, [r4, #0]
 800301c:	2203      	movs	r2, #3
 800301e:	4650      	mov	r0, sl
 8003020:	f7fd f8d6 	bl	80001d0 <memchr>
 8003024:	b140      	cbz	r0, 8003038 <_vfiprintf_r+0x198>
 8003026:	2340      	movs	r3, #64	; 0x40
 8003028:	eba0 000a 	sub.w	r0, r0, sl
 800302c:	fa03 f000 	lsl.w	r0, r3, r0
 8003030:	9b04      	ldr	r3, [sp, #16]
 8003032:	4303      	orrs	r3, r0
 8003034:	3401      	adds	r4, #1
 8003036:	9304      	str	r3, [sp, #16]
 8003038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303c:	482c      	ldr	r0, [pc, #176]	; (80030f0 <_vfiprintf_r+0x250>)
 800303e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003042:	2206      	movs	r2, #6
 8003044:	f7fd f8c4 	bl	80001d0 <memchr>
 8003048:	2800      	cmp	r0, #0
 800304a:	d03f      	beq.n	80030cc <_vfiprintf_r+0x22c>
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <_vfiprintf_r+0x254>)
 800304e:	bb1b      	cbnz	r3, 8003098 <_vfiprintf_r+0x1f8>
 8003050:	9b03      	ldr	r3, [sp, #12]
 8003052:	3307      	adds	r3, #7
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	3308      	adds	r3, #8
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305e:	443b      	add	r3, r7
 8003060:	9309      	str	r3, [sp, #36]	; 0x24
 8003062:	e767      	b.n	8002f34 <_vfiprintf_r+0x94>
 8003064:	fb0c 3202 	mla	r2, ip, r2, r3
 8003068:	460c      	mov	r4, r1
 800306a:	2001      	movs	r0, #1
 800306c:	e7a5      	b.n	8002fba <_vfiprintf_r+0x11a>
 800306e:	2300      	movs	r3, #0
 8003070:	3401      	adds	r4, #1
 8003072:	9305      	str	r3, [sp, #20]
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	4620      	mov	r0, r4
 800307c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003080:	3a30      	subs	r2, #48	; 0x30
 8003082:	2a09      	cmp	r2, #9
 8003084:	d903      	bls.n	800308e <_vfiprintf_r+0x1ee>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0c5      	beq.n	8003016 <_vfiprintf_r+0x176>
 800308a:	9105      	str	r1, [sp, #20]
 800308c:	e7c3      	b.n	8003016 <_vfiprintf_r+0x176>
 800308e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003092:	4604      	mov	r4, r0
 8003094:	2301      	movs	r3, #1
 8003096:	e7f0      	b.n	800307a <_vfiprintf_r+0x1da>
 8003098:	ab03      	add	r3, sp, #12
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	462a      	mov	r2, r5
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <_vfiprintf_r+0x258>)
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	4630      	mov	r0, r6
 80030a4:	f3af 8000 	nop.w
 80030a8:	4607      	mov	r7, r0
 80030aa:	1c78      	adds	r0, r7, #1
 80030ac:	d1d6      	bne.n	800305c <_vfiprintf_r+0x1bc>
 80030ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030b0:	07d9      	lsls	r1, r3, #31
 80030b2:	d405      	bmi.n	80030c0 <_vfiprintf_r+0x220>
 80030b4:	89ab      	ldrh	r3, [r5, #12]
 80030b6:	059a      	lsls	r2, r3, #22
 80030b8:	d402      	bmi.n	80030c0 <_vfiprintf_r+0x220>
 80030ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030bc:	f7ff fd77 	bl	8002bae <__retarget_lock_release_recursive>
 80030c0:	89ab      	ldrh	r3, [r5, #12]
 80030c2:	065b      	lsls	r3, r3, #25
 80030c4:	f53f af12 	bmi.w	8002eec <_vfiprintf_r+0x4c>
 80030c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ca:	e711      	b.n	8002ef0 <_vfiprintf_r+0x50>
 80030cc:	ab03      	add	r3, sp, #12
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	462a      	mov	r2, r5
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <_vfiprintf_r+0x258>)
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	4630      	mov	r0, r6
 80030d8:	f000 f880 	bl	80031dc <_printf_i>
 80030dc:	e7e4      	b.n	80030a8 <_vfiprintf_r+0x208>
 80030de:	bf00      	nop
 80030e0:	08003958 	.word	0x08003958
 80030e4:	08003978 	.word	0x08003978
 80030e8:	08003938 	.word	0x08003938
 80030ec:	08003998 	.word	0x08003998
 80030f0:	080039a2 	.word	0x080039a2
 80030f4:	00000000 	.word	0x00000000
 80030f8:	08002e7b 	.word	0x08002e7b
 80030fc:	0800399e 	.word	0x0800399e

08003100 <_printf_common>:
 8003100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	4616      	mov	r6, r2
 8003106:	4699      	mov	r9, r3
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003110:	4293      	cmp	r3, r2
 8003112:	bfb8      	it	lt
 8003114:	4613      	movlt	r3, r2
 8003116:	6033      	str	r3, [r6, #0]
 8003118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800311c:	4607      	mov	r7, r0
 800311e:	460c      	mov	r4, r1
 8003120:	b10a      	cbz	r2, 8003126 <_printf_common+0x26>
 8003122:	3301      	adds	r3, #1
 8003124:	6033      	str	r3, [r6, #0]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	0699      	lsls	r1, r3, #26
 800312a:	bf42      	ittt	mi
 800312c:	6833      	ldrmi	r3, [r6, #0]
 800312e:	3302      	addmi	r3, #2
 8003130:	6033      	strmi	r3, [r6, #0]
 8003132:	6825      	ldr	r5, [r4, #0]
 8003134:	f015 0506 	ands.w	r5, r5, #6
 8003138:	d106      	bne.n	8003148 <_printf_common+0x48>
 800313a:	f104 0a19 	add.w	sl, r4, #25
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	6832      	ldr	r2, [r6, #0]
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	42ab      	cmp	r3, r5
 8003146:	dc26      	bgt.n	8003196 <_printf_common+0x96>
 8003148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800314c:	1e13      	subs	r3, r2, #0
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	bf18      	it	ne
 8003152:	2301      	movne	r3, #1
 8003154:	0692      	lsls	r2, r2, #26
 8003156:	d42b      	bmi.n	80031b0 <_printf_common+0xb0>
 8003158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800315c:	4649      	mov	r1, r9
 800315e:	4638      	mov	r0, r7
 8003160:	47c0      	blx	r8
 8003162:	3001      	adds	r0, #1
 8003164:	d01e      	beq.n	80031a4 <_printf_common+0xa4>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	68e5      	ldr	r5, [r4, #12]
 800316a:	6832      	ldr	r2, [r6, #0]
 800316c:	f003 0306 	and.w	r3, r3, #6
 8003170:	2b04      	cmp	r3, #4
 8003172:	bf08      	it	eq
 8003174:	1aad      	subeq	r5, r5, r2
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	6922      	ldr	r2, [r4, #16]
 800317a:	bf0c      	ite	eq
 800317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003180:	2500      	movne	r5, #0
 8003182:	4293      	cmp	r3, r2
 8003184:	bfc4      	itt	gt
 8003186:	1a9b      	subgt	r3, r3, r2
 8003188:	18ed      	addgt	r5, r5, r3
 800318a:	2600      	movs	r6, #0
 800318c:	341a      	adds	r4, #26
 800318e:	42b5      	cmp	r5, r6
 8003190:	d11a      	bne.n	80031c8 <_printf_common+0xc8>
 8003192:	2000      	movs	r0, #0
 8003194:	e008      	b.n	80031a8 <_printf_common+0xa8>
 8003196:	2301      	movs	r3, #1
 8003198:	4652      	mov	r2, sl
 800319a:	4649      	mov	r1, r9
 800319c:	4638      	mov	r0, r7
 800319e:	47c0      	blx	r8
 80031a0:	3001      	adds	r0, #1
 80031a2:	d103      	bne.n	80031ac <_printf_common+0xac>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ac:	3501      	adds	r5, #1
 80031ae:	e7c6      	b.n	800313e <_printf_common+0x3e>
 80031b0:	18e1      	adds	r1, r4, r3
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	2030      	movs	r0, #48	; 0x30
 80031b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ba:	4422      	add	r2, r4
 80031bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c4:	3302      	adds	r3, #2
 80031c6:	e7c7      	b.n	8003158 <_printf_common+0x58>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4622      	mov	r2, r4
 80031cc:	4649      	mov	r1, r9
 80031ce:	4638      	mov	r0, r7
 80031d0:	47c0      	blx	r8
 80031d2:	3001      	adds	r0, #1
 80031d4:	d0e6      	beq.n	80031a4 <_printf_common+0xa4>
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7d9      	b.n	800318e <_printf_common+0x8e>
	...

080031dc <_printf_i>:
 80031dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	7e0f      	ldrb	r7, [r1, #24]
 80031e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031e4:	2f78      	cmp	r7, #120	; 0x78
 80031e6:	4691      	mov	r9, r2
 80031e8:	4680      	mov	r8, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	469a      	mov	sl, r3
 80031ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031f2:	d807      	bhi.n	8003204 <_printf_i+0x28>
 80031f4:	2f62      	cmp	r7, #98	; 0x62
 80031f6:	d80a      	bhi.n	800320e <_printf_i+0x32>
 80031f8:	2f00      	cmp	r7, #0
 80031fa:	f000 80d8 	beq.w	80033ae <_printf_i+0x1d2>
 80031fe:	2f58      	cmp	r7, #88	; 0x58
 8003200:	f000 80a3 	beq.w	800334a <_printf_i+0x16e>
 8003204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800320c:	e03a      	b.n	8003284 <_printf_i+0xa8>
 800320e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003212:	2b15      	cmp	r3, #21
 8003214:	d8f6      	bhi.n	8003204 <_printf_i+0x28>
 8003216:	a101      	add	r1, pc, #4	; (adr r1, 800321c <_printf_i+0x40>)
 8003218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800321c:	08003275 	.word	0x08003275
 8003220:	08003289 	.word	0x08003289
 8003224:	08003205 	.word	0x08003205
 8003228:	08003205 	.word	0x08003205
 800322c:	08003205 	.word	0x08003205
 8003230:	08003205 	.word	0x08003205
 8003234:	08003289 	.word	0x08003289
 8003238:	08003205 	.word	0x08003205
 800323c:	08003205 	.word	0x08003205
 8003240:	08003205 	.word	0x08003205
 8003244:	08003205 	.word	0x08003205
 8003248:	08003395 	.word	0x08003395
 800324c:	080032b9 	.word	0x080032b9
 8003250:	08003377 	.word	0x08003377
 8003254:	08003205 	.word	0x08003205
 8003258:	08003205 	.word	0x08003205
 800325c:	080033b7 	.word	0x080033b7
 8003260:	08003205 	.word	0x08003205
 8003264:	080032b9 	.word	0x080032b9
 8003268:	08003205 	.word	0x08003205
 800326c:	08003205 	.word	0x08003205
 8003270:	0800337f 	.word	0x0800337f
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	602a      	str	r2, [r5, #0]
 800327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003284:	2301      	movs	r3, #1
 8003286:	e0a3      	b.n	80033d0 <_printf_i+0x1f4>
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	6829      	ldr	r1, [r5, #0]
 800328c:	0606      	lsls	r6, r0, #24
 800328e:	f101 0304 	add.w	r3, r1, #4
 8003292:	d50a      	bpl.n	80032aa <_printf_i+0xce>
 8003294:	680e      	ldr	r6, [r1, #0]
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	2e00      	cmp	r6, #0
 800329a:	da03      	bge.n	80032a4 <_printf_i+0xc8>
 800329c:	232d      	movs	r3, #45	; 0x2d
 800329e:	4276      	negs	r6, r6
 80032a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a4:	485e      	ldr	r0, [pc, #376]	; (8003420 <_printf_i+0x244>)
 80032a6:	230a      	movs	r3, #10
 80032a8:	e019      	b.n	80032de <_printf_i+0x102>
 80032aa:	680e      	ldr	r6, [r1, #0]
 80032ac:	602b      	str	r3, [r5, #0]
 80032ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032b2:	bf18      	it	ne
 80032b4:	b236      	sxthne	r6, r6
 80032b6:	e7ef      	b.n	8003298 <_printf_i+0xbc>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	1d19      	adds	r1, r3, #4
 80032be:	6029      	str	r1, [r5, #0]
 80032c0:	0601      	lsls	r1, r0, #24
 80032c2:	d501      	bpl.n	80032c8 <_printf_i+0xec>
 80032c4:	681e      	ldr	r6, [r3, #0]
 80032c6:	e002      	b.n	80032ce <_printf_i+0xf2>
 80032c8:	0646      	lsls	r6, r0, #25
 80032ca:	d5fb      	bpl.n	80032c4 <_printf_i+0xe8>
 80032cc:	881e      	ldrh	r6, [r3, #0]
 80032ce:	4854      	ldr	r0, [pc, #336]	; (8003420 <_printf_i+0x244>)
 80032d0:	2f6f      	cmp	r7, #111	; 0x6f
 80032d2:	bf0c      	ite	eq
 80032d4:	2308      	moveq	r3, #8
 80032d6:	230a      	movne	r3, #10
 80032d8:	2100      	movs	r1, #0
 80032da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032de:	6865      	ldr	r5, [r4, #4]
 80032e0:	60a5      	str	r5, [r4, #8]
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	bfa2      	ittt	ge
 80032e6:	6821      	ldrge	r1, [r4, #0]
 80032e8:	f021 0104 	bicge.w	r1, r1, #4
 80032ec:	6021      	strge	r1, [r4, #0]
 80032ee:	b90e      	cbnz	r6, 80032f4 <_printf_i+0x118>
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	d04d      	beq.n	8003390 <_printf_i+0x1b4>
 80032f4:	4615      	mov	r5, r2
 80032f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80032fa:	fb03 6711 	mls	r7, r3, r1, r6
 80032fe:	5dc7      	ldrb	r7, [r0, r7]
 8003300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003304:	4637      	mov	r7, r6
 8003306:	42bb      	cmp	r3, r7
 8003308:	460e      	mov	r6, r1
 800330a:	d9f4      	bls.n	80032f6 <_printf_i+0x11a>
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10b      	bne.n	8003328 <_printf_i+0x14c>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	07de      	lsls	r6, r3, #31
 8003314:	d508      	bpl.n	8003328 <_printf_i+0x14c>
 8003316:	6923      	ldr	r3, [r4, #16]
 8003318:	6861      	ldr	r1, [r4, #4]
 800331a:	4299      	cmp	r1, r3
 800331c:	bfde      	ittt	le
 800331e:	2330      	movle	r3, #48	; 0x30
 8003320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003328:	1b52      	subs	r2, r2, r5
 800332a:	6122      	str	r2, [r4, #16]
 800332c:	f8cd a000 	str.w	sl, [sp]
 8003330:	464b      	mov	r3, r9
 8003332:	aa03      	add	r2, sp, #12
 8003334:	4621      	mov	r1, r4
 8003336:	4640      	mov	r0, r8
 8003338:	f7ff fee2 	bl	8003100 <_printf_common>
 800333c:	3001      	adds	r0, #1
 800333e:	d14c      	bne.n	80033da <_printf_i+0x1fe>
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	b004      	add	sp, #16
 8003346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334a:	4835      	ldr	r0, [pc, #212]	; (8003420 <_printf_i+0x244>)
 800334c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003350:	6829      	ldr	r1, [r5, #0]
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f851 6b04 	ldr.w	r6, [r1], #4
 8003358:	6029      	str	r1, [r5, #0]
 800335a:	061d      	lsls	r5, r3, #24
 800335c:	d514      	bpl.n	8003388 <_printf_i+0x1ac>
 800335e:	07df      	lsls	r7, r3, #31
 8003360:	bf44      	itt	mi
 8003362:	f043 0320 	orrmi.w	r3, r3, #32
 8003366:	6023      	strmi	r3, [r4, #0]
 8003368:	b91e      	cbnz	r6, 8003372 <_printf_i+0x196>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	f023 0320 	bic.w	r3, r3, #32
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	2310      	movs	r3, #16
 8003374:	e7b0      	b.n	80032d8 <_printf_i+0xfc>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	f043 0320 	orr.w	r3, r3, #32
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	2378      	movs	r3, #120	; 0x78
 8003380:	4828      	ldr	r0, [pc, #160]	; (8003424 <_printf_i+0x248>)
 8003382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003386:	e7e3      	b.n	8003350 <_printf_i+0x174>
 8003388:	0659      	lsls	r1, r3, #25
 800338a:	bf48      	it	mi
 800338c:	b2b6      	uxthmi	r6, r6
 800338e:	e7e6      	b.n	800335e <_printf_i+0x182>
 8003390:	4615      	mov	r5, r2
 8003392:	e7bb      	b.n	800330c <_printf_i+0x130>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	6826      	ldr	r6, [r4, #0]
 8003398:	6961      	ldr	r1, [r4, #20]
 800339a:	1d18      	adds	r0, r3, #4
 800339c:	6028      	str	r0, [r5, #0]
 800339e:	0635      	lsls	r5, r6, #24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	d501      	bpl.n	80033a8 <_printf_i+0x1cc>
 80033a4:	6019      	str	r1, [r3, #0]
 80033a6:	e002      	b.n	80033ae <_printf_i+0x1d2>
 80033a8:	0670      	lsls	r0, r6, #25
 80033aa:	d5fb      	bpl.n	80033a4 <_printf_i+0x1c8>
 80033ac:	8019      	strh	r1, [r3, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	6123      	str	r3, [r4, #16]
 80033b2:	4615      	mov	r5, r2
 80033b4:	e7ba      	b.n	800332c <_printf_i+0x150>
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	1d1a      	adds	r2, r3, #4
 80033ba:	602a      	str	r2, [r5, #0]
 80033bc:	681d      	ldr	r5, [r3, #0]
 80033be:	6862      	ldr	r2, [r4, #4]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4628      	mov	r0, r5
 80033c4:	f7fc ff04 	bl	80001d0 <memchr>
 80033c8:	b108      	cbz	r0, 80033ce <_printf_i+0x1f2>
 80033ca:	1b40      	subs	r0, r0, r5
 80033cc:	6060      	str	r0, [r4, #4]
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	6123      	str	r3, [r4, #16]
 80033d2:	2300      	movs	r3, #0
 80033d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d8:	e7a8      	b.n	800332c <_printf_i+0x150>
 80033da:	6923      	ldr	r3, [r4, #16]
 80033dc:	462a      	mov	r2, r5
 80033de:	4649      	mov	r1, r9
 80033e0:	4640      	mov	r0, r8
 80033e2:	47d0      	blx	sl
 80033e4:	3001      	adds	r0, #1
 80033e6:	d0ab      	beq.n	8003340 <_printf_i+0x164>
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	079b      	lsls	r3, r3, #30
 80033ec:	d413      	bmi.n	8003416 <_printf_i+0x23a>
 80033ee:	68e0      	ldr	r0, [r4, #12]
 80033f0:	9b03      	ldr	r3, [sp, #12]
 80033f2:	4298      	cmp	r0, r3
 80033f4:	bfb8      	it	lt
 80033f6:	4618      	movlt	r0, r3
 80033f8:	e7a4      	b.n	8003344 <_printf_i+0x168>
 80033fa:	2301      	movs	r3, #1
 80033fc:	4632      	mov	r2, r6
 80033fe:	4649      	mov	r1, r9
 8003400:	4640      	mov	r0, r8
 8003402:	47d0      	blx	sl
 8003404:	3001      	adds	r0, #1
 8003406:	d09b      	beq.n	8003340 <_printf_i+0x164>
 8003408:	3501      	adds	r5, #1
 800340a:	68e3      	ldr	r3, [r4, #12]
 800340c:	9903      	ldr	r1, [sp, #12]
 800340e:	1a5b      	subs	r3, r3, r1
 8003410:	42ab      	cmp	r3, r5
 8003412:	dcf2      	bgt.n	80033fa <_printf_i+0x21e>
 8003414:	e7eb      	b.n	80033ee <_printf_i+0x212>
 8003416:	2500      	movs	r5, #0
 8003418:	f104 0619 	add.w	r6, r4, #25
 800341c:	e7f5      	b.n	800340a <_printf_i+0x22e>
 800341e:	bf00      	nop
 8003420:	080039a9 	.word	0x080039a9
 8003424:	080039ba 	.word	0x080039ba

08003428 <_putc_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	460d      	mov	r5, r1
 800342c:	4614      	mov	r4, r2
 800342e:	4606      	mov	r6, r0
 8003430:	b118      	cbz	r0, 800343a <_putc_r+0x12>
 8003432:	6983      	ldr	r3, [r0, #24]
 8003434:	b90b      	cbnz	r3, 800343a <_putc_r+0x12>
 8003436:	f7ff fb1b 	bl	8002a70 <__sinit>
 800343a:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <_putc_r+0x84>)
 800343c:	429c      	cmp	r4, r3
 800343e:	d124      	bne.n	800348a <_putc_r+0x62>
 8003440:	6874      	ldr	r4, [r6, #4]
 8003442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003444:	07d8      	lsls	r0, r3, #31
 8003446:	d405      	bmi.n	8003454 <_putc_r+0x2c>
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	0599      	lsls	r1, r3, #22
 800344c:	d402      	bmi.n	8003454 <_putc_r+0x2c>
 800344e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003450:	f7ff fbac 	bl	8002bac <__retarget_lock_acquire_recursive>
 8003454:	68a3      	ldr	r3, [r4, #8]
 8003456:	3b01      	subs	r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	60a3      	str	r3, [r4, #8]
 800345c:	da05      	bge.n	800346a <_putc_r+0x42>
 800345e:	69a2      	ldr	r2, [r4, #24]
 8003460:	4293      	cmp	r3, r2
 8003462:	db1c      	blt.n	800349e <_putc_r+0x76>
 8003464:	b2eb      	uxtb	r3, r5
 8003466:	2b0a      	cmp	r3, #10
 8003468:	d019      	beq.n	800349e <_putc_r+0x76>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	6022      	str	r2, [r4, #0]
 8003470:	701d      	strb	r5, [r3, #0]
 8003472:	b2ed      	uxtb	r5, r5
 8003474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003476:	07da      	lsls	r2, r3, #31
 8003478:	d405      	bmi.n	8003486 <_putc_r+0x5e>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	059b      	lsls	r3, r3, #22
 800347e:	d402      	bmi.n	8003486 <_putc_r+0x5e>
 8003480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003482:	f7ff fb94 	bl	8002bae <__retarget_lock_release_recursive>
 8003486:	4628      	mov	r0, r5
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <_putc_r+0x88>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d101      	bne.n	8003494 <_putc_r+0x6c>
 8003490:	68b4      	ldr	r4, [r6, #8]
 8003492:	e7d6      	b.n	8003442 <_putc_r+0x1a>
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_putc_r+0x8c>)
 8003496:	429c      	cmp	r4, r3
 8003498:	bf08      	it	eq
 800349a:	68f4      	ldreq	r4, [r6, #12]
 800349c:	e7d1      	b.n	8003442 <_putc_r+0x1a>
 800349e:	4629      	mov	r1, r5
 80034a0:	4622      	mov	r2, r4
 80034a2:	4630      	mov	r0, r6
 80034a4:	f000 f85c 	bl	8003560 <__swbuf_r>
 80034a8:	4605      	mov	r5, r0
 80034aa:	e7e3      	b.n	8003474 <_putc_r+0x4c>
 80034ac:	08003958 	.word	0x08003958
 80034b0:	08003978 	.word	0x08003978
 80034b4:	08003938 	.word	0x08003938

080034b8 <_sbrk_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4d06      	ldr	r5, [pc, #24]	; (80034d4 <_sbrk_r+0x1c>)
 80034bc:	2300      	movs	r3, #0
 80034be:	4604      	mov	r4, r0
 80034c0:	4608      	mov	r0, r1
 80034c2:	602b      	str	r3, [r5, #0]
 80034c4:	f7fe ffa2 	bl	800240c <_sbrk>
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d102      	bne.n	80034d2 <_sbrk_r+0x1a>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	b103      	cbz	r3, 80034d2 <_sbrk_r+0x1a>
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	200000c0 	.word	0x200000c0

080034d8 <__sread>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e0:	f000 f94e 	bl	8003780 <_read_r>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	bfab      	itete	ge
 80034e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ea:	89a3      	ldrhlt	r3, [r4, #12]
 80034ec:	181b      	addge	r3, r3, r0
 80034ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034f2:	bfac      	ite	ge
 80034f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80034f6:	81a3      	strhlt	r3, [r4, #12]
 80034f8:	bd10      	pop	{r4, pc}

080034fa <__swrite>:
 80034fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fe:	461f      	mov	r7, r3
 8003500:	898b      	ldrh	r3, [r1, #12]
 8003502:	05db      	lsls	r3, r3, #23
 8003504:	4605      	mov	r5, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4616      	mov	r6, r2
 800350a:	d505      	bpl.n	8003518 <__swrite+0x1e>
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	2302      	movs	r3, #2
 8003512:	2200      	movs	r2, #0
 8003514:	f000 f916 	bl	8003744 <_lseek_r>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800351e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	4632      	mov	r2, r6
 8003526:	463b      	mov	r3, r7
 8003528:	4628      	mov	r0, r5
 800352a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	f7fd ba83 	b.w	8000a38 <_write_r>

08003532 <__sseek>:
 8003532:	b510      	push	{r4, lr}
 8003534:	460c      	mov	r4, r1
 8003536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353a:	f000 f903 	bl	8003744 <_lseek_r>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	bf15      	itete	ne
 8003544:	6560      	strne	r0, [r4, #84]	; 0x54
 8003546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800354a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800354e:	81a3      	strheq	r3, [r4, #12]
 8003550:	bf18      	it	ne
 8003552:	81a3      	strhne	r3, [r4, #12]
 8003554:	bd10      	pop	{r4, pc}

08003556 <__sclose>:
 8003556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355a:	f000 b8c1 	b.w	80036e0 <_close_r>
	...

08003560 <__swbuf_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	460e      	mov	r6, r1
 8003564:	4614      	mov	r4, r2
 8003566:	4605      	mov	r5, r0
 8003568:	b118      	cbz	r0, 8003572 <__swbuf_r+0x12>
 800356a:	6983      	ldr	r3, [r0, #24]
 800356c:	b90b      	cbnz	r3, 8003572 <__swbuf_r+0x12>
 800356e:	f7ff fa7f 	bl	8002a70 <__sinit>
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <__swbuf_r+0x98>)
 8003574:	429c      	cmp	r4, r3
 8003576:	d12b      	bne.n	80035d0 <__swbuf_r+0x70>
 8003578:	686c      	ldr	r4, [r5, #4]
 800357a:	69a3      	ldr	r3, [r4, #24]
 800357c:	60a3      	str	r3, [r4, #8]
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	071a      	lsls	r2, r3, #28
 8003582:	d52f      	bpl.n	80035e4 <__swbuf_r+0x84>
 8003584:	6923      	ldr	r3, [r4, #16]
 8003586:	b36b      	cbz	r3, 80035e4 <__swbuf_r+0x84>
 8003588:	6923      	ldr	r3, [r4, #16]
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	1ac0      	subs	r0, r0, r3
 800358e:	6963      	ldr	r3, [r4, #20]
 8003590:	b2f6      	uxtb	r6, r6
 8003592:	4283      	cmp	r3, r0
 8003594:	4637      	mov	r7, r6
 8003596:	dc04      	bgt.n	80035a2 <__swbuf_r+0x42>
 8003598:	4621      	mov	r1, r4
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff f9d4 	bl	8002948 <_fflush_r>
 80035a0:	bb30      	cbnz	r0, 80035f0 <__swbuf_r+0x90>
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60a3      	str	r3, [r4, #8]
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	6022      	str	r2, [r4, #0]
 80035ae:	701e      	strb	r6, [r3, #0]
 80035b0:	6963      	ldr	r3, [r4, #20]
 80035b2:	3001      	adds	r0, #1
 80035b4:	4283      	cmp	r3, r0
 80035b6:	d004      	beq.n	80035c2 <__swbuf_r+0x62>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	07db      	lsls	r3, r3, #31
 80035bc:	d506      	bpl.n	80035cc <__swbuf_r+0x6c>
 80035be:	2e0a      	cmp	r6, #10
 80035c0:	d104      	bne.n	80035cc <__swbuf_r+0x6c>
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f7ff f9bf 	bl	8002948 <_fflush_r>
 80035ca:	b988      	cbnz	r0, 80035f0 <__swbuf_r+0x90>
 80035cc:	4638      	mov	r0, r7
 80035ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <__swbuf_r+0x9c>)
 80035d2:	429c      	cmp	r4, r3
 80035d4:	d101      	bne.n	80035da <__swbuf_r+0x7a>
 80035d6:	68ac      	ldr	r4, [r5, #8]
 80035d8:	e7cf      	b.n	800357a <__swbuf_r+0x1a>
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <__swbuf_r+0xa0>)
 80035dc:	429c      	cmp	r4, r3
 80035de:	bf08      	it	eq
 80035e0:	68ec      	ldreq	r4, [r5, #12]
 80035e2:	e7ca      	b.n	800357a <__swbuf_r+0x1a>
 80035e4:	4621      	mov	r1, r4
 80035e6:	4628      	mov	r0, r5
 80035e8:	f000 f80c 	bl	8003604 <__swsetup_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d0cb      	beq.n	8003588 <__swbuf_r+0x28>
 80035f0:	f04f 37ff 	mov.w	r7, #4294967295
 80035f4:	e7ea      	b.n	80035cc <__swbuf_r+0x6c>
 80035f6:	bf00      	nop
 80035f8:	08003958 	.word	0x08003958
 80035fc:	08003978 	.word	0x08003978
 8003600:	08003938 	.word	0x08003938

08003604 <__swsetup_r>:
 8003604:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <__swsetup_r+0xcc>)
 8003606:	b570      	push	{r4, r5, r6, lr}
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	4606      	mov	r6, r0
 800360c:	460c      	mov	r4, r1
 800360e:	b125      	cbz	r5, 800361a <__swsetup_r+0x16>
 8003610:	69ab      	ldr	r3, [r5, #24]
 8003612:	b913      	cbnz	r3, 800361a <__swsetup_r+0x16>
 8003614:	4628      	mov	r0, r5
 8003616:	f7ff fa2b 	bl	8002a70 <__sinit>
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <__swsetup_r+0xd0>)
 800361c:	429c      	cmp	r4, r3
 800361e:	d10f      	bne.n	8003640 <__swsetup_r+0x3c>
 8003620:	686c      	ldr	r4, [r5, #4]
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003628:	0719      	lsls	r1, r3, #28
 800362a:	d42c      	bmi.n	8003686 <__swsetup_r+0x82>
 800362c:	06dd      	lsls	r5, r3, #27
 800362e:	d411      	bmi.n	8003654 <__swsetup_r+0x50>
 8003630:	2309      	movs	r3, #9
 8003632:	6033      	str	r3, [r6, #0]
 8003634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	e03e      	b.n	80036be <__swsetup_r+0xba>
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <__swsetup_r+0xd4>)
 8003642:	429c      	cmp	r4, r3
 8003644:	d101      	bne.n	800364a <__swsetup_r+0x46>
 8003646:	68ac      	ldr	r4, [r5, #8]
 8003648:	e7eb      	b.n	8003622 <__swsetup_r+0x1e>
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <__swsetup_r+0xd8>)
 800364c:	429c      	cmp	r4, r3
 800364e:	bf08      	it	eq
 8003650:	68ec      	ldreq	r4, [r5, #12]
 8003652:	e7e6      	b.n	8003622 <__swsetup_r+0x1e>
 8003654:	0758      	lsls	r0, r3, #29
 8003656:	d512      	bpl.n	800367e <__swsetup_r+0x7a>
 8003658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800365a:	b141      	cbz	r1, 800366e <__swsetup_r+0x6a>
 800365c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003660:	4299      	cmp	r1, r3
 8003662:	d002      	beq.n	800366a <__swsetup_r+0x66>
 8003664:	4630      	mov	r0, r6
 8003666:	f7ff fb11 	bl	8002c8c <_free_r>
 800366a:	2300      	movs	r3, #0
 800366c:	6363      	str	r3, [r4, #52]	; 0x34
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	2300      	movs	r3, #0
 8003678:	6063      	str	r3, [r4, #4]
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	81a3      	strh	r3, [r4, #12]
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	b94b      	cbnz	r3, 800369e <__swsetup_r+0x9a>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d003      	beq.n	800369e <__swsetup_r+0x9a>
 8003696:	4621      	mov	r1, r4
 8003698:	4630      	mov	r0, r6
 800369a:	f7ff faaf 	bl	8002bfc <__smakebuf_r>
 800369e:	89a0      	ldrh	r0, [r4, #12]
 80036a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036a4:	f010 0301 	ands.w	r3, r0, #1
 80036a8:	d00a      	beq.n	80036c0 <__swsetup_r+0xbc>
 80036aa:	2300      	movs	r3, #0
 80036ac:	60a3      	str	r3, [r4, #8]
 80036ae:	6963      	ldr	r3, [r4, #20]
 80036b0:	425b      	negs	r3, r3
 80036b2:	61a3      	str	r3, [r4, #24]
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	b943      	cbnz	r3, 80036ca <__swsetup_r+0xc6>
 80036b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036bc:	d1ba      	bne.n	8003634 <__swsetup_r+0x30>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	0781      	lsls	r1, r0, #30
 80036c2:	bf58      	it	pl
 80036c4:	6963      	ldrpl	r3, [r4, #20]
 80036c6:	60a3      	str	r3, [r4, #8]
 80036c8:	e7f4      	b.n	80036b4 <__swsetup_r+0xb0>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e7f7      	b.n	80036be <__swsetup_r+0xba>
 80036ce:	bf00      	nop
 80036d0:	2000002c 	.word	0x2000002c
 80036d4:	08003958 	.word	0x08003958
 80036d8:	08003978 	.word	0x08003978
 80036dc:	08003938 	.word	0x08003938

080036e0 <_close_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	; (80036fc <_close_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fe fe59 	bl	80023a2 <_close>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_close_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_close_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	200000c0 	.word	0x200000c0

08003700 <_fstat_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d07      	ldr	r5, [pc, #28]	; (8003720 <_fstat_r+0x20>)
 8003704:	2300      	movs	r3, #0
 8003706:	4604      	mov	r4, r0
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	602b      	str	r3, [r5, #0]
 800370e:	f7fe fe54 	bl	80023ba <_fstat>
 8003712:	1c43      	adds	r3, r0, #1
 8003714:	d102      	bne.n	800371c <_fstat_r+0x1c>
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	b103      	cbz	r3, 800371c <_fstat_r+0x1c>
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	bd38      	pop	{r3, r4, r5, pc}
 800371e:	bf00      	nop
 8003720:	200000c0 	.word	0x200000c0

08003724 <_isatty_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4d06      	ldr	r5, [pc, #24]	; (8003740 <_isatty_r+0x1c>)
 8003728:	2300      	movs	r3, #0
 800372a:	4604      	mov	r4, r0
 800372c:	4608      	mov	r0, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f7fe fe53 	bl	80023da <_isatty>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_isatty_r+0x1a>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_isatty_r+0x1a>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	200000c0 	.word	0x200000c0

08003744 <_lseek_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d07      	ldr	r5, [pc, #28]	; (8003764 <_lseek_r+0x20>)
 8003748:	4604      	mov	r4, r0
 800374a:	4608      	mov	r0, r1
 800374c:	4611      	mov	r1, r2
 800374e:	2200      	movs	r2, #0
 8003750:	602a      	str	r2, [r5, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f7fe fe4c 	bl	80023f0 <_lseek>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_lseek_r+0x1e>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_lseek_r+0x1e>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	200000c0 	.word	0x200000c0

08003768 <__malloc_lock>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__malloc_lock+0x8>)
 800376a:	f7ff ba1f 	b.w	8002bac <__retarget_lock_acquire_recursive>
 800376e:	bf00      	nop
 8003770:	200000b4 	.word	0x200000b4

08003774 <__malloc_unlock>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__malloc_unlock+0x8>)
 8003776:	f7ff ba1a 	b.w	8002bae <__retarget_lock_release_recursive>
 800377a:	bf00      	nop
 800377c:	200000b4 	.word	0x200000b4

08003780 <_read_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_read_r+0x20>)
 8003784:	4604      	mov	r4, r0
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fe fdea 	bl	8002368 <_read>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_read_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_read_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	200000c0 	.word	0x200000c0

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
