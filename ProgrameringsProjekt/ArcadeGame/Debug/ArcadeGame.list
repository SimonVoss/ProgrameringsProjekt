
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023cc  080023cc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080023cc  080023cc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023cc  080023cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023cc  080023cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080023d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000090  08002464  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002464  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063ea  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f0  00000000  00000000  000264aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  000276a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  00027e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010437  00000000  00000000  000284f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092e1  00000000  00000000  0003892f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005abfa  00000000  00000000  00041c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002730  00000000  00000000  0009c85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002350 	.word	0x08002350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08002350 	.word	0x08002350

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	4608      	mov	r0, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4603      	mov	r3, r0
 80009b4:	70fb      	strb	r3, [r7, #3]
 80009b6:	460b      	mov	r3, r1
 80009b8:	70bb      	strb	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 80009c6:	78bb      	ldrb	r3, [r7, #2]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d821      	bhi.n	8000a10 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80009d2:	78ba      	ldrb	r2, [r7, #2]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	461a      	mov	r2, r3
 80009de:	231f      	movs	r3, #31
 80009e0:	4093      	lsls	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4013      	ands	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80009ee:	78f9      	ldrb	r1, [r7, #3]
 80009f0:	78ba      	ldrb	r2, [r7, #2]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a0e:	e074      	b.n	8000afa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000a10:	78bb      	ldrb	r3, [r7, #2]
 8000a12:	2b09      	cmp	r3, #9
 8000a14:	d823      	bhi.n	8000a5e <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000a1c:	78bb      	ldrb	r3, [r7, #2]
 8000a1e:	1f5a      	subs	r2, r3, #5
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	231f      	movs	r3, #31
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000a3a:	78f9      	ldrb	r1, [r7, #3]
 8000a3c:	78bb      	ldrb	r3, [r7, #2]
 8000a3e:	1f5a      	subs	r2, r3, #5
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5c:	e04d      	b.n	8000afa <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000a5e:	78bb      	ldrb	r3, [r7, #2]
 8000a60:	2b0e      	cmp	r3, #14
 8000a62:	d825      	bhi.n	8000ab0 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a68:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000a6a:	78bb      	ldrb	r3, [r7, #2]
 8000a6c:	f1a3 020a 	sub.w	r2, r3, #10
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000a8a:	78f9      	ldrb	r1, [r7, #3]
 8000a8c:	78bb      	ldrb	r3, [r7, #2]
 8000a8e:	f1a3 020a 	sub.w	r2, r3, #10
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
 8000aae:	e024      	b.n	8000afa <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000ab6:	78bb      	ldrb	r3, [r7, #2]
 8000ab8:	f1a3 020f 	sub.w	r2, r3, #15
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	231f      	movs	r3, #31
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000ad6:	78f9      	ldrb	r1, [r7, #3]
 8000ad8:	78bb      	ldrb	r3, [r7, #2]
 8000ada:	f1a3 020f 	sub.w	r2, r3, #15
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b09      	cmp	r3, #9
 8000afe:	d923      	bls.n	8000b48 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	f1a3 020a 	sub.w	r2, r3, #10
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	2207      	movs	r2, #7
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6999      	ldr	r1, [r3, #24]
 8000b2c:	7878      	ldrb	r0, [r7, #1]
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	f1a3 020a 	sub.w	r2, r3, #10
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	fa00 f303 	lsl.w	r3, r0, r3
 8000b3e:	ea41 0203 	orr.w	r2, r1, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000b46:	e01f      	b.n	8000b88 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	1e5a      	subs	r2, r3, #1
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	2238      	movs	r2, #56	; 0x38
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6959      	ldr	r1, [r3, #20]
 8000b72:	7878      	ldrb	r0, [r7, #1]
 8000b74:	78fa      	ldrb	r2, [r7, #3]
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	fa00 f303 	lsl.w	r3, r0, r3
 8000b80:	ea41 0203 	orr.w	r2, r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	615a      	str	r2, [r3, #20]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f043 0204 	orr.w	r2, r3, #4
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	b29b      	uxth	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e001      	b.n	8000bf2 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000c18:	787a      	ldrb	r2, [r7, #1]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	210f      	movs	r1, #15
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	8879      	ldrh	r1, [r7, #2]
 8000c4a:	08c9      	lsrs	r1, r1, #3
 8000c4c:	b289      	uxth	r1, r1
 8000c4e:	4608      	mov	r0, r1
 8000c50:	ea02 0103 	and.w	r1, r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f100 0208 	add.w	r2, r0, #8
 8000c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3208      	adds	r2, #8
 8000c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b08b      	sub	sp, #44	; 0x2c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000cbc:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d011      	beq.n	8000cf0 <RCC_GetClocksFreq+0x5c>
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d837      	bhi.n	8000d42 <RCC_GetClocksFreq+0xae>
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <RCC_GetClocksFreq+0x4c>
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d004      	beq.n	8000ce8 <RCC_GetClocksFreq+0x54>
 8000cde:	e030      	b.n	8000d42 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a83      	ldr	r2, [pc, #524]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000ce4:	601a      	str	r2, [r3, #0]
      break;
 8000ce6:	e030      	b.n	8000d4a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a81      	ldr	r2, [pc, #516]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000cec:	601a      	str	r2, [r3, #0]
      break;
 8000cee:	e02c      	b.n	8000d4a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000cf0:	4b7e      	ldr	r3, [pc, #504]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cf8:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000cfa:	4b7c      	ldr	r3, [pc, #496]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	3302      	adds	r3, #2
 8000d0a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4a77      	ldr	r2, [pc, #476]	; (8000ef4 <RCC_GetClocksFreq+0x260>)
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1c:	e00d      	b.n	8000d3a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000d1e:	4b73      	ldr	r3, [pc, #460]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000d2a:	4a71      	ldr	r2, [pc, #452]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3e:	601a      	str	r2, [r3, #0]
      break;
 8000d40:	e003      	b.n	8000d4a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a6a      	ldr	r2, [pc, #424]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000d46:	601a      	str	r2, [r3, #0]
      break;
 8000d48:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000d4a:	4b68      	ldr	r3, [pc, #416]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d52:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000d5a:	4a67      	ldr	r2, [pc, #412]	; (8000ef8 <RCC_GetClocksFreq+0x264>)
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	40da      	lsrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d7a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d82:	4a5d      	ldr	r2, [pc, #372]	; (8000ef8 <RCC_GetClocksFreq+0x264>)
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	40da      	lsrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000da2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	0adb      	lsrs	r3, r3, #11
 8000da8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000daa:	4a53      	ldr	r2, [pc, #332]	; (8000ef8 <RCC_GetClocksFreq+0x264>)
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	40da      	lsrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000dca:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000dd2:	4a4a      	ldr	r2, [pc, #296]	; (8000efc <RCC_GetClocksFreq+0x268>)
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	e003      	b.n	8000dfe <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000e06:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000e0e:	4a3b      	ldr	r2, [pc, #236]	; (8000efc <RCC_GetClocksFreq+0x268>)
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	e003      	b.n	8000e3a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	d003      	beq.n	8000e4e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000e4a:	619a      	str	r2, [r3, #24]
 8000e4c:	e003      	b.n	8000e56 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d003      	beq.n	8000e6a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <RCC_GetClocksFreq+0x25c>)
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	e003      	b.n	8000e72 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7e:	d10d      	bne.n	8000e9c <RCC_GetClocksFreq+0x208>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d108      	bne.n	8000e9c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d104      	bne.n	8000e9c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	005a      	lsls	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	621a      	str	r2, [r3, #32]
 8000e9a:	e003      	b.n	8000ea4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb0:	d10d      	bne.n	8000ece <RCC_GetClocksFreq+0x23a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d108      	bne.n	8000ece <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d104      	bne.n	8000ece <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	005a      	lsls	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
 8000ecc:	e003      	b.n	8000ed6 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <RCC_GetClocksFreq+0x258>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10e      	bne.n	8000f00 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8000eea:	e028      	b.n	8000f3e <RCC_GetClocksFreq+0x2aa>
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	007a1200 	.word	0x007a1200
 8000ef4:	003d0900 	.word	0x003d0900
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000f00:	4b6c      	ldr	r3, [pc, #432]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d104      	bne.n	8000f16 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
 8000f14:	e013      	b.n	8000f3e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000f16:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d104      	bne.n	8000f2c <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
 8000f2a:	e008      	b.n	8000f3e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d102      	bne.n	8000f3e <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a5f      	ldr	r2, [pc, #380]	; (80010b8 <RCC_GetClocksFreq+0x424>)
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d104      	bne.n	8000f54 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f52:	e021      	b.n	8000f98 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d104      	bne.n	8000f6c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f6a:	e015      	b.n	8000f98 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000f6c:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f78:	d104      	bne.n	8000f84 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f82:	e009      	b.n	8000f98 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000f84:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000f90:	d102      	bne.n	8000f98 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <RCC_GetClocksFreq+0x424>)
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d104      	bne.n	8000fae <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
 8000fac:	e021      	b.n	8000ff2 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fba:	d104      	bne.n	8000fc6 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	e015      	b.n	8000ff2 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fd2:	d104      	bne.n	8000fde <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
 8000fdc:	e009      	b.n	8000ff2 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000fe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000fea:	d102      	bne.n	8000ff2 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <RCC_GetClocksFreq+0x424>)
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
 8001006:	e021      	b.n	800104c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001014:	d104      	bne.n	8001020 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
 800101e:	e015      	b.n	800104c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800102c:	d104      	bne.n	8001038 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	e009      	b.n	800104c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001044:	d102      	bne.n	800104c <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <RCC_GetClocksFreq+0x424>)
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001060:	e021      	b.n	80010a6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800106a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800106e:	d104      	bne.n	800107a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001078:	e015      	b.n	80010a6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001086:	d104      	bne.n	8001092 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001090:	e009      	b.n	80010a6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <RCC_GetClocksFreq+0x420>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800109a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800109e:	d102      	bne.n	80010a6 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <RCC_GetClocksFreq+0x424>)
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	007a1200 	.word	0x007a1200

080010bc <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	b29b      	uxth	r3, r3
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d103      	bne.n	800112a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	e005      	b.n	8001136 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d102      	bne.n	8001136 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	3308      	adds	r3, #8
 8001134:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001148:	e006      	b.n	8001158 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43da      	mvns	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	3724      	adds	r7, #36	; 0x24
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e001      	b.n	8001188 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	2201      	movs	r2, #1
 80011aa:	fa02 f103 	lsl.w	r1, r2, r3
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <NVIC_EnableIRQ+0x30>)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	095b      	lsrs	r3, r3, #5
 80011b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <uart_put_char+0x30>)
 80011de:	f7ff ff6d 	bl	80010bc <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80011e2:	bf00      	nop
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <uart_put_char+0x30>)
 80011e8:	f7ff ffbc 	bl	8001164 <USART_GetFlagStatus>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f8      	beq.n	80011e4 <uart_put_char+0x18>
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40004400 	.word	0x40004400

08001200 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e012      	b.n	800123a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b0a      	cmp	r3, #10
 800121e:	d102      	bne.n	8001226 <_write_r+0x26>
            uart_put_char('\r');
 8001220:	200d      	movs	r0, #13
 8001222:	f7ff ffd3 	bl	80011cc <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffcc 	bl	80011cc <uart_put_char>
    for (n = 0; n < len; n++) {
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbe8      	blt.n	8001214 <_write_r+0x14>
    }

    return len;
 8001242:	683b      	ldr	r3, [r7, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	; 0x50
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001254:	4b86      	ldr	r3, [pc, #536]	; (8001470 <uart_init+0x224>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fc3b 	bl	8001ad8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001262:	4b83      	ldr	r3, [pc, #524]	; (8001470 <uart_init+0x224>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fc34 	bl	8001ad8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001270:	4b80      	ldr	r3, [pc, #512]	; (8001474 <uart_init+0x228>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	4a7f      	ldr	r2, [pc, #508]	; (8001474 <uart_init+0x228>)
 8001276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800127c:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <uart_init+0x228>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a7c      	ldr	r2, [pc, #496]	; (8001474 <uart_init+0x228>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001286:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001292:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001296:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80012a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80012b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80012b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80012c6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80012c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012d6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80012d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012e2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80012e6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80012e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012f4:	f023 030c 	bic.w	r3, r3, #12
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80012fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001304:	8892      	ldrh	r2, [r2, #4]
 8001306:	b292      	uxth	r2, r2
 8001308:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 800130a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001318:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800131a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001324:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001328:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 800132a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001338:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800133a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001344:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001348:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <uart_init+0x22c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <uart_init+0x22c>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <uart_init+0x22c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <uart_init+0x22c>)
 800135c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001360:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <uart_init+0x22c>)
 8001364:	4a44      	ldr	r2, [pc, #272]	; (8001478 <uart_init+0x22c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <uart_init+0x22c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a42      	ldr	r2, [pc, #264]	; (8001478 <uart_init+0x22c>)
 8001370:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001374:	f023 030c 	bic.w	r3, r3, #12
 8001378:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <uart_init+0x22c>)
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <uart_init+0x22c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <uart_init+0x22c>)
 8001384:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <uart_init+0x22c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <uart_init+0x22c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <uart_init+0x22c>)
 8001390:	f043 030c 	orr.w	r3, r3, #12
 8001394:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <uart_init+0x22c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4a37      	ldr	r2, [pc, #220]	; (8001478 <uart_init+0x22c>)
 800139c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <uart_init+0x22c>)
 80013a4:	4a34      	ldr	r2, [pc, #208]	; (8001478 <uart_init+0x22c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ae:	2300      	movs	r3, #0
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
 80013b2:	2300      	movs	r3, #0
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc6a 	bl	8000c94 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80013c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <uart_init+0x22c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d010      	beq.n	80013f2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80013d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d2:	005a      	lsls	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80013dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	fb01 f202 	mul.w	r2, r1, r2
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80013f0:	e00d      	b.n	800140e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80013f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80013fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	fbb3 f2f2 	udiv	r2, r3, r2
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	fb01 f202 	mul.w	r2, r1, r2
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001414:	429a      	cmp	r2, r3
 8001416:	d302      	bcc.n	800141e <uart_init+0x1d2>
        divider++;
 8001418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141a:	3301      	adds	r3, #1
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <uart_init+0x22c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800142a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001436:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800143a:	4013      	ands	r3, r2
 800143c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800143e:	4313      	orrs	r3, r2
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <uart_init+0x22c>)
 8001444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001446:	b292      	uxth	r2, r2
 8001448:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <uart_init+0x22c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <uart_init+0x22c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001456:	2201      	movs	r2, #1
 8001458:	4908      	ldr	r1, [pc, #32]	; (800147c <uart_init+0x230>)
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <uart_init+0x22c>)
 800145c:	f7ff fe40 	bl	80010e0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001460:	2026      	movs	r0, #38	; 0x26
 8001462:	f7ff fe99 	bl	8001198 <NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3750      	adds	r7, #80	; 0x50
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000002c 	.word	0x2000002c
 8001474:	40021000 	.word	0x40021000
 8001478:	40004400 	.word	0x40004400
 800147c:	00050105 	.word	0x00050105

08001480 <ADCread>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "ansi.h"


int ADCread(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001486:	2300      	movs	r3, #0
 8001488:	2201      	movs	r2, #1
 800148a:	2101      	movs	r1, #1
 800148c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001490:	f7ff fa88 	bl	80009a4 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8001494:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001498:	f7ff fb7c 	bl	8000b94 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 800149c:	bf00      	nop
 800149e:	2104      	movs	r1, #4
 80014a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014a4:	f7ff fb93 	bl	8000bce <ADC_GetFlagStatus>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f7      	beq.n	800149e <ADCread+0x1e>

	uint16_t JoystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 80014ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014b2:	f7ff fb7f 	bl	8000bb4 <ADC_GetConversionValue>
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]

	if(JoystickWay > 2048){
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014c0:	d901      	bls.n	80014c6 <ADCread+0x46>
		return 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e005      	b.n	80014d2 <ADCread+0x52>
	}
	if(JoystickWay < 2048){
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014cc:	d201      	bcs.n	80014d2 <ADCread+0x52>
		return 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e7ff      	b.n	80014d2 <ADCread+0x52>
	}
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	0000      	movs	r0, r0
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <buzz>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "buzz.h"


void buzz(int16_t lyd){
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]

		if(lyd == 0){
 80014ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d13f      	bne.n	8001572 <buzz+0x92>
			int freq = 300;
 80014f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014f6:	617b      	str	r3, [r7, #20]
			int PRESCALER_VALUE = 9;
 80014f8:	2309      	movs	r3, #9
 80014fa:	613b      	str	r3, [r7, #16]
			uint32_t reload = 64e6 / freq / (PRESCALER_VALUE + 1) - 1;
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7fe ffb5 	bl	800046c <__aeabi_i2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	a11f      	add	r1, pc, #124	; (adr r1, 8001584 <buzz+0xa4>)
 8001508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800150c:	f7ff f942 	bl	8000794 <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ffa5 	bl	800046c <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7ff f933 	bl	8000794 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <buzz+0xa0>)
 800153c:	f7fe fe48 	bl	80001d0 <__aeabi_dsub>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa0c 	bl	8000964 <__aeabi_d2uiz>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
			TIM2->ARR = reload; // Set auto reload value
 8001550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CCR3 = reload/2; // Set compare register
 8001558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM2->EGR |= 0x01;
 8001562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6153      	str	r3, [r2, #20]
		}

	}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	3ff00000 	.word	0x3ff00000
 8001584:	00000000 	.word	0x00000000
 8001588:	418e8480 	.word	0x418e8480

0800158c <ADCConfig>:
#include "buzz.h"


//Initialicering af Programmer Start

void ADCConfig(void) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8001592:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <ADCConfig+0x158>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a53      	ldr	r2, [pc, #332]	; (80016e4 <ADCConfig+0x158>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6153      	str	r3, [r2, #20]
	//PA0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 800159e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a8:	f023 0303 	bic.w	r3, r3, #3
 80015ac:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 80015ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 80015ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015c4:	f023 0303 	bic.w	r3, r3, #3
 80015c8:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 80015ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//PA1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80015da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015e4:	f023 030c 	bic.w	r3, r3, #12
 80015e8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 80015ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 80015f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001600:	f023 030c 	bic.w	r3, r3, #12
 8001604:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 8001606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <ADCConfig+0x158>)
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <ADCConfig+0x158>)
 800161c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001620:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <ADCConfig+0x158>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <ADCConfig+0x158>)
 8001628:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 800162c:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <ADCConfig+0x158>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <ADCConfig+0x158>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 800163a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8001642:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <ADCConfig+0x15c>)
 800164e:	4013      	ands	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8001652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800165c:	f023 030f 	bic.w	r3, r3, #15
 8001660:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8001662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	e002      	b.n	800167e <ADCConfig+0xf2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001684:	dbf8      	blt.n	8001678 <ADCConfig+0xec>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 8001686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001694:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 8001696:	bf00      	nop
 8001698:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	dafa      	bge.n	8001698 <ADCConfig+0x10c>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	e002      	b.n	80016ae <ADCConfig+0x122>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b63      	cmp	r3, #99	; 0x63
 80016b2:	ddf9      	ble.n	80016a8 <ADCConfig+0x11c>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 80016b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 80016c4:	bf00      	nop
 80016c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f8      	beq.n	80016c6 <ADCConfig+0x13a>

}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	fdffc007 	.word	0xfdffc007

080016ec <BuzzConfig>:

void BuzzConfig(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	int PRESCALER_VALUE = 9;
 80016f2:	2309      	movs	r3, #9
 80016f4:	607b      	str	r3, [r7, #4]
	RCC->APB1ENR |= 0x00000001; // Enable clock line to timer 2;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <BuzzConfig+0xf8>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <BuzzConfig+0xf8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0000; // Disable timer
 8001702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001706:	2200      	movs	r2, #0
 8001708:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 1000; // Set auto reload value
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = PRESCALER_VALUE; // Set pre-scaler value
 8001714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	b292      	uxth	r2, r2
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->CR1 |= 0x0001; // Enable timer
 800171e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	8013      	strh	r3, [r2, #0]



	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8001732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001740:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8001752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001760:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	f023 0303 	bic.w	r3, r3, #3
 8001770:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001780:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178c:	f023 0308 	bic.w	r3, r3, #8
 8001790:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = 500; // Set duty cycle to 50 %
 80017a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c



	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable clock line for GPIO bank B
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <BuzzConfig+0xf8>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <BuzzConfig+0xf8>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6153      	str	r3, [r2, #20]
	GPIOB->MODER &= ~(0x00000003 << (10 * 2)); // Clear mode register
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <BuzzConfig+0xfc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <BuzzConfig+0xfc>)
 80017be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000002 << (10 * 2)); // Set mode register
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <BuzzConfig+0xfc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <BuzzConfig+0xfc>)
 80017ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ce:	6013      	str	r3, [r2, #0]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	210a      	movs	r1, #10
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <BuzzConfig+0xfc>)
 80017d6:	f7ff fa13 	bl	8000c00 <GPIO_PinAFConfig>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000400 	.word	0x48000400

080017ec <main>:

//Initialicering af Programmer Slut


int main(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	//Initialicering af forbindelse
	uart_init(9600);
 80017f2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80017f6:	f7ff fd29 	bl	800124c <uart_init>


	//Initialicering af Programmer i main Start
	ADCConfig();
 80017fa:	f7ff fec7 	bl	800158c <ADCConfig>
	BuzzConfig();
 80017fe:	f7ff ff75 	bl	80016ec <BuzzConfig>

	//Initialicering af Programmer i main Slut

	//Hentning af info Start

	int8_t JoystickWay = ADCread();
 8001802:	f7ff fe3d 	bl	8001480 <ADCread>
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	int16_t lyd;

	//Hentning af info Slut

	buzz(0);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fe68 	bl	80014e0 <buzz>
//	Testområde
	while(1){
 8001810:	e7fe      	b.n	8001810 <main+0x24>

08001812 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e00a      	b.n	800183a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001824:	f3af 8000 	nop.w
 8001828:	4601      	mov	r1, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf0      	blt.n	8001824 <_read+0x12>
	}

return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:
	}
	return len;
}

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001874:	605a      	str	r2, [r3, #4]
	return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x50>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x16>
		heap_end = &end;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <_sbrk+0x50>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <_sbrk+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <_sbrk+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <_sbrk+0x50>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	466a      	mov	r2, sp
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d907      	bls.n	80018da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ca:	f000 f8d3 	bl	8001a74 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	220c      	movs	r2, #12
 80018d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	e006      	b.n	80018e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <_sbrk+0x50>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <_sbrk+0x50>)
 80018e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200000ac 	.word	0x200000ac
 80018f4:	200000c0 	.word	0x200000c0

080018f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <SystemInit+0x84>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <SystemInit+0x84>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <SystemInit+0x88>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <SystemInit+0x88>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <SystemInit+0x88>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4918      	ldr	r1, [pc, #96]	; (8001980 <SystemInit+0x88>)
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <SystemInit+0x8c>)
 8001920:	4013      	ands	r3, r2
 8001922:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <SystemInit+0x88>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <SystemInit+0x88>)
 800192a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <SystemInit+0x88>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <SystemInit+0x88>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <SystemInit+0x88>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <SystemInit+0x88>)
 8001946:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800194a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <SystemInit+0x88>)
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <SystemInit+0x88>)
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <SystemInit+0x88>)
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	4908      	ldr	r1, [pc, #32]	; (8001980 <SystemInit+0x88>)
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <SystemInit+0x90>)
 8001960:	4013      	ands	r3, r2
 8001962:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x88>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800196a:	f000 f80f 	bl	800198c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <SystemInit+0x84>)
 8001970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001974:	609a      	str	r2, [r3, #8]
#endif  
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	40021000 	.word	0x40021000
 8001984:	f87fc00c 	.word	0xf87fc00c
 8001988:	ff00fccc 	.word	0xff00fccc

0800198c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <SetSysClock+0x8c>)
 8001992:	2212      	movs	r2, #18
 8001994:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <SetSysClock+0x90>)
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <SetSysClock+0x90>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <SetSysClock+0x90>)
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <SetSysClock+0x90>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <SetSysClock+0x90>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <SetSysClock+0x90>)
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <SetSysClock+0x90>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <SetSysClock+0x90>)
 80019b8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80019bc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <SetSysClock+0x90>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <SetSysClock+0x90>)
 80019c4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80019c8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <SetSysClock+0x90>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <SetSysClock+0x90>)
 80019d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80019d6:	bf00      	nop
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <SetSysClock+0x90>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f9      	beq.n	80019d8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <SetSysClock+0x90>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <SetSysClock+0x90>)
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <SetSysClock+0x90>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <SetSysClock+0x90>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80019fc:	bf00      	nop
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <SetSysClock+0x90>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d1f9      	bne.n	80019fe <SetSysClock+0x72>
  {
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000

08001a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopForever+0xe>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopForever+0x16>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a4a:	f7ff ff55 	bl	80018f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a4e:	f000 f817 	bl	8001a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7ff fecb 	bl	80017ec <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   r0, =_estack
 8001a58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a64:	080023d4 	.word	0x080023d4
  ldr r2, =_sbss
 8001a68:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a6c:	200000c0 	.word	0x200000c0

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <__errno>:
 8001a74:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <__errno+0x8>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000002c 	.word	0x2000002c

08001a80 <__libc_init_array>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	4d0d      	ldr	r5, [pc, #52]	; (8001ab8 <__libc_init_array+0x38>)
 8001a84:	4c0d      	ldr	r4, [pc, #52]	; (8001abc <__libc_init_array+0x3c>)
 8001a86:	1b64      	subs	r4, r4, r5
 8001a88:	10a4      	asrs	r4, r4, #2
 8001a8a:	2600      	movs	r6, #0
 8001a8c:	42a6      	cmp	r6, r4
 8001a8e:	d109      	bne.n	8001aa4 <__libc_init_array+0x24>
 8001a90:	4d0b      	ldr	r5, [pc, #44]	; (8001ac0 <__libc_init_array+0x40>)
 8001a92:	4c0c      	ldr	r4, [pc, #48]	; (8001ac4 <__libc_init_array+0x44>)
 8001a94:	f000 fc5c 	bl	8002350 <_init>
 8001a98:	1b64      	subs	r4, r4, r5
 8001a9a:	10a4      	asrs	r4, r4, #2
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	42a6      	cmp	r6, r4
 8001aa0:	d105      	bne.n	8001aae <__libc_init_array+0x2e>
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
 8001aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa8:	4798      	blx	r3
 8001aaa:	3601      	adds	r6, #1
 8001aac:	e7ee      	b.n	8001a8c <__libc_init_array+0xc>
 8001aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab2:	4798      	blx	r3
 8001ab4:	3601      	adds	r6, #1
 8001ab6:	e7f2      	b.n	8001a9e <__libc_init_array+0x1e>
 8001ab8:	080023cc 	.word	0x080023cc
 8001abc:	080023cc 	.word	0x080023cc
 8001ac0:	080023cc 	.word	0x080023cc
 8001ac4:	080023d0 	.word	0x080023d0

08001ac8 <memset>:
 8001ac8:	4402      	add	r2, r0
 8001aca:	4603      	mov	r3, r0
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <memset+0xa>
 8001ad0:	4770      	bx	lr
 8001ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ad6:	e7f9      	b.n	8001acc <memset+0x4>

08001ad8 <setbuf>:
 8001ad8:	2900      	cmp	r1, #0
 8001ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ade:	bf0c      	ite	eq
 8001ae0:	2202      	moveq	r2, #2
 8001ae2:	2200      	movne	r2, #0
 8001ae4:	f000 b800 	b.w	8001ae8 <setvbuf>

08001ae8 <setvbuf>:
 8001ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001aec:	461d      	mov	r5, r3
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <setvbuf+0x17c>)
 8001af0:	681f      	ldr	r7, [r3, #0]
 8001af2:	4604      	mov	r4, r0
 8001af4:	460e      	mov	r6, r1
 8001af6:	4690      	mov	r8, r2
 8001af8:	b127      	cbz	r7, 8001b04 <setvbuf+0x1c>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	b913      	cbnz	r3, 8001b04 <setvbuf+0x1c>
 8001afe:	4638      	mov	r0, r7
 8001b00:	f000 f9d2 	bl	8001ea8 <__sinit>
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <setvbuf+0x180>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d167      	bne.n	8001bda <setvbuf+0xf2>
 8001b0a:	687c      	ldr	r4, [r7, #4]
 8001b0c:	f1b8 0f02 	cmp.w	r8, #2
 8001b10:	d006      	beq.n	8001b20 <setvbuf+0x38>
 8001b12:	f1b8 0f01 	cmp.w	r8, #1
 8001b16:	f200 809f 	bhi.w	8001c58 <setvbuf+0x170>
 8001b1a:	2d00      	cmp	r5, #0
 8001b1c:	f2c0 809c 	blt.w	8001c58 <setvbuf+0x170>
 8001b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b22:	07db      	lsls	r3, r3, #31
 8001b24:	d405      	bmi.n	8001b32 <setvbuf+0x4a>
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	0598      	lsls	r0, r3, #22
 8001b2a:	d402      	bmi.n	8001b32 <setvbuf+0x4a>
 8001b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b2e:	f000 fa59 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001b32:	4621      	mov	r1, r4
 8001b34:	4638      	mov	r0, r7
 8001b36:	f000 f923 	bl	8001d80 <_fflush_r>
 8001b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b3c:	b141      	cbz	r1, 8001b50 <setvbuf+0x68>
 8001b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b42:	4299      	cmp	r1, r3
 8001b44:	d002      	beq.n	8001b4c <setvbuf+0x64>
 8001b46:	4638      	mov	r0, r7
 8001b48:	f000 fa7c 	bl	8002044 <_free_r>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8001b50:	2300      	movs	r3, #0
 8001b52:	61a3      	str	r3, [r4, #24]
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	0619      	lsls	r1, r3, #24
 8001b5a:	d503      	bpl.n	8001b64 <setvbuf+0x7c>
 8001b5c:	6921      	ldr	r1, [r4, #16]
 8001b5e:	4638      	mov	r0, r7
 8001b60:	f000 fa70 	bl	8002044 <_free_r>
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f1b8 0f02 	cmp.w	r8, #2
 8001b72:	81a3      	strh	r3, [r4, #12]
 8001b74:	d06c      	beq.n	8001c50 <setvbuf+0x168>
 8001b76:	ab01      	add	r3, sp, #4
 8001b78:	466a      	mov	r2, sp
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	f000 fa33 	bl	8001fe8 <__swhatbuf_r>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	4318      	orrs	r0, r3
 8001b86:	81a0      	strh	r0, [r4, #12]
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	d130      	bne.n	8001bee <setvbuf+0x106>
 8001b8c:	9d00      	ldr	r5, [sp, #0]
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f000 fa50 	bl	8002034 <malloc>
 8001b94:	4606      	mov	r6, r0
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d155      	bne.n	8001c46 <setvbuf+0x15e>
 8001b9a:	f8dd 9000 	ldr.w	r9, [sp]
 8001b9e:	45a9      	cmp	r9, r5
 8001ba0:	d14a      	bne.n	8001c38 <setvbuf+0x150>
 8001ba2:	f04f 35ff 	mov.w	r5, #4294967295
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60a2      	str	r2, [r4, #8]
 8001baa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001bae:	6022      	str	r2, [r4, #0]
 8001bb0:	6122      	str	r2, [r4, #16]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb8:	6162      	str	r2, [r4, #20]
 8001bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	07d2      	lsls	r2, r2, #31
 8001bc2:	81a3      	strh	r3, [r4, #12]
 8001bc4:	d405      	bmi.n	8001bd2 <setvbuf+0xea>
 8001bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001bca:	d102      	bne.n	8001bd2 <setvbuf+0xea>
 8001bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bce:	f000 fa0a 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	b003      	add	sp, #12
 8001bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <setvbuf+0x184>)
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	d101      	bne.n	8001be4 <setvbuf+0xfc>
 8001be0:	68bc      	ldr	r4, [r7, #8]
 8001be2:	e793      	b.n	8001b0c <setvbuf+0x24>
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <setvbuf+0x188>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	bf08      	it	eq
 8001bea:	68fc      	ldreq	r4, [r7, #12]
 8001bec:	e78e      	b.n	8001b0c <setvbuf+0x24>
 8001bee:	2e00      	cmp	r6, #0
 8001bf0:	d0cd      	beq.n	8001b8e <setvbuf+0xa6>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	b913      	cbnz	r3, 8001bfc <setvbuf+0x114>
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	f000 f956 	bl	8001ea8 <__sinit>
 8001bfc:	f1b8 0f01 	cmp.w	r8, #1
 8001c00:	bf08      	it	eq
 8001c02:	89a3      	ldrheq	r3, [r4, #12]
 8001c04:	6026      	str	r6, [r4, #0]
 8001c06:	bf04      	itt	eq
 8001c08:	f043 0301 	orreq.w	r3, r3, #1
 8001c0c:	81a3      	strheq	r3, [r4, #12]
 8001c0e:	89a2      	ldrh	r2, [r4, #12]
 8001c10:	f012 0308 	ands.w	r3, r2, #8
 8001c14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001c18:	d01c      	beq.n	8001c54 <setvbuf+0x16c>
 8001c1a:	07d3      	lsls	r3, r2, #31
 8001c1c:	bf41      	itttt	mi
 8001c1e:	2300      	movmi	r3, #0
 8001c20:	426d      	negmi	r5, r5
 8001c22:	60a3      	strmi	r3, [r4, #8]
 8001c24:	61a5      	strmi	r5, [r4, #24]
 8001c26:	bf58      	it	pl
 8001c28:	60a5      	strpl	r5, [r4, #8]
 8001c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001c2c:	f015 0501 	ands.w	r5, r5, #1
 8001c30:	d115      	bne.n	8001c5e <setvbuf+0x176>
 8001c32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001c36:	e7c8      	b.n	8001bca <setvbuf+0xe2>
 8001c38:	4648      	mov	r0, r9
 8001c3a:	f000 f9fb 	bl	8002034 <malloc>
 8001c3e:	4606      	mov	r6, r0
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0ae      	beq.n	8001ba2 <setvbuf+0xba>
 8001c44:	464d      	mov	r5, r9
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	81a3      	strh	r3, [r4, #12]
 8001c4e:	e7d0      	b.n	8001bf2 <setvbuf+0x10a>
 8001c50:	2500      	movs	r5, #0
 8001c52:	e7a8      	b.n	8001ba6 <setvbuf+0xbe>
 8001c54:	60a3      	str	r3, [r4, #8]
 8001c56:	e7e8      	b.n	8001c2a <setvbuf+0x142>
 8001c58:	f04f 35ff 	mov.w	r5, #4294967295
 8001c5c:	e7b9      	b.n	8001bd2 <setvbuf+0xea>
 8001c5e:	2500      	movs	r5, #0
 8001c60:	e7b7      	b.n	8001bd2 <setvbuf+0xea>
 8001c62:	bf00      	nop
 8001c64:	2000002c 	.word	0x2000002c
 8001c68:	0800238c 	.word	0x0800238c
 8001c6c:	080023ac 	.word	0x080023ac
 8001c70:	0800236c 	.word	0x0800236c

08001c74 <__sflush_r>:
 8001c74:	898a      	ldrh	r2, [r1, #12]
 8001c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	0710      	lsls	r0, r2, #28
 8001c7e:	460c      	mov	r4, r1
 8001c80:	d458      	bmi.n	8001d34 <__sflush_r+0xc0>
 8001c82:	684b      	ldr	r3, [r1, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dc05      	bgt.n	8001c94 <__sflush_r+0x20>
 8001c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dc02      	bgt.n	8001c94 <__sflush_r+0x20>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c96:	2e00      	cmp	r6, #0
 8001c98:	d0f9      	beq.n	8001c8e <__sflush_r+0x1a>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ca0:	682f      	ldr	r7, [r5, #0]
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	d032      	beq.n	8001d0c <__sflush_r+0x98>
 8001ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	075a      	lsls	r2, r3, #29
 8001cac:	d505      	bpl.n	8001cba <__sflush_r+0x46>
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	1ac0      	subs	r0, r0, r3
 8001cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cb4:	b10b      	cbz	r3, 8001cba <__sflush_r+0x46>
 8001cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb8:	1ac0      	subs	r0, r0, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc0:	6a21      	ldr	r1, [r4, #32]
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	47b0      	blx	r6
 8001cc6:	1c43      	adds	r3, r0, #1
 8001cc8:	89a3      	ldrh	r3, [r4, #12]
 8001cca:	d106      	bne.n	8001cda <__sflush_r+0x66>
 8001ccc:	6829      	ldr	r1, [r5, #0]
 8001cce:	291d      	cmp	r1, #29
 8001cd0:	d82c      	bhi.n	8001d2c <__sflush_r+0xb8>
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <__sflush_r+0x108>)
 8001cd4:	40ca      	lsrs	r2, r1
 8001cd6:	07d6      	lsls	r6, r2, #31
 8001cd8:	d528      	bpl.n	8001d2c <__sflush_r+0xb8>
 8001cda:	2200      	movs	r2, #0
 8001cdc:	6062      	str	r2, [r4, #4]
 8001cde:	04d9      	lsls	r1, r3, #19
 8001ce0:	6922      	ldr	r2, [r4, #16]
 8001ce2:	6022      	str	r2, [r4, #0]
 8001ce4:	d504      	bpl.n	8001cf0 <__sflush_r+0x7c>
 8001ce6:	1c42      	adds	r2, r0, #1
 8001ce8:	d101      	bne.n	8001cee <__sflush_r+0x7a>
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	b903      	cbnz	r3, 8001cf0 <__sflush_r+0x7c>
 8001cee:	6560      	str	r0, [r4, #84]	; 0x54
 8001cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cf2:	602f      	str	r7, [r5, #0]
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d0ca      	beq.n	8001c8e <__sflush_r+0x1a>
 8001cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cfc:	4299      	cmp	r1, r3
 8001cfe:	d002      	beq.n	8001d06 <__sflush_r+0x92>
 8001d00:	4628      	mov	r0, r5
 8001d02:	f000 f99f 	bl	8002044 <_free_r>
 8001d06:	2000      	movs	r0, #0
 8001d08:	6360      	str	r0, [r4, #52]	; 0x34
 8001d0a:	e7c1      	b.n	8001c90 <__sflush_r+0x1c>
 8001d0c:	6a21      	ldr	r1, [r4, #32]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	4628      	mov	r0, r5
 8001d12:	47b0      	blx	r6
 8001d14:	1c41      	adds	r1, r0, #1
 8001d16:	d1c7      	bne.n	8001ca8 <__sflush_r+0x34>
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0c4      	beq.n	8001ca8 <__sflush_r+0x34>
 8001d1e:	2b1d      	cmp	r3, #29
 8001d20:	d001      	beq.n	8001d26 <__sflush_r+0xb2>
 8001d22:	2b16      	cmp	r3, #22
 8001d24:	d101      	bne.n	8001d2a <__sflush_r+0xb6>
 8001d26:	602f      	str	r7, [r5, #0]
 8001d28:	e7b1      	b.n	8001c8e <__sflush_r+0x1a>
 8001d2a:	89a3      	ldrh	r3, [r4, #12]
 8001d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d30:	81a3      	strh	r3, [r4, #12]
 8001d32:	e7ad      	b.n	8001c90 <__sflush_r+0x1c>
 8001d34:	690f      	ldr	r7, [r1, #16]
 8001d36:	2f00      	cmp	r7, #0
 8001d38:	d0a9      	beq.n	8001c8e <__sflush_r+0x1a>
 8001d3a:	0793      	lsls	r3, r2, #30
 8001d3c:	680e      	ldr	r6, [r1, #0]
 8001d3e:	bf08      	it	eq
 8001d40:	694b      	ldreq	r3, [r1, #20]
 8001d42:	600f      	str	r7, [r1, #0]
 8001d44:	bf18      	it	ne
 8001d46:	2300      	movne	r3, #0
 8001d48:	eba6 0807 	sub.w	r8, r6, r7
 8001d4c:	608b      	str	r3, [r1, #8]
 8001d4e:	f1b8 0f00 	cmp.w	r8, #0
 8001d52:	dd9c      	ble.n	8001c8e <__sflush_r+0x1a>
 8001d54:	6a21      	ldr	r1, [r4, #32]
 8001d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d58:	4643      	mov	r3, r8
 8001d5a:	463a      	mov	r2, r7
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	47b0      	blx	r6
 8001d60:	2800      	cmp	r0, #0
 8001d62:	dc06      	bgt.n	8001d72 <__sflush_r+0xfe>
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6a:	81a3      	strh	r3, [r4, #12]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	e78e      	b.n	8001c90 <__sflush_r+0x1c>
 8001d72:	4407      	add	r7, r0
 8001d74:	eba8 0800 	sub.w	r8, r8, r0
 8001d78:	e7e9      	b.n	8001d4e <__sflush_r+0xda>
 8001d7a:	bf00      	nop
 8001d7c:	20400001 	.word	0x20400001

08001d80 <_fflush_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	690b      	ldr	r3, [r1, #16]
 8001d84:	4605      	mov	r5, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	b913      	cbnz	r3, 8001d90 <_fflush_r+0x10>
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	b118      	cbz	r0, 8001d9a <_fflush_r+0x1a>
 8001d92:	6983      	ldr	r3, [r0, #24]
 8001d94:	b90b      	cbnz	r3, 8001d9a <_fflush_r+0x1a>
 8001d96:	f000 f887 	bl	8001ea8 <__sinit>
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <_fflush_r+0x6c>)
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	d11b      	bne.n	8001dd8 <_fflush_r+0x58>
 8001da0:	686c      	ldr	r4, [r5, #4]
 8001da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ef      	beq.n	8001d8a <_fflush_r+0xa>
 8001daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dac:	07d0      	lsls	r0, r2, #31
 8001dae:	d404      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db0:	0599      	lsls	r1, r3, #22
 8001db2:	d402      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001db6:	f000 f915 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001dba:	4628      	mov	r0, r5
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f7ff ff59 	bl	8001c74 <__sflush_r>
 8001dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dc4:	07da      	lsls	r2, r3, #31
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	d4e0      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	059b      	lsls	r3, r3, #22
 8001dce:	d4dd      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dd2:	f000 f908 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001dd6:	e7d9      	b.n	8001d8c <_fflush_r+0xc>
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <_fflush_r+0x70>)
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d101      	bne.n	8001de2 <_fflush_r+0x62>
 8001dde:	68ac      	ldr	r4, [r5, #8]
 8001de0:	e7df      	b.n	8001da2 <_fflush_r+0x22>
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <_fflush_r+0x74>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	bf08      	it	eq
 8001de8:	68ec      	ldreq	r4, [r5, #12]
 8001dea:	e7da      	b.n	8001da2 <_fflush_r+0x22>
 8001dec:	0800238c 	.word	0x0800238c
 8001df0:	080023ac 	.word	0x080023ac
 8001df4:	0800236c 	.word	0x0800236c

08001df8 <std>:
 8001df8:	2300      	movs	r3, #0
 8001dfa:	b510      	push	{r4, lr}
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8001e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e06:	6083      	str	r3, [r0, #8]
 8001e08:	8181      	strh	r1, [r0, #12]
 8001e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e0c:	81c2      	strh	r2, [r0, #14]
 8001e0e:	6183      	str	r3, [r0, #24]
 8001e10:	4619      	mov	r1, r3
 8001e12:	2208      	movs	r2, #8
 8001e14:	305c      	adds	r0, #92	; 0x5c
 8001e16:	f7ff fe57 	bl	8001ac8 <memset>
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <std+0x38>)
 8001e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <std+0x3c>)
 8001e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <std+0x40>)
 8001e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <std+0x44>)
 8001e28:	6224      	str	r4, [r4, #32]
 8001e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop
 8001e30:	08002225 	.word	0x08002225
 8001e34:	08002247 	.word	0x08002247
 8001e38:	0800227f 	.word	0x0800227f
 8001e3c:	080022a3 	.word	0x080022a3

08001e40 <_cleanup_r>:
 8001e40:	4901      	ldr	r1, [pc, #4]	; (8001e48 <_cleanup_r+0x8>)
 8001e42:	f000 b8af 	b.w	8001fa4 <_fwalk_reent>
 8001e46:	bf00      	nop
 8001e48:	08001d81 	.word	0x08001d81

08001e4c <__sfmoreglue>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	2268      	movs	r2, #104	; 0x68
 8001e50:	1e4d      	subs	r5, r1, #1
 8001e52:	4355      	muls	r5, r2
 8001e54:	460e      	mov	r6, r1
 8001e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e5a:	f000 f95f 	bl	800211c <_malloc_r>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	b140      	cbz	r0, 8001e74 <__sfmoreglue+0x28>
 8001e62:	2100      	movs	r1, #0
 8001e64:	e9c0 1600 	strd	r1, r6, [r0]
 8001e68:	300c      	adds	r0, #12
 8001e6a:	60a0      	str	r0, [r4, #8]
 8001e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e70:	f7ff fe2a 	bl	8001ac8 <memset>
 8001e74:	4620      	mov	r0, r4
 8001e76:	bd70      	pop	{r4, r5, r6, pc}

08001e78 <__sfp_lock_acquire>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__sfp_lock_acquire+0x8>)
 8001e7a:	f000 b8b3 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	200000b1 	.word	0x200000b1

08001e84 <__sfp_lock_release>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sfp_lock_release+0x8>)
 8001e86:	f000 b8ae 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	200000b1 	.word	0x200000b1

08001e90 <__sinit_lock_acquire>:
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <__sinit_lock_acquire+0x8>)
 8001e92:	f000 b8a7 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e96:	bf00      	nop
 8001e98:	200000b2 	.word	0x200000b2

08001e9c <__sinit_lock_release>:
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <__sinit_lock_release+0x8>)
 8001e9e:	f000 b8a2 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001ea2:	bf00      	nop
 8001ea4:	200000b2 	.word	0x200000b2

08001ea8 <__sinit>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f7ff fff0 	bl	8001e90 <__sinit_lock_acquire>
 8001eb0:	69a3      	ldr	r3, [r4, #24]
 8001eb2:	b11b      	cbz	r3, 8001ebc <__sinit+0x14>
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb8:	f7ff bff0 	b.w	8001e9c <__sinit_lock_release>
 8001ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <__sinit+0x68>)
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <__sinit+0x6c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	bf04      	itt	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	61a3      	streq	r3, [r4, #24]
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f000 f820 	bl	8001f18 <__sfp>
 8001ed8:	6060      	str	r0, [r4, #4]
 8001eda:	4620      	mov	r0, r4
 8001edc:	f000 f81c 	bl	8001f18 <__sfp>
 8001ee0:	60a0      	str	r0, [r4, #8]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f818 	bl	8001f18 <__sfp>
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60e0      	str	r0, [r4, #12]
 8001eec:	2104      	movs	r1, #4
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	f7ff ff82 	bl	8001df8 <std>
 8001ef4:	68a0      	ldr	r0, [r4, #8]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2109      	movs	r1, #9
 8001efa:	f7ff ff7d 	bl	8001df8 <std>
 8001efe:	68e0      	ldr	r0, [r4, #12]
 8001f00:	2202      	movs	r2, #2
 8001f02:	2112      	movs	r1, #18
 8001f04:	f7ff ff78 	bl	8001df8 <std>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61a3      	str	r3, [r4, #24]
 8001f0c:	e7d2      	b.n	8001eb4 <__sinit+0xc>
 8001f0e:	bf00      	nop
 8001f10:	08002368 	.word	0x08002368
 8001f14:	08001e41 	.word	0x08001e41

08001f18 <__sfp>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	4607      	mov	r7, r0
 8001f1c:	f7ff ffac 	bl	8001e78 <__sfp_lock_acquire>
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <__sfp+0x84>)
 8001f22:	681e      	ldr	r6, [r3, #0]
 8001f24:	69b3      	ldr	r3, [r6, #24]
 8001f26:	b913      	cbnz	r3, 8001f2e <__sfp+0x16>
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f7ff ffbd 	bl	8001ea8 <__sinit>
 8001f2e:	3648      	adds	r6, #72	; 0x48
 8001f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	d503      	bpl.n	8001f40 <__sfp+0x28>
 8001f38:	6833      	ldr	r3, [r6, #0]
 8001f3a:	b30b      	cbz	r3, 8001f80 <__sfp+0x68>
 8001f3c:	6836      	ldr	r6, [r6, #0]
 8001f3e:	e7f7      	b.n	8001f30 <__sfp+0x18>
 8001f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f44:	b9d5      	cbnz	r5, 8001f7c <__sfp+0x64>
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <__sfp+0x88>)
 8001f48:	60e3      	str	r3, [r4, #12]
 8001f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f50:	f000 f847 	bl	8001fe2 <__retarget_lock_init_recursive>
 8001f54:	f7ff ff96 	bl	8001e84 <__sfp_lock_release>
 8001f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f60:	6025      	str	r5, [r4, #0]
 8001f62:	61a5      	str	r5, [r4, #24]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4629      	mov	r1, r5
 8001f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f6c:	f7ff fdac 	bl	8001ac8 <memset>
 8001f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7c:	3468      	adds	r4, #104	; 0x68
 8001f7e:	e7d9      	b.n	8001f34 <__sfp+0x1c>
 8001f80:	2104      	movs	r1, #4
 8001f82:	4638      	mov	r0, r7
 8001f84:	f7ff ff62 	bl	8001e4c <__sfmoreglue>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	6030      	str	r0, [r6, #0]
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1d5      	bne.n	8001f3c <__sfp+0x24>
 8001f90:	f7ff ff78 	bl	8001e84 <__sfp_lock_release>
 8001f94:	230c      	movs	r3, #12
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	e7ee      	b.n	8001f78 <__sfp+0x60>
 8001f9a:	bf00      	nop
 8001f9c:	08002368 	.word	0x08002368
 8001fa0:	ffff0001 	.word	0xffff0001

08001fa4 <_fwalk_reent>:
 8001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	4606      	mov	r6, r0
 8001faa:	4688      	mov	r8, r1
 8001fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fb0:	2700      	movs	r7, #0
 8001fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8001fba:	d505      	bpl.n	8001fc8 <_fwalk_reent+0x24>
 8001fbc:	6824      	ldr	r4, [r4, #0]
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d1f7      	bne.n	8001fb2 <_fwalk_reent+0xe>
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fc8:	89ab      	ldrh	r3, [r5, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d907      	bls.n	8001fde <_fwalk_reent+0x3a>
 8001fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	d003      	beq.n	8001fde <_fwalk_reent+0x3a>
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4630      	mov	r0, r6
 8001fda:	47c0      	blx	r8
 8001fdc:	4307      	orrs	r7, r0
 8001fde:	3568      	adds	r5, #104	; 0x68
 8001fe0:	e7e9      	b.n	8001fb6 <_fwalk_reent+0x12>

08001fe2 <__retarget_lock_init_recursive>:
 8001fe2:	4770      	bx	lr

08001fe4 <__retarget_lock_acquire_recursive>:
 8001fe4:	4770      	bx	lr

08001fe6 <__retarget_lock_release_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__swhatbuf_r>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	460e      	mov	r6, r1
 8001fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	b096      	sub	sp, #88	; 0x58
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	da08      	bge.n	800200c <__swhatbuf_r+0x24>
 8001ffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	602a      	str	r2, [r5, #0]
 8002002:	061a      	lsls	r2, r3, #24
 8002004:	d410      	bmi.n	8002028 <__swhatbuf_r+0x40>
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	e00e      	b.n	800202a <__swhatbuf_r+0x42>
 800200c:	466a      	mov	r2, sp
 800200e:	f000 f95d 	bl	80022cc <_fstat_r>
 8002012:	2800      	cmp	r0, #0
 8002014:	dbf1      	blt.n	8001ffa <__swhatbuf_r+0x12>
 8002016:	9a01      	ldr	r2, [sp, #4]
 8002018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800201c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002020:	425a      	negs	r2, r3
 8002022:	415a      	adcs	r2, r3
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	e7ee      	b.n	8002006 <__swhatbuf_r+0x1e>
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	2000      	movs	r0, #0
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	b016      	add	sp, #88	; 0x58
 8002030:	bd70      	pop	{r4, r5, r6, pc}
	...

08002034 <malloc>:
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <malloc+0xc>)
 8002036:	4601      	mov	r1, r0
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	f000 b86f 	b.w	800211c <_malloc_r>
 800203e:	bf00      	nop
 8002040:	2000002c 	.word	0x2000002c

08002044 <_free_r>:
 8002044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002046:	2900      	cmp	r1, #0
 8002048:	d044      	beq.n	80020d4 <_free_r+0x90>
 800204a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800204e:	9001      	str	r0, [sp, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f1a1 0404 	sub.w	r4, r1, #4
 8002056:	bfb8      	it	lt
 8002058:	18e4      	addlt	r4, r4, r3
 800205a:	f000 f95b 	bl	8002314 <__malloc_lock>
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <_free_r+0x94>)
 8002060:	9801      	ldr	r0, [sp, #4]
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	b933      	cbnz	r3, 8002074 <_free_r+0x30>
 8002066:	6063      	str	r3, [r4, #4]
 8002068:	6014      	str	r4, [r2, #0]
 800206a:	b003      	add	sp, #12
 800206c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002070:	f000 b956 	b.w	8002320 <__malloc_unlock>
 8002074:	42a3      	cmp	r3, r4
 8002076:	d908      	bls.n	800208a <_free_r+0x46>
 8002078:	6825      	ldr	r5, [r4, #0]
 800207a:	1961      	adds	r1, r4, r5
 800207c:	428b      	cmp	r3, r1
 800207e:	bf01      	itttt	eq
 8002080:	6819      	ldreq	r1, [r3, #0]
 8002082:	685b      	ldreq	r3, [r3, #4]
 8002084:	1949      	addeq	r1, r1, r5
 8002086:	6021      	streq	r1, [r4, #0]
 8002088:	e7ed      	b.n	8002066 <_free_r+0x22>
 800208a:	461a      	mov	r2, r3
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	b10b      	cbz	r3, 8002094 <_free_r+0x50>
 8002090:	42a3      	cmp	r3, r4
 8002092:	d9fa      	bls.n	800208a <_free_r+0x46>
 8002094:	6811      	ldr	r1, [r2, #0]
 8002096:	1855      	adds	r5, r2, r1
 8002098:	42a5      	cmp	r5, r4
 800209a:	d10b      	bne.n	80020b4 <_free_r+0x70>
 800209c:	6824      	ldr	r4, [r4, #0]
 800209e:	4421      	add	r1, r4
 80020a0:	1854      	adds	r4, r2, r1
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	6011      	str	r1, [r2, #0]
 80020a6:	d1e0      	bne.n	800206a <_free_r+0x26>
 80020a8:	681c      	ldr	r4, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	6053      	str	r3, [r2, #4]
 80020ae:	4421      	add	r1, r4
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	e7da      	b.n	800206a <_free_r+0x26>
 80020b4:	d902      	bls.n	80020bc <_free_r+0x78>
 80020b6:	230c      	movs	r3, #12
 80020b8:	6003      	str	r3, [r0, #0]
 80020ba:	e7d6      	b.n	800206a <_free_r+0x26>
 80020bc:	6825      	ldr	r5, [r4, #0]
 80020be:	1961      	adds	r1, r4, r5
 80020c0:	428b      	cmp	r3, r1
 80020c2:	bf04      	itt	eq
 80020c4:	6819      	ldreq	r1, [r3, #0]
 80020c6:	685b      	ldreq	r3, [r3, #4]
 80020c8:	6063      	str	r3, [r4, #4]
 80020ca:	bf04      	itt	eq
 80020cc:	1949      	addeq	r1, r1, r5
 80020ce:	6021      	streq	r1, [r4, #0]
 80020d0:	6054      	str	r4, [r2, #4]
 80020d2:	e7ca      	b.n	800206a <_free_r+0x26>
 80020d4:	b003      	add	sp, #12
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	200000b4 	.word	0x200000b4

080020dc <sbrk_aligned>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4e0e      	ldr	r6, [pc, #56]	; (8002118 <sbrk_aligned+0x3c>)
 80020e0:	460c      	mov	r4, r1
 80020e2:	6831      	ldr	r1, [r6, #0]
 80020e4:	4605      	mov	r5, r0
 80020e6:	b911      	cbnz	r1, 80020ee <sbrk_aligned+0x12>
 80020e8:	f000 f88c 	bl	8002204 <_sbrk_r>
 80020ec:	6030      	str	r0, [r6, #0]
 80020ee:	4621      	mov	r1, r4
 80020f0:	4628      	mov	r0, r5
 80020f2:	f000 f887 	bl	8002204 <_sbrk_r>
 80020f6:	1c43      	adds	r3, r0, #1
 80020f8:	d00a      	beq.n	8002110 <sbrk_aligned+0x34>
 80020fa:	1cc4      	adds	r4, r0, #3
 80020fc:	f024 0403 	bic.w	r4, r4, #3
 8002100:	42a0      	cmp	r0, r4
 8002102:	d007      	beq.n	8002114 <sbrk_aligned+0x38>
 8002104:	1a21      	subs	r1, r4, r0
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f87c 	bl	8002204 <_sbrk_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d101      	bne.n	8002114 <sbrk_aligned+0x38>
 8002110:	f04f 34ff 	mov.w	r4, #4294967295
 8002114:	4620      	mov	r0, r4
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	200000b8 	.word	0x200000b8

0800211c <_malloc_r>:
 800211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002120:	1ccd      	adds	r5, r1, #3
 8002122:	f025 0503 	bic.w	r5, r5, #3
 8002126:	3508      	adds	r5, #8
 8002128:	2d0c      	cmp	r5, #12
 800212a:	bf38      	it	cc
 800212c:	250c      	movcc	r5, #12
 800212e:	2d00      	cmp	r5, #0
 8002130:	4607      	mov	r7, r0
 8002132:	db01      	blt.n	8002138 <_malloc_r+0x1c>
 8002134:	42a9      	cmp	r1, r5
 8002136:	d905      	bls.n	8002144 <_malloc_r+0x28>
 8002138:	230c      	movs	r3, #12
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	2600      	movs	r6, #0
 800213e:	4630      	mov	r0, r6
 8002140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002144:	4e2e      	ldr	r6, [pc, #184]	; (8002200 <_malloc_r+0xe4>)
 8002146:	f000 f8e5 	bl	8002314 <__malloc_lock>
 800214a:	6833      	ldr	r3, [r6, #0]
 800214c:	461c      	mov	r4, r3
 800214e:	bb34      	cbnz	r4, 800219e <_malloc_r+0x82>
 8002150:	4629      	mov	r1, r5
 8002152:	4638      	mov	r0, r7
 8002154:	f7ff ffc2 	bl	80020dc <sbrk_aligned>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	4604      	mov	r4, r0
 800215c:	d14d      	bne.n	80021fa <_malloc_r+0xde>
 800215e:	6834      	ldr	r4, [r6, #0]
 8002160:	4626      	mov	r6, r4
 8002162:	2e00      	cmp	r6, #0
 8002164:	d140      	bne.n	80021e8 <_malloc_r+0xcc>
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	4631      	mov	r1, r6
 800216a:	4638      	mov	r0, r7
 800216c:	eb04 0803 	add.w	r8, r4, r3
 8002170:	f000 f848 	bl	8002204 <_sbrk_r>
 8002174:	4580      	cmp	r8, r0
 8002176:	d13a      	bne.n	80021ee <_malloc_r+0xd2>
 8002178:	6821      	ldr	r1, [r4, #0]
 800217a:	3503      	adds	r5, #3
 800217c:	1a6d      	subs	r5, r5, r1
 800217e:	f025 0503 	bic.w	r5, r5, #3
 8002182:	3508      	adds	r5, #8
 8002184:	2d0c      	cmp	r5, #12
 8002186:	bf38      	it	cc
 8002188:	250c      	movcc	r5, #12
 800218a:	4629      	mov	r1, r5
 800218c:	4638      	mov	r0, r7
 800218e:	f7ff ffa5 	bl	80020dc <sbrk_aligned>
 8002192:	3001      	adds	r0, #1
 8002194:	d02b      	beq.n	80021ee <_malloc_r+0xd2>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	442b      	add	r3, r5
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	e00e      	b.n	80021bc <_malloc_r+0xa0>
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	1b52      	subs	r2, r2, r5
 80021a2:	d41e      	bmi.n	80021e2 <_malloc_r+0xc6>
 80021a4:	2a0b      	cmp	r2, #11
 80021a6:	d916      	bls.n	80021d6 <_malloc_r+0xba>
 80021a8:	1961      	adds	r1, r4, r5
 80021aa:	42a3      	cmp	r3, r4
 80021ac:	6025      	str	r5, [r4, #0]
 80021ae:	bf18      	it	ne
 80021b0:	6059      	strne	r1, [r3, #4]
 80021b2:	6863      	ldr	r3, [r4, #4]
 80021b4:	bf08      	it	eq
 80021b6:	6031      	streq	r1, [r6, #0]
 80021b8:	5162      	str	r2, [r4, r5]
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	4638      	mov	r0, r7
 80021be:	f104 060b 	add.w	r6, r4, #11
 80021c2:	f000 f8ad 	bl	8002320 <__malloc_unlock>
 80021c6:	f026 0607 	bic.w	r6, r6, #7
 80021ca:	1d23      	adds	r3, r4, #4
 80021cc:	1af2      	subs	r2, r6, r3
 80021ce:	d0b6      	beq.n	800213e <_malloc_r+0x22>
 80021d0:	1b9b      	subs	r3, r3, r6
 80021d2:	50a3      	str	r3, [r4, r2]
 80021d4:	e7b3      	b.n	800213e <_malloc_r+0x22>
 80021d6:	6862      	ldr	r2, [r4, #4]
 80021d8:	42a3      	cmp	r3, r4
 80021da:	bf0c      	ite	eq
 80021dc:	6032      	streq	r2, [r6, #0]
 80021de:	605a      	strne	r2, [r3, #4]
 80021e0:	e7ec      	b.n	80021bc <_malloc_r+0xa0>
 80021e2:	4623      	mov	r3, r4
 80021e4:	6864      	ldr	r4, [r4, #4]
 80021e6:	e7b2      	b.n	800214e <_malloc_r+0x32>
 80021e8:	4634      	mov	r4, r6
 80021ea:	6876      	ldr	r6, [r6, #4]
 80021ec:	e7b9      	b.n	8002162 <_malloc_r+0x46>
 80021ee:	230c      	movs	r3, #12
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4638      	mov	r0, r7
 80021f4:	f000 f894 	bl	8002320 <__malloc_unlock>
 80021f8:	e7a1      	b.n	800213e <_malloc_r+0x22>
 80021fa:	6025      	str	r5, [r4, #0]
 80021fc:	e7de      	b.n	80021bc <_malloc_r+0xa0>
 80021fe:	bf00      	nop
 8002200:	200000b4 	.word	0x200000b4

08002204 <_sbrk_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4d06      	ldr	r5, [pc, #24]	; (8002220 <_sbrk_r+0x1c>)
 8002208:	2300      	movs	r3, #0
 800220a:	4604      	mov	r4, r0
 800220c:	4608      	mov	r0, r1
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f7ff fb46 	bl	80018a0 <_sbrk>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d102      	bne.n	800221e <_sbrk_r+0x1a>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	b103      	cbz	r3, 800221e <_sbrk_r+0x1a>
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	200000bc 	.word	0x200000bc

08002224 <__sread>:
 8002224:	b510      	push	{r4, lr}
 8002226:	460c      	mov	r4, r1
 8002228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222c:	f000 f87e 	bl	800232c <_read_r>
 8002230:	2800      	cmp	r0, #0
 8002232:	bfab      	itete	ge
 8002234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002236:	89a3      	ldrhlt	r3, [r4, #12]
 8002238:	181b      	addge	r3, r3, r0
 800223a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800223e:	bfac      	ite	ge
 8002240:	6563      	strge	r3, [r4, #84]	; 0x54
 8002242:	81a3      	strhlt	r3, [r4, #12]
 8002244:	bd10      	pop	{r4, pc}

08002246 <__swrite>:
 8002246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800224a:	461f      	mov	r7, r3
 800224c:	898b      	ldrh	r3, [r1, #12]
 800224e:	05db      	lsls	r3, r3, #23
 8002250:	4605      	mov	r5, r0
 8002252:	460c      	mov	r4, r1
 8002254:	4616      	mov	r6, r2
 8002256:	d505      	bpl.n	8002264 <__swrite+0x1e>
 8002258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225c:	2302      	movs	r3, #2
 800225e:	2200      	movs	r2, #0
 8002260:	f000 f846 	bl	80022f0 <_lseek_r>
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800226a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800226e:	81a3      	strh	r3, [r4, #12]
 8002270:	4632      	mov	r2, r6
 8002272:	463b      	mov	r3, r7
 8002274:	4628      	mov	r0, r5
 8002276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800227a:	f7fe bfc1 	b.w	8001200 <_write_r>

0800227e <__sseek>:
 800227e:	b510      	push	{r4, lr}
 8002280:	460c      	mov	r4, r1
 8002282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002286:	f000 f833 	bl	80022f0 <_lseek_r>
 800228a:	1c43      	adds	r3, r0, #1
 800228c:	89a3      	ldrh	r3, [r4, #12]
 800228e:	bf15      	itete	ne
 8002290:	6560      	strne	r0, [r4, #84]	; 0x54
 8002292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800229a:	81a3      	strheq	r3, [r4, #12]
 800229c:	bf18      	it	ne
 800229e:	81a3      	strhne	r3, [r4, #12]
 80022a0:	bd10      	pop	{r4, pc}

080022a2 <__sclose>:
 80022a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a6:	f000 b801 	b.w	80022ac <_close_r>
	...

080022ac <_close_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4d06      	ldr	r5, [pc, #24]	; (80022c8 <_close_r+0x1c>)
 80022b0:	2300      	movs	r3, #0
 80022b2:	4604      	mov	r4, r0
 80022b4:	4608      	mov	r0, r1
 80022b6:	602b      	str	r3, [r5, #0]
 80022b8:	f7ff fac8 	bl	800184c <_close>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d102      	bne.n	80022c6 <_close_r+0x1a>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	b103      	cbz	r3, 80022c6 <_close_r+0x1a>
 80022c4:	6023      	str	r3, [r4, #0]
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
 80022c8:	200000bc 	.word	0x200000bc

080022cc <_fstat_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4d07      	ldr	r5, [pc, #28]	; (80022ec <_fstat_r+0x20>)
 80022d0:	2300      	movs	r3, #0
 80022d2:	4604      	mov	r4, r0
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	f7ff fac3 	bl	8001864 <_fstat>
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	d102      	bne.n	80022e8 <_fstat_r+0x1c>
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	b103      	cbz	r3, 80022e8 <_fstat_r+0x1c>
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	bf00      	nop
 80022ec:	200000bc 	.word	0x200000bc

080022f0 <_lseek_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d07      	ldr	r5, [pc, #28]	; (8002310 <_lseek_r+0x20>)
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	602a      	str	r2, [r5, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fac0 	bl	8001884 <_lseek>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_lseek_r+0x1e>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_lseek_r+0x1e>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	200000bc 	.word	0x200000bc

08002314 <__malloc_lock>:
 8002314:	4801      	ldr	r0, [pc, #4]	; (800231c <__malloc_lock+0x8>)
 8002316:	f7ff be65 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 800231a:	bf00      	nop
 800231c:	200000b0 	.word	0x200000b0

08002320 <__malloc_unlock>:
 8002320:	4801      	ldr	r0, [pc, #4]	; (8002328 <__malloc_unlock+0x8>)
 8002322:	f7ff be60 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8002326:	bf00      	nop
 8002328:	200000b0 	.word	0x200000b0

0800232c <_read_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	; (800234c <_read_r+0x20>)
 8002330:	4604      	mov	r4, r0
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	2200      	movs	r2, #0
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f7ff fa69 	bl	8001812 <_read>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_read_r+0x1e>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_read_r+0x1e>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	200000bc 	.word	0x200000bc

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr
