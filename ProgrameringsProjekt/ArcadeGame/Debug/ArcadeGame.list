
ArcadeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b4  080063b4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080063b4  080063b4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063b4  080063b4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080063bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000098  08006454  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08006454  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098e7  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f56  00000000  00000000  000299af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001304a  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd91  00000000  00000000  0003fd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b3e7  00000000  00000000  0004faf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aaeda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  000aaf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f14 	.word	0x08005f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005f14 	.word	0x08005f14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	70fb      	strb	r3, [r7, #3]
 8000292:	460b      	mov	r3, r1
 8000294:	70bb      	strb	r3, [r7, #2]
 8000296:	4613      	mov	r3, r2
 8000298:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 80002a2:	78bb      	ldrb	r3, [r7, #2]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d821      	bhi.n	80002ec <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 80002ae:	78ba      	ldrb	r2, [r7, #2]
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	461a      	mov	r2, r3
 80002ba:	231f      	movs	r3, #31
 80002bc:	4093      	lsls	r3, r2
 80002be:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	43db      	mvns	r3, r3
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	4013      	ands	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 80002ca:	78f9      	ldrb	r1, [r7, #3]
 80002cc:	78ba      	ldrb	r2, [r7, #2]
 80002ce:	4613      	mov	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4413      	add	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30
 80002ea:	e074      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 80002ec:	78bb      	ldrb	r3, [r7, #2]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d823      	bhi.n	800033a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 80002f8:	78bb      	ldrb	r3, [r7, #2]
 80002fa:	1f5a      	subs	r2, r3, #5
 80002fc:	4613      	mov	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	4413      	add	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	461a      	mov	r2, r3
 8000306:	231f      	movs	r3, #31
 8000308:	4093      	lsls	r3, r2
 800030a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	43db      	mvns	r3, r3
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	4013      	ands	r3, r2
 8000314:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000316:	78f9      	ldrb	r1, [r7, #3]
 8000318:	78bb      	ldrb	r3, [r7, #2]
 800031a:	1f5a      	subs	r2, r3, #5
 800031c:	4613      	mov	r3, r2
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	4413      	add	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4313      	orrs	r3, r2
 8000330:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	635a      	str	r2, [r3, #52]	; 0x34
 8000338:	e04d      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 800033a:	78bb      	ldrb	r3, [r7, #2]
 800033c:	2b0e      	cmp	r3, #14
 800033e:	d825      	bhi.n	800038c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000344:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	f1a3 020a 	sub.w	r2, r3, #10
 800034c:	4613      	mov	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	4413      	add	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	461a      	mov	r2, r3
 8000356:	231f      	movs	r3, #31
 8000358:	4093      	lsls	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	43db      	mvns	r3, r3
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000366:	78f9      	ldrb	r1, [r7, #3]
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	f1a3 020a 	sub.w	r2, r3, #10
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	4313      	orrs	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	639a      	str	r2, [r3, #56]	; 0x38
 800038a:	e024      	b.n	80003d6 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000390:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000392:	78bb      	ldrb	r3, [r7, #2]
 8000394:	f1a3 020f 	sub.w	r2, r3, #15
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	461a      	mov	r2, r3
 80003a2:	231f      	movs	r3, #31
 80003a4:	4093      	lsls	r3, r2
 80003a6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	43db      	mvns	r3, r3
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80003b2:	78f9      	ldrb	r1, [r7, #3]
 80003b4:	78bb      	ldrb	r3, [r7, #2]
 80003b6:	f1a3 020f 	sub.w	r2, r3, #15
 80003ba:	4613      	mov	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	4413      	add	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	2b09      	cmp	r3, #9
 80003da:	d923      	bls.n	8000424 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	f1a3 020a 	sub.w	r2, r3, #10
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	2207      	movs	r2, #7
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	699a      	ldr	r2, [r3, #24]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	43db      	mvns	r3, r3
 80003fe:	401a      	ands	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6999      	ldr	r1, [r3, #24]
 8000408:	7878      	ldrb	r0, [r7, #1]
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f1a3 020a 	sub.w	r2, r3, #10
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	fa00 f303 	lsl.w	r3, r0, r3
 800041a:	ea41 0203 	orr.w	r2, r1, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000422:	e01f      	b.n	8000464 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	1e5a      	subs	r2, r3, #1
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	2238      	movs	r2, #56	; 0x38
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	43db      	mvns	r3, r3
 8000444:	401a      	ands	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6959      	ldr	r1, [r3, #20]
 800044e:	7878      	ldrb	r0, [r7, #1]
 8000450:	78fa      	ldrb	r2, [r7, #3]
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	fa00 f303 	lsl.w	r3, r0, r3
 800045c:	ea41 0203 	orr.w	r2, r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	615a      	str	r2, [r3, #20]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f043 0204 	orr.w	r2, r3, #4
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	609a      	str	r2, [r3, #8]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049c:	b29b      	uxth	r3, r3
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4013      	ands	r3, r2
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004c4:	2301      	movs	r3, #1
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	e001      	b.n	80004ce <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004dc:	b480      	push	{r7}
 80004de:	b08b      	sub	sp, #44	; 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	623b      	str	r3, [r7, #32]
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000504:	4b8b      	ldr	r3, [pc, #556]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d011      	beq.n	8000538 <RCC_GetClocksFreq+0x5c>
 8000514:	6a3b      	ldr	r3, [r7, #32]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d837      	bhi.n	800058a <RCC_GetClocksFreq+0xae>
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d003      	beq.n	8000528 <RCC_GetClocksFreq+0x4c>
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	2b04      	cmp	r3, #4
 8000524:	d004      	beq.n	8000530 <RCC_GetClocksFreq+0x54>
 8000526:	e030      	b.n	800058a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a83      	ldr	r2, [pc, #524]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 800052c:	601a      	str	r2, [r3, #0]
      break;
 800052e:	e030      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a81      	ldr	r2, [pc, #516]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000534:	601a      	str	r2, [r3, #0]
      break;
 8000536:	e02c      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000538:	4b7e      	ldr	r3, [pc, #504]	; (8000734 <RCC_GetClocksFreq+0x258>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000540:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000542:	4b7c      	ldr	r3, [pc, #496]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800054a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	0c9b      	lsrs	r3, r3, #18
 8000550:	3302      	adds	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4a77      	ldr	r2, [pc, #476]	; (800073c <RCC_GetClocksFreq+0x260>)
 800055e:	fb02 f303 	mul.w	r3, r2, r3
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
 8000564:	e00d      	b.n	8000582 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000566:	4b73      	ldr	r3, [pc, #460]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000572:	4a71      	ldr	r2, [pc, #452]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fbb2 f2f3 	udiv	r2, r2, r3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000586:	601a      	str	r2, [r3, #0]
      break;
 8000588:	e003      	b.n	8000592 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a6a      	ldr	r2, [pc, #424]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 800058e:	601a      	str	r2, [r3, #0]
      break;
 8000590:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000592:	4b68      	ldr	r3, [pc, #416]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800059a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80005a2:	4a67      	ldr	r2, [pc, #412]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005c2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80005c4:	6a3b      	ldr	r3, [r7, #32]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005ca:	4a5d      	ldr	r2, [pc, #372]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	40da      	lsrs	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005e2:	4b54      	ldr	r3, [pc, #336]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005ea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	0adb      	lsrs	r3, r3, #11
 80005f0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80005f2:	4a53      	ldr	r2, [pc, #332]	; (8000740 <RCC_GetClocksFreq+0x264>)
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	40da      	lsrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800060a:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <RCC_GetClocksFreq+0x258>)
 800060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000612:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800061a:	4a4a      	ldr	r2, [pc, #296]	; (8000744 <RCC_GetClocksFreq+0x268>)
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	b29b      	uxth	r3, r3
 8000624:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	fbb2 f2f3 	udiv	r2, r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	e003      	b.n	8000646 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000646:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800064e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000650:	6a3b      	ldr	r3, [r7, #32]
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000656:	4a3b      	ldr	r2, [pc, #236]	; (8000744 <RCC_GetClocksFreq+0x268>)
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	b29b      	uxth	r3, r3
 8000660:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800066c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	fbb2 f2f3 	udiv	r2, r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	e003      	b.n	8000682 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b10      	cmp	r3, #16
 800068c:	d003      	beq.n	8000696 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a29      	ldr	r2, [pc, #164]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 8000692:	619a      	str	r2, [r3, #24]
 8000694:	e003      	b.n	800069e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	2b20      	cmp	r3, #32
 80006a8:	d003      	beq.n	80006b2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <RCC_GetClocksFreq+0x25c>)
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	e003      	b.n	80006ba <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c6:	d10d      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d108      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d104      	bne.n	80006e4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	005a      	lsls	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	621a      	str	r2, [r3, #32]
 80006e2:	e003      	b.n	80006ec <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <RCC_GetClocksFreq+0x258>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f8:	d10d      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000700:	429a      	cmp	r2, r3
 8000702:	d108      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d104      	bne.n	8000716 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
 8000714:	e003      	b.n	800071e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <RCC_GetClocksFreq+0x258>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0303 	and.w	r3, r3, #3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10e      	bne.n	8000748 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
 8000732:	e028      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
 8000734:	40021000 	.word	0x40021000
 8000738:	007a1200 	.word	0x007a1200
 800073c:	003d0900 	.word	0x003d0900
 8000740:	20000000 	.word	0x20000000
 8000744:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000748:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
 800075c:	e013      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d104      	bne.n	8000774 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
 8000772:	e008      	b.n	8000786 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	2b03      	cmp	r3, #3
 800077e:	d102      	bne.n	8000786 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a5f      	ldr	r2, [pc, #380]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	e021      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800079c:	4b57      	ldr	r3, [pc, #348]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a8:	d104      	bne.n	80007b4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b2:	e015      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007c0:	d104      	bne.n	80007cc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	e009      	b.n	80007e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80007cc:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007d8:	d102      	bne.n	80007e0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a48      	ldr	r2, [pc, #288]	; (8000900 <RCC_GetClocksFreq+0x424>)
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80007e0:	4b46      	ldr	r3, [pc, #280]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d104      	bne.n	80007f6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
 80007f4:	e021      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000802:	d104      	bne.n	800080e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
 800080c:	e015      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800081a:	d104      	bne.n	8000826 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
 8000824:	e009      	b.n	800083a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800082e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000832:	d102      	bne.n	800083a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a32      	ldr	r2, [pc, #200]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	e021      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800085c:	d104      	bne.n	8000868 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	e015      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <RCC_GetClocksFreq+0x420>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000874:	d104      	bne.n	8000880 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	e009      	b.n	8000894 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800088c:	d102      	bne.n	8000894 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <RCC_GetClocksFreq+0x424>)
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <RCC_GetClocksFreq+0x420>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80008a8:	e021      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008b6:	d104      	bne.n	80008c2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008c0:	e015      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008ce:	d104      	bne.n	80008da <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008d8:	e009      	b.n	80008ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <RCC_GetClocksFreq+0x420>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80008e6:	d102      	bne.n	80008ee <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <RCC_GetClocksFreq+0x424>)
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008ee:	bf00      	nop
 80008f0:	372c      	adds	r7, #44	; 0x2c
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	007a1200 	.word	0x007a1200

08000904 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	330c      	adds	r3, #12
 800091c:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	78fa      	ldrb	r2, [r7, #3]
 8000922:	701a      	strb	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	891b      	ldrh	r3, [r3, #8]
 8000944:	b29a      	uxth	r2, r3
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	4013      	ands	r3, r2
 800094a:	b29b      	uxth	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e001      	b.n	800095a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	4613      	mov	r3, r2
 8000998:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d103      	bne.n	80009d6 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	e005      	b.n	80009e2 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d102      	bne.n	80009e2 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	3308      	adds	r3, #8
 80009e0:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80009f4:	e006      	b.n	8000a04 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	43da      	mvns	r2, r3
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	400a      	ands	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e001      	b.n	8000a34 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	2201      	movs	r2, #1
 8000a56:	fa02 f103 	lsl.w	r1, r2, r3
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <NVIC_EnableIRQ+0x30>)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <uart_put_char+0x30>)
 8000a8a:	f7ff ff6d 	bl	8000968 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a8e:	bf00      	nop
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <uart_put_char+0x30>)
 8000a94:	f7ff ffbc 	bl	8000a10 <USART_GetFlagStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f8      	beq.n	8000a90 <uart_put_char+0x18>
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004400 	.word	0x40004400

08000aac <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e012      	b.n	8000ae6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b0a      	cmp	r3, #10
 8000aca:	d102      	bne.n	8000ad2 <_write_r+0x26>
            uart_put_char('\r');
 8000acc:	200d      	movs	r0, #13
 8000ace:	f7ff ffd3 	bl	8000a78 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffcc 	bl	8000a78 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	dbe8      	blt.n	8000ac0 <_write_r+0x14>
    }

    return len;
 8000aee:	683b      	ldr	r3, [r7, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000b00:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <uart_init+0x224>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 ffa5 	bl	8004a58 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000b0e:	4b83      	ldr	r3, [pc, #524]	; (8000d1c <uart_init+0x224>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 ff9e 	bl	8004a58 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000b1c:	4b80      	ldr	r3, [pc, #512]	; (8000d20 <uart_init+0x228>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a7f      	ldr	r2, [pc, #508]	; (8000d20 <uart_init+0x228>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000b28:	4b7d      	ldr	r3, [pc, #500]	; (8000d20 <uart_init+0x228>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	4a7c      	ldr	r2, [pc, #496]	; (8000d20 <uart_init+0x228>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b42:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b52:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b62:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b6e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b72:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b82:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000b84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000b92:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba0:	f023 030c 	bic.w	r3, r3, #12
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000ba8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb0:	8892      	ldrh	r2, [r2, #4]
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bc4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000bd4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000bd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000be4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000bf4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <uart_init+0x22c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a4a      	ldr	r2, [pc, #296]	; (8000d24 <uart_init+0x22c>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <uart_init+0x22c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a47      	ldr	r2, [pc, #284]	; (8000d24 <uart_init+0x22c>)
 8000c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c0c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <uart_init+0x22c>)
 8000c10:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <uart_init+0x22c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <uart_init+0x22c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a42      	ldr	r2, [pc, #264]	; (8000d24 <uart_init+0x22c>)
 8000c1c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c20:	f023 030c 	bic.w	r3, r3, #12
 8000c24:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <uart_init+0x22c>)
 8000c28:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <uart_init+0x22c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <uart_init+0x22c>)
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <uart_init+0x22c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <uart_init+0x22c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <uart_init+0x22c>)
 8000c3c:	f043 030c 	orr.w	r3, r3, #12
 8000c40:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <uart_init+0x22c>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4a37      	ldr	r2, [pc, #220]	; (8000d24 <uart_init+0x22c>)
 8000c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c4c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <uart_init+0x22c>)
 8000c50:	4a34      	ldr	r2, [pc, #208]	; (8000d24 <uart_init+0x22c>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc38 	bl	80004dc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <uart_init+0x22c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d010      	beq.n	8000c9e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c7e:	005a      	lsls	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fb01 f202 	mul.w	r2, r1, r2
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c9c:	e00d      	b.n	8000cba <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	fb01 f202 	mul.w	r2, r1, r2
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	085b      	lsrs	r3, r3, #1
 8000cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d302      	bcc.n	8000cca <uart_init+0x1d2>
        divider++;
 8000cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <uart_init+0x22c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ce2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cea:	4313      	orrs	r3, r2
 8000cec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <uart_init+0x22c>)
 8000cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <uart_init+0x22c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <uart_init+0x22c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d02:	2201      	movs	r2, #1
 8000d04:	4908      	ldr	r1, [pc, #32]	; (8000d28 <uart_init+0x230>)
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <uart_init+0x22c>)
 8000d08:	f7ff fe40 	bl	800098c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000d0c:	2026      	movs	r0, #38	; 0x26
 8000d0e:	f7ff fe99 	bl	8000a44 <NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	; 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000034 	.word	0x20000034
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40004400 	.word	0x40004400
 8000d28:	00050105 	.word	0x00050105

08000d2c <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <lcd_transmit_byte+0x5c>)
 8000d38:	8a9b      	ldrh	r3, [r3, #20]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <lcd_transmit_byte+0x5c>)
 8000d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000d46:	bf00      	nop
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <lcd_transmit_byte+0x60>)
 8000d4c:	f7ff fdf0 	bl	8000930 <SPI_I2S_GetFlagStatus>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d1f8      	bne.n	8000d48 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <lcd_transmit_byte+0x60>)
 8000d5c:	f7ff fdd2 	bl	8000904 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000d60:	bf00      	nop
 8000d62:	2102      	movs	r1, #2
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <lcd_transmit_byte+0x60>)
 8000d66:	f7ff fde3 	bl	8000930 <SPI_I2S_GetFlagStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d1f8      	bne.n	8000d62 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <lcd_transmit_byte+0x5c>)
 8000d72:	8a9b      	ldrh	r3, [r3, #20]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <lcd_transmit_byte+0x5c>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	8293      	strh	r3, [r2, #20]
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	40003800 	.word	0x40003800

08000d90 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da0:	8a9b      	ldrh	r3, [r3, #20]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff ffbb 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000db6:	2010      	movs	r0, #16
 8000db8:	f7ff ffb8 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8000dbc:	20b0      	movs	r0, #176	; 0xb0
 8000dbe:	f7ff ffb5 	bl	8000d2c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc6:	8a9b      	ldrh	r3, [r3, #20]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e009      	b.n	8000df0 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffa1 	bl	8000d2c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	ddf2      	ble.n	8000ddc <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dfa:	8a9b      	ldrh	r3, [r3, #20]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff8e 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000e10:	2010      	movs	r0, #16
 8000e12:	f7ff ff8b 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8000e16:	20b1      	movs	r0, #177	; 0xb1
 8000e18:	f7ff ff88 	bl	8000d2c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e20:	8a9b      	ldrh	r3, [r3, #20]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e009      	b.n	8000e4a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff74 	bl	8000d2c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	ddf2      	ble.n	8000e36 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e54:	8a9b      	ldrh	r3, [r3, #20]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ff61 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f7ff ff5e 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8000e70:	20b2      	movs	r0, #178	; 0xb2
 8000e72:	f7ff ff5b 	bl	8000d2c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e7a:	8a9b      	ldrh	r3, [r3, #20]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e009      	b.n	8000ea6 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff46 	bl	8000d2c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000eac:	dbf1      	blt.n	8000e92 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eb2:	8a9b      	ldrh	r3, [r3, #20]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff32 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000ec8:	2010      	movs	r0, #16
 8000eca:	f7ff ff2f 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8000ece:	20b3      	movs	r0, #179	; 0xb3
 8000ed0:	f7ff ff2c 	bl	8000d2c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ed8:	8a9b      	ldrh	r3, [r3, #20]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8000ee8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e009      	b.n	8000f04 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff17 	bl	8000d2c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f0a:	dbf1      	blt.n	8000ef0 <lcd_push_buffer+0x160>
    }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <lcd_reset>:

void lcd_reset()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8000f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f22:	8a9b      	ldrh	r3, [r3, #20]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <lcd_reset+0xd8>)
 8000f34:	8a9b      	ldrh	r3, [r3, #20]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <lcd_reset+0xd8>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <lcd_reset+0xd8>)
 8000f44:	8a9b      	ldrh	r3, [r3, #20]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <lcd_reset+0xd8>)
 8000f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e003      	b.n	8000f60 <lcd_reset+0x48>
 8000f58:	bf00      	nop
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f241 2247 	movw	r2, #4679	; 0x1247
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d9f6      	bls.n	8000f58 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <lcd_reset+0xd8>)
 8000f6c:	8a9b      	ldrh	r3, [r3, #20]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <lcd_reset+0xd8>)
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	e003      	b.n	8000f88 <lcd_reset+0x70>
 8000f80:	bf00      	nop
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <lcd_reset+0xdc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d9f7      	bls.n	8000f80 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f94:	8a9b      	ldrh	r3, [r3, #20]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8000fa4:	20ae      	movs	r0, #174	; 0xae
 8000fa6:	f7ff fec1 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 8000faa:	20a2      	movs	r0, #162	; 0xa2
 8000fac:	f7ff febe 	bl	8000d2c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8000fb0:	20a0      	movs	r0, #160	; 0xa0
 8000fb2:	f7ff febb 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f7ff feb8 	bl	8000d2c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8000fbc:	2022      	movs	r0, #34	; 0x22
 8000fbe:	f7ff feb5 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8000fc2:	202f      	movs	r0, #47	; 0x2f
 8000fc4:	f7ff feb2 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8000fc8:	2040      	movs	r0, #64	; 0x40
 8000fca:	f7ff feaf 	bl	8000d2c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8000fce:	20af      	movs	r0, #175	; 0xaf
 8000fd0:	f7ff feac 	bl	8000d2c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8000fd4:	2081      	movs	r0, #129	; 0x81
 8000fd6:	f7ff fea9 	bl	8000d2c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8000fda:	2017      	movs	r0, #23
 8000fdc:	f7ff fea6 	bl	8000d2c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8000fe0:	20a6      	movs	r0, #166	; 0xa6
 8000fe2:	f7ff fea3 	bl	8000d2c <lcd_transmit_byte>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	0005f36f 	.word	0x0005f36f

08000ff8 <lcd_init>:

void lcd_init() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8000ffc:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <lcd_init+0x27c>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4a9c      	ldr	r2, [pc, #624]	; (8001274 <lcd_init+0x27c>)
 8001002:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8001006:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <lcd_init+0x27c>)
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	4a99      	ldr	r2, [pc, #612]	; (8001274 <lcd_init+0x27c>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001014:	4b98      	ldr	r3, [pc, #608]	; (8001278 <lcd_init+0x280>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	4a97      	ldr	r2, [pc, #604]	; (8001278 <lcd_init+0x280>)
 800101a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800101e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001020:	4b95      	ldr	r3, [pc, #596]	; (8001278 <lcd_init+0x280>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	4a94      	ldr	r2, [pc, #592]	; (8001278 <lcd_init+0x280>)
 8001026:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800102a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 800102c:	4b92      	ldr	r3, [pc, #584]	; (8001278 <lcd_init+0x280>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	4a91      	ldr	r2, [pc, #580]	; (8001278 <lcd_init+0x280>)
 8001032:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001036:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <lcd_init+0x280>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	4a8e      	ldr	r2, [pc, #568]	; (8001278 <lcd_init+0x280>)
 800103e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001042:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001044:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <lcd_init+0x280>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a8b      	ldr	r2, [pc, #556]	; (8001278 <lcd_init+0x280>)
 800104a:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800104e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001050:	4b89      	ldr	r3, [pc, #548]	; (8001278 <lcd_init+0x280>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a88      	ldr	r2, [pc, #544]	; (8001278 <lcd_init+0x280>)
 8001056:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800105a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 800105c:	4b86      	ldr	r3, [pc, #536]	; (8001278 <lcd_init+0x280>)
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4985      	ldr	r1, [pc, #532]	; (8001278 <lcd_init+0x280>)
 8001064:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8001068:	4013      	ands	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800106e:	4a82      	ldr	r2, [pc, #520]	; (8001278 <lcd_init+0x280>)
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <lcd_init+0x280>)
 8001072:	8892      	ldrh	r2, [r2, #4]
 8001074:	b292      	uxth	r2, r2
 8001076:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001078:	4b7f      	ldr	r3, [pc, #508]	; (8001278 <lcd_init+0x280>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <lcd_init+0x280>)
 800107e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8001082:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001084:	4b7c      	ldr	r3, [pc, #496]	; (8001278 <lcd_init+0x280>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a7b      	ldr	r2, [pc, #492]	; (8001278 <lcd_init+0x280>)
 800108a:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800108e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001090:	4b79      	ldr	r3, [pc, #484]	; (8001278 <lcd_init+0x280>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a78      	ldr	r2, [pc, #480]	; (8001278 <lcd_init+0x280>)
 8001096:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800109a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800109c:	4b76      	ldr	r3, [pc, #472]	; (8001278 <lcd_init+0x280>)
 800109e:	4a76      	ldr	r2, [pc, #472]	; (8001278 <lcd_init+0x280>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80010a4:	4b74      	ldr	r3, [pc, #464]	; (8001278 <lcd_init+0x280>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a73      	ldr	r2, [pc, #460]	; (8001278 <lcd_init+0x280>)
 80010aa:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80010ae:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80010b0:	4b71      	ldr	r3, [pc, #452]	; (8001278 <lcd_init+0x280>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a70      	ldr	r2, [pc, #448]	; (8001278 <lcd_init+0x280>)
 80010b6:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80010ba:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80010bc:	4b6e      	ldr	r3, [pc, #440]	; (8001278 <lcd_init+0x280>)
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4a6d      	ldr	r2, [pc, #436]	; (8001278 <lcd_init+0x280>)
 80010c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80010d0:	4a69      	ldr	r2, [pc, #420]	; (8001278 <lcd_init+0x280>)
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <lcd_init+0x280>)
 80010d4:	8892      	ldrh	r2, [r2, #4]
 80010d6:	b292      	uxth	r2, r2
 80010d8:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <lcd_init+0x280>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a66      	ldr	r2, [pc, #408]	; (8001278 <lcd_init+0x280>)
 80010e0:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80010e4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80010e6:	4b64      	ldr	r3, [pc, #400]	; (8001278 <lcd_init+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a63      	ldr	r2, [pc, #396]	; (8001278 <lcd_init+0x280>)
 80010ec:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 80010f0:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 80010f2:	4b61      	ldr	r3, [pc, #388]	; (8001278 <lcd_init+0x280>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4a60      	ldr	r2, [pc, #384]	; (8001278 <lcd_init+0x280>)
 80010f8:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 80010fc:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <lcd_init+0x280>)
 8001100:	4a5d      	ldr	r2, [pc, #372]	; (8001278 <lcd_init+0x280>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8001106:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001110:	0c9b      	lsrs	r3, r3, #18
 8001112:	049b      	lsls	r3, r3, #18
 8001114:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8001126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	b29b      	uxth	r3, r3
 800112e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001132:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800113e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001146:	8892      	ldrh	r2, [r2, #4]
 8001148:	b292      	uxth	r2, r2
 800114a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 800114c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	049b      	lsls	r3, r3, #18
 800115a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800115c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 800116c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800117a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 800117c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001186:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800118a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 800118c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	049b      	lsls	r3, r3, #18
 800119a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800119c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <lcd_init+0x280>)
 80011aa:	8a9b      	ldrh	r3, [r3, #20]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4a32      	ldr	r2, [pc, #200]	; (8001278 <lcd_init+0x280>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <lcd_init+0x284>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <lcd_init+0x284>)
 80011c0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80011c8:	4a2c      	ldr	r2, [pc, #176]	; (800127c <lcd_init+0x284>)
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <lcd_init+0x284>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	b292      	uxth	r2, r2
 80011d0:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <lcd_init+0x284>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <lcd_init+0x284>)
 80011da:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80011de:	b29b      	uxth	r3, r3
 80011e0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <lcd_init+0x284>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <lcd_init+0x284>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <lcd_init+0x284>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <lcd_init+0x284>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	b29b      	uxth	r3, r3
 8001200:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <lcd_init+0x284>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <lcd_init+0x284>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	b29b      	uxth	r3, r3
 8001210:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <lcd_init+0x284>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <lcd_init+0x284>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <lcd_init+0x284>)
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <lcd_init+0x284>)
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	b292      	uxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <lcd_init+0x284>)
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <lcd_init+0x284>)
 8001234:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001238:	b29b      	uxth	r3, r3
 800123a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <lcd_init+0x284>)
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <lcd_init+0x284>)
 8001244:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001248:	b29b      	uxth	r3, r3
 800124a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <lcd_init+0x284>)
 800124e:	8b9b      	ldrh	r3, [r3, #28]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <lcd_init+0x284>)
 8001254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001258:	b29b      	uxth	r3, r3
 800125a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <lcd_init+0x284>)
 800125e:	2207      	movs	r2, #7
 8001260:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <lcd_init+0x284>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <lcd_init+0x284>)
 800126a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800126e:	b29b      	uxth	r3, r3
 8001270:	e006      	b.n	8001280 <lcd_init+0x288>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000400 	.word	0x48000400
 800127c:	40003800 	.word	0x40003800
 8001280:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <lcd_init+0x2b4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <lcd_init+0x2b4>)
 800128a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128e:	b29b      	uxth	r3, r3
 8001290:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <lcd_init+0x2b4>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <lcd_init+0x2b4>)
 800129a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129e:	b29b      	uxth	r3, r3
 80012a0:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80012a2:	f7ff fe39 	bl	8000f18 <lcd_reset>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40003800 	.word	0x40003800

080012b0 <initArrayBullets>:
#include <bullets.h>

void initArrayBullets(bullet a[], int8_t length){
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	int8_t i;
	for (i=0; i<length;i++){
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e02f      	b.n	8001322 <initArrayBullets+0x72>
		a[i].x = 0;
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
		a[i].y = 0;
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
		a[i].alive = 0;
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	2200      	movs	r2, #0
 80012ea:	721a      	strb	r2, [r3, #8]
		a[i].enemy = 0;
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	725a      	strb	r2, [r3, #9]
		a[i].vec.x = 0;
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	815a      	strh	r2, [r3, #10]
		a[i].vec.y = 0;
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	819a      	strh	r2, [r3, #12]
	for (i=0; i<length;i++){
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3301      	adds	r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbc9      	blt.n	80012c2 <initArrayBullets+0x12>
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <bulletSpaceship>:


void bulletSpaceship(int16_t x, int16_t y, bullet a[]){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	603a      	str	r2, [r7, #0]
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	460b      	mov	r3, r1
 800134a:	80bb      	strh	r3, [r7, #4]
	int8_t i;
	for (i=0 ; i<50; i++){
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e045      	b.n	80013de <bulletSpaceship+0xa2>
		if (a[i].alive == 0){
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d136      	bne.n	80013d2 <bulletSpaceship+0x96>
			a[i].x = x<<8;
 8001364:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	440b      	add	r3, r1
 8001372:	0212      	lsls	r2, r2, #8
 8001374:	601a      	str	r2, [r3, #0]
			a[i].y = y<<8;
 8001376:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	440b      	add	r3, r1
 8001384:	0212      	lsls	r2, r2, #8
 8001386:	605a      	str	r2, [r3, #4]
			a[i].alive = 1;
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	2201      	movs	r2, #1
 8001394:	721a      	strb	r2, [r3, #8]
			a[i].vec.x = 0<<8;
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	815a      	strh	r2, [r3, #10]
			a[i].vec.y = -2<<8;
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 80013b2:	819a      	strh	r2, [r3, #12]
			gotoxy(x,y);
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd04 	bl	8001dcc <gotoxy>
			fgcolor(10);
 80013c4:	200a      	movs	r0, #10
 80013c6:	f000 fcc1 	bl	8001d4c <fgcolor>
			printf("%c",254);
 80013ca:	20fe      	movs	r0, #254	; 0xfe
 80013cc:	f003 fb2e 	bl	8004a2c <putchar>
			break;
 80013d0:	e00a      	b.n	80013e8 <bulletSpaceship+0xac>
	for (i=0 ; i<50; i++){
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b31      	cmp	r3, #49	; 0x31
 80013e4:	ddb5      	ble.n	8001352 <bulletSpaceship+0x16>
		}
	}

}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <bulletEnemy>:

void bulletEnemy(badShip b[], bullet a[]){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	int32_t i,j;
	for(j = 0; j < 20; j++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	e072      	b.n	80014e6 <bulletEnemy+0xf6>
		if(b[j].alive == 1) {
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d163      	bne.n	80014e0 <bulletEnemy+0xf0>
			for (i=0 ; i<50; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e05d      	b.n	80014da <bulletEnemy+0xea>
				if (a[i].alive == 0){
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d152      	bne.n	80014d4 <bulletEnemy+0xe4>
					a[i].x = b[j].x<<8;
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	461a      	mov	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	440b      	add	r3, r1
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	601a      	str	r2, [r3, #0]
					a[i].y = b[j].y<<8;
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	440b      	add	r3, r1
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	605a      	str	r2, [r3, #4]
					a[i].alive = 1;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	2201      	movs	r2, #1
 8001474:	721a      	strb	r2, [r3, #8]
					a[i].enemy = 1;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	2201      	movs	r2, #1
 8001480:	725a      	strb	r2, [r3, #9]
					a[i].vec.x = 0<<8;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	815a      	strh	r2, [r3, #10]
					a[i].vec.y = 2<<8;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	819a      	strh	r2, [r3, #12]
					gotoxy(b[j].x,b[j].y);
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f000 fc83 	bl	8001dcc <gotoxy>
					fgcolor(13);
 80014c6:	200d      	movs	r0, #13
 80014c8:	f000 fc40 	bl	8001d4c <fgcolor>
					printf("%c",254);
 80014cc:	20fe      	movs	r0, #254	; 0xfe
 80014ce:	f003 faad 	bl	8004a2c <putchar>
					break;
 80014d2:	e005      	b.n	80014e0 <bulletEnemy+0xf0>
			for (i=0 ; i<50; i++){
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b31      	cmp	r3, #49	; 0x31
 80014de:	dd9e      	ble.n	800141e <bulletEnemy+0x2e>
	for(j = 0; j < 20; j++) {
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	dd89      	ble.n	8001400 <bulletEnemy+0x10>
				}
			}
		}
	}
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <updateBulletFriendly>:

void updateBulletFriendly(bullet a[]){
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b088      	sub	sp, #32
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	int32_t i;
	for (i=0 ; i<50; i++){
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e097      	b.n	8001634 <updateBulletFriendly+0x13e>
		if (!(a[i].alive==0)){
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 808c 	beq.w	800162e <updateBulletFriendly+0x138>
			if(a[i].enemy==0) {
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 8083 	bne.w	800162e <updateBulletFriendly+0x138>
				int32_t x = a[i].x>>8;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	121b      	asrs	r3, r3, #8
 8001534:	61bb      	str	r3, [r7, #24]
				int32_t y = a[i].y>>8;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	617b      	str	r3, [r7, #20]
				a[i].x = a[i].x+a[i].vec.x;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	440b      	add	r3, r1
 8001556:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800155a:	4618      	mov	r0, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	440b      	add	r3, r1
 8001564:	4402      	add	r2, r0
 8001566:	601a      	str	r2, [r3, #0]
				a[i].y = a[i].y+a[i].vec.y;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	440b      	add	r3, r1
 800157a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	440b      	add	r3, r1
 8001588:	4402      	add	r2, r0
 800158a:	605a      	str	r2, [r3, #4]
				int32_t newX = a[i].x>>8;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	121b      	asrs	r3, r3, #8
 8001598:	613b      	str	r3, [r7, #16]
				int32_t newY = a[i].y>>8;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	121b      	asrs	r3, r3, #8
 80015a6:	60fb      	str	r3, [r7, #12]
				if (newY<122 && newY>3){
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b79      	cmp	r3, #121	; 0x79
 80015ac:	dc17      	bgt.n	80015de <updateBulletFriendly+0xe8>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	dd14      	ble.n	80015de <updateBulletFriendly+0xe8>
					gotoxy(x,y);
 80015b4:	6979      	ldr	r1, [r7, #20]
 80015b6:	69b8      	ldr	r0, [r7, #24]
 80015b8:	f000 fc08 	bl	8001dcc <gotoxy>
					fgcolor(0);
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 fbc5 	bl	8001d4c <fgcolor>
					printf("%c",254);
 80015c2:	20fe      	movs	r0, #254	; 0xfe
 80015c4:	f003 fa32 	bl	8004a2c <putchar>
					gotoxy(newX,newY);
 80015c8:	68f9      	ldr	r1, [r7, #12]
 80015ca:	6938      	ldr	r0, [r7, #16]
 80015cc:	f000 fbfe 	bl	8001dcc <gotoxy>
					fgcolor(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 fbbb 	bl	8001d4c <fgcolor>
					printf("%c",254);
 80015d6:	20fe      	movs	r0, #254	; 0xfe
 80015d8:	f003 fa28 	bl	8004a2c <putchar>
 80015dc:	e027      	b.n	800162e <updateBulletFriendly+0x138>
				}else {
					gotoxy(x,y);
 80015de:	6979      	ldr	r1, [r7, #20]
 80015e0:	69b8      	ldr	r0, [r7, #24]
 80015e2:	f000 fbf3 	bl	8001dcc <gotoxy>
					fgcolor(0);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 fbb0 	bl	8001d4c <fgcolor>
					printf("%c",254);
 80015ec:	20fe      	movs	r0, #254	; 0xfe
 80015ee:	f003 fa1d 	bl	8004a2c <putchar>
					a[i].alive = 0;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	721a      	strb	r2, [r3, #8]
					a[i].x=0;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
					a[i].y=0;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
					a[i].vec.x=0;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	815a      	strh	r2, [r3, #10]
					a[i].vec.y=0;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	2200      	movs	r2, #0
 800162c:	819a      	strh	r2, [r3, #12]
	for (i=0 ; i<50; i++){
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b31      	cmp	r3, #49	; 0x31
 8001638:	f77f af64 	ble.w	8001504 <updateBulletFriendly+0xe>
				}
			}
		}
	}
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <updateBulletEnemy>:

void updateBulletEnemy(bullet a[]){
 8001646:	b580      	push	{r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	int8_t i;
	for (i=0 ; i<50; i++){
 800164e:	2300      	movs	r3, #0
 8001650:	77fb      	strb	r3, [r7, #31]
 8001652:	e0b2      	b.n	80017ba <updateBulletEnemy+0x174>
		if (a[i].alive==1){
 8001654:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	f040 80a3 	bne.w	80017ae <updateBulletEnemy+0x168>
			if(a[i].enemy==1) {
 8001668:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001676:	2b01      	cmp	r3, #1
 8001678:	f040 8099 	bne.w	80017ae <updateBulletEnemy+0x168>
				int32_t x = a[i].x>>8;
 800167c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	121b      	asrs	r3, r3, #8
 800168a:	61bb      	str	r3, [r7, #24]
				int32_t y = a[i].y>>8;
 800168c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	121b      	asrs	r3, r3, #8
 800169a:	617b      	str	r3, [r7, #20]
				a[i].x = a[i].x+a[i].vec.x;
 800169c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	440b      	add	r3, r1
 80016b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	440b      	add	r3, r1
 80016c2:	4402      	add	r2, r0
 80016c4:	601a      	str	r2, [r3, #0]
				a[i].y = a[i].y+a[i].vec.y;
 80016c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	440b      	add	r3, r1
 80016ec:	4402      	add	r2, r0
 80016ee:	605a      	str	r2, [r3, #4]
				int32_t newX = a[i].x>>8;
 80016f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	121b      	asrs	r3, r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
				int32_t newY = a[i].y>>8;
 8001700:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	121b      	asrs	r3, r3, #8
 800170e:	60fb      	str	r3, [r7, #12]
				if (newY<122 && newY>3){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b79      	cmp	r3, #121	; 0x79
 8001714:	dc17      	bgt.n	8001746 <updateBulletEnemy+0x100>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b03      	cmp	r3, #3
 800171a:	dd14      	ble.n	8001746 <updateBulletEnemy+0x100>
					gotoxy(x,y);
 800171c:	6979      	ldr	r1, [r7, #20]
 800171e:	69b8      	ldr	r0, [r7, #24]
 8001720:	f000 fb54 	bl	8001dcc <gotoxy>
					fgcolor(0);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 fb11 	bl	8001d4c <fgcolor>
					printf("%c",254);
 800172a:	20fe      	movs	r0, #254	; 0xfe
 800172c:	f003 f97e 	bl	8004a2c <putchar>
					gotoxy(newX,newY);
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	6938      	ldr	r0, [r7, #16]
 8001734:	f000 fb4a 	bl	8001dcc <gotoxy>
					fgcolor(13);
 8001738:	200d      	movs	r0, #13
 800173a:	f000 fb07 	bl	8001d4c <fgcolor>
					printf("%c",254);
 800173e:	20fe      	movs	r0, #254	; 0xfe
 8001740:	f003 f974 	bl	8004a2c <putchar>
 8001744:	e033      	b.n	80017ae <updateBulletEnemy+0x168>
				}else {
					gotoxy(x,y);
 8001746:	6979      	ldr	r1, [r7, #20]
 8001748:	69b8      	ldr	r0, [r7, #24]
 800174a:	f000 fb3f 	bl	8001dcc <gotoxy>
					fgcolor(0);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 fafc 	bl	8001d4c <fgcolor>
					printf("%c",254);
 8001754:	20fe      	movs	r0, #254	; 0xfe
 8001756:	f003 f969 	bl	8004a2c <putchar>
					a[i].alive = 0;
 800175a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	721a      	strb	r2, [r3, #8]
					a[i].enemy = 0;
 8001768:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	725a      	strb	r2, [r3, #9]
					a[i].x=0;
 8001776:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
					a[i].y=0;
 8001784:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
					a[i].vec.x=0;
 8001792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	2200      	movs	r2, #0
 800179e:	815a      	strh	r2, [r3, #10]
					a[i].vec.y=0;
 80017a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	819a      	strh	r2, [r3, #12]
	for (i=0 ; i<50; i++){
 80017ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	77fb      	strb	r3, [r7, #31]
 80017ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017be:	2b31      	cmp	r3, #49	; 0x31
 80017c0:	f77f af48 	ble.w	8001654 <updateBulletEnemy+0xe>
				}
			}
		}
	}
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <bulletHitEnemy>:

int32_t bulletHitEnemy(bullet a[], badShip b[], int32_t score) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
	int8_t i,j;
	for(i = 0; i < 50; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	e0fc      	b.n	80019da <bulletHitEnemy+0x20c>
		if(a[i].alive==1) {
 80017e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 80ed 	bne.w	80019ce <bulletHitEnemy+0x200>
			if(a[i].enemy==0) {
 80017f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80e3 	bne.w	80019ce <bulletHitEnemy+0x200>
				for(j = 0; j < 20; j++) {
 8001808:	2300      	movs	r3, #0
 800180a:	75bb      	strb	r3, [r7, #22]
 800180c:	e0da      	b.n	80019c4 <bulletHitEnemy+0x1f6>
					if(!(b[j].alive==0)) {
 800180e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80c7 	beq.w	80019b8 <bulletHitEnemy+0x1ea>
						if((a[i].y>>8)<=(b[j].y) && (a[i].y>>8)>=(b[j].y)-5 && (a[i].x>>8) >= (b[j].x)-4 && (a[i].x>>8) <= (b[j].x)+4) {
 800182a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	1219      	asrs	r1, r3, #8
 8001838:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	461a      	mov	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	4413      	add	r3, r2
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4299      	cmp	r1, r3
 800184e:	f300 80b3 	bgt.w	80019b8 <bulletHitEnemy+0x1ea>
 8001852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	1219      	asrs	r1, r3, #8
 8001860:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	3b05      	subs	r3, #5
 8001876:	4299      	cmp	r1, r3
 8001878:	f2c0 809e 	blt.w	80019b8 <bulletHitEnemy+0x1ea>
 800187c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1219      	asrs	r1, r3, #8
 800188a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	461a      	mov	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3b04      	subs	r3, #4
 80018a0:	4299      	cmp	r1, r3
 80018a2:	f2c0 8089 	blt.w	80019b8 <bulletHitEnemy+0x1ea>
 80018a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1219      	asrs	r1, r3, #8
 80018b4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	4299      	cmp	r1, r3
 80018cc:	dc74      	bgt.n	80019b8 <bulletHitEnemy+0x1ea>
							b[j].alive=0;
 80018ce:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	721a      	strb	r2, [r3, #8]
							enemyRemove(b[j].x,b[j].y);
 80018e4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4413      	add	r3, r2
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4619      	mov	r1, r3
 800190e:	f002 fc7b 	bl	8004208 <enemyRemove>
							b[j].x=0;
 8001912:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
							b[j].y=0;
 8001928:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
							a[i].alive = 0;
 800193e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	721a      	strb	r2, [r3, #8]
							gotoxy(a[i].x>>8,a[i].y>>8);
 800194c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	1218      	asrs	r0, r3, #8
 800195a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	121b      	asrs	r3, r3, #8
 8001968:	4619      	mov	r1, r3
 800196a:	f000 fa2f 	bl	8001dcc <gotoxy>
							fgcolor(0);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f9ec 	bl	8001d4c <fgcolor>
							printf("%c", 219);
 8001974:	20db      	movs	r0, #219	; 0xdb
 8001976:	f003 f859 	bl	8004a2c <putchar>
							a[i].x=0;
 800197a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
							a[i].y=0;
 8001988:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
							a[i].vec.x=0;
 8001996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	815a      	strh	r2, [r3, #10]
							a[i].vec.y=0;
 80019a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	2200      	movs	r2, #0
 80019b0:	819a      	strh	r2, [r3, #12]
							score += 20;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3314      	adds	r3, #20
 80019b6:	607b      	str	r3, [r7, #4]
				for(j = 0; j < 20; j++) {
 80019b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	75bb      	strb	r3, [r7, #22]
 80019c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019c8:	2b13      	cmp	r3, #19
 80019ca:	f77f af20 	ble.w	800180e <bulletHitEnemy+0x40>
	for(i = 0; i < 50; i++) {
 80019ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	75fb      	strb	r3, [r7, #23]
 80019da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019de:	2b31      	cmp	r3, #49	; 0x31
 80019e0:	f77f aefe 	ble.w	80017e0 <bulletHitEnemy+0x12>
					}
				}
			}
		}
	}
	return score;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <bulletHitPlayer>:


void bulletHitPlayer(bullet a[], goodShip *b) {
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
	int8_t i;
	for(i = 0; i < 50; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e069      	b.n	8001ad2 <bulletHitPlayer+0xe4>
		if(a[i].alive==1) {
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d15a      	bne.n	8001ac6 <bulletHitPlayer+0xd8>
			if((a[i].y>>8)>=b->y && (a[i].y>>8)<=b->y+5 && (a[i].x>>8)>=b->x-4 && (a[i].x>>8)<=b->x+4) {
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	121a      	asrs	r2, r3, #8
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db4f      	blt.n	8001ac6 <bulletHitPlayer+0xd8>
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	121a      	asrs	r2, r3, #8
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3305      	adds	r3, #5
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dc43      	bgt.n	8001ac6 <bulletHitPlayer+0xd8>
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	121a      	asrs	r2, r3, #8
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3b04      	subs	r3, #4
 8001a52:	429a      	cmp	r2, r3
 8001a54:	db37      	blt.n	8001ac6 <bulletHitPlayer+0xd8>
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	121a      	asrs	r2, r3, #8
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dc2b      	bgt.n	8001ac6 <bulletHitPlayer+0xd8>
				a[i].alive = 0;
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	721a      	strb	r2, [r3, #8]
				a[i].x=0;
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
				a[i].y=0;
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
				a[i].vec.x=0;
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	815a      	strh	r2, [r3, #10]
				a[i].vec.y=0;
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	819a      	strh	r2, [r3, #12]
				b->life--;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	b25a      	sxtb	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < 50; i++) {
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	2b31      	cmp	r3, #49	; 0x31
 8001ad8:	dd91      	ble.n	80019fe <bulletHitPlayer+0x10>
			}
		}
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <bulletHitAstroid>:

void bulletHitAstroid(bullet a[], bigRock b[]) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	int8_t i, j;
	for(i = 0; i < 50; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e0c2      	b.n	8001c7e <bulletHitAstroid+0x196>
		if(a[i].alive==1) {
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f040 80b3 	bne.w	8001c72 <bulletHitAstroid+0x18a>
			for(j = 0; j < 5; j++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73bb      	strb	r3, [r7, #14]
 8001b10:	e0aa      	b.n	8001c68 <bulletHitAstroid+0x180>
				if(b[i].alive==1) {
 8001b12:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 8097 	bne.w	8001c5c <bulletHitAstroid+0x174>
					if((a[i].y>>8)<=(b[j].y+2) && (a[i].y>>8)>=(b[j].y-3) && (a[i].x>>8) >= (b[j].x-4) && (a[i].x>>8) <= (b[j].x+4)) {
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	121b      	asrs	r3, r3, #8
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	3302      	adds	r3, #2
 8001b54:	4299      	cmp	r1, r3
 8001b56:	f200 8081 	bhi.w	8001c5c <bulletHitAstroid+0x174>
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	121b      	asrs	r3, r3, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	461a      	mov	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	3b03      	subs	r3, #3
 8001b80:	4299      	cmp	r1, r3
 8001b82:	d36b      	bcc.n	8001c5c <bulletHitAstroid+0x174>
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	121b      	asrs	r3, r3, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3b04      	subs	r3, #4
 8001baa:	4299      	cmp	r1, r3
 8001bac:	d356      	bcc.n	8001c5c <bulletHitAstroid+0x174>
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	121b      	asrs	r3, r3, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4299      	cmp	r1, r3
 8001bd6:	d841      	bhi.n	8001c5c <bulletHitAstroid+0x174>
						astroidDraw(b[j].x,b[j].y);
 8001bd8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f002 fb82 	bl	800430c <astroidDraw>
						a[i].x=0;
 8001c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
						a[i].y=0;
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
						a[i].alive=0;
 8001c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	721a      	strb	r2, [r3, #8]
						a[i].enemy=0;
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	725a      	strb	r2, [r3, #9]
						a[i].vec.x=0;
 8001c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	815a      	strh	r2, [r3, #10]
						a[i].vec.y=0;
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	2200      	movs	r2, #0
 8001c5a:	819a      	strh	r2, [r3, #12]
			for(j = 0; j < 5; j++) {
 8001c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73bb      	strb	r3, [r7, #14]
 8001c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	f77f af50 	ble.w	8001b12 <bulletHitAstroid+0x2a>
	for(i = 0; i < 50; i++) {
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	2b31      	cmp	r3, #49	; 0x31
 8001c84:	f77f af38 	ble.w	8001af8 <bulletHitAstroid+0x10>
					}
				}
			}
		}
	}
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <adcRead>:
#include <analog.h>


int8_t adcRead(void){
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0

	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_1Cycles5);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2109      	movs	r1, #9
 8001c9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ca2:	f7fe faed 	bl	8000280 <ADC_RegularChannelConfig>

	ADC_StartConversion(ADC1); // Start ADC read
 8001ca6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001caa:	f7fe fbe1 	bl	8000470 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001cae:	bf00      	nop
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cb6:	f7fe fbf8 	bl	80004aa <ADC_GetFlagStatus>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f7      	beq.n	8001cb0 <adcRead+0x1e>

	uint32_t joystickWay = ADC_GetConversionValue(ADC1); // Read the ADC value
 8001cc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cc4:	f7fe fbe4 	bl	8000490 <ADC_GetConversionValue>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	607b      	str	r3, [r7, #4]

	if(joystickWay<=1000) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cd2:	d801      	bhi.n	8001cd8 <adcRead+0x46>
		return 1; //venstre
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e007      	b.n	8001ce8 <adcRead+0x56>
	}else if(joystickWay>=3000) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <adcRead+0x54>
		return 2; //højre
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e000      	b.n	8001ce8 <adcRead+0x56>
	}else {
		return 0;
 8001ce6:	2300      	movs	r3, #0
	}
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <buttonRead>:


int8_t buttonRead(void) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
	int16_t a = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	80fb      	strh	r3, [r7, #6]
	int16_t b1 = GPIOC->IDR & (0x0001 << 0);
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <buttonRead+0x58>)
 8001cfc:	8a1b      	ldrh	r3, [r3, #16]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	80bb      	strh	r3, [r7, #4]
	int16_t b2 = GPIOC->IDR & (0x0001 << 1);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <buttonRead+0x58>)
 8001d0a:	8a1b      	ldrh	r3, [r3, #16]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	807b      	strh	r3, [r7, #2]

	if(b1) {
 8001d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <buttonRead+0x36>
		a += 1;
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	3301      	adds	r3, #1
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	80fb      	strh	r3, [r7, #6]
	}
	if(b2) {
 8001d26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <buttonRead+0x46>
		a += 2;
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	3302      	adds	r3, #2
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	80fb      	strh	r3, [r7, #6]
	}
	return a;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b25b      	sxtb	r3, r3
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	48000800 	.word	0x48000800

08001d4c <fgcolor>:
#define ESC 0x1B
#include "ansi.h"

void fgcolor(uint8_t foreground) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8001d56:	2316      	movs	r3, #22
 8001d58:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b07      	cmp	r3, #7
 8001d5e:	d904      	bls.n	8001d6a <fgcolor+0x1e>
	  type = 1;                // bold text
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	3b08      	subs	r3, #8
 8001d68:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	331e      	adds	r3, #30
 8001d70:	211b      	movs	r1, #27
 8001d72:	4803      	ldr	r0, [pc, #12]	; (8001d80 <fgcolor+0x34>)
 8001d74:	f002 fe42 	bl	80049fc <iprintf>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	08005f2c 	.word	0x08005f2c

08001d84 <color>:
      7        Gray
*/
  printf("%c[%dm", ESC, background+40);
}

void color(uint8_t foreground, uint8_t background) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
// combination of fgcolor() and bgcolor() - uses less bandwidth
  uint8_t type = 22;             // normal text
 8001d94:	2316      	movs	r3, #22
 8001d96:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d904      	bls.n	8001da8 <color+0x24>
	  type = 1;                // bold text
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	3b08      	subs	r3, #8
 8001da6:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%d;%dm", ESC, type, foreground+30, background+40);
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f103 011e 	add.w	r1, r3, #30
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	3328      	adds	r3, #40	; 0x28
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	211b      	movs	r1, #27
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <color+0x44>)
 8001dbc:	f002 fe1e 	bl	80049fc <iprintf>
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08005f40 	.word	0x08005f40

08001dcc <gotoxy>:

void clreol(void) {
	printf("%c[K", 0x1B);
}

void gotoxy(int32_t x, int32_t y) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH", 0x1B,y,x);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	211b      	movs	r1, #27
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <gotoxy+0x20>)
 8001dde:	f002 fe0d 	bl	80049fc <iprintf>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	08005f6c 	.word	0x08005f6c

08001df0 <initArrayAstroid>:
#include "astroid.h"

void initArrayAstroid(bigRock a[], int8_t length) {
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	int8_t i;
	for (i=0; i<length;i++){
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e026      	b.n	8001e50 <initArrayAstroid+0x60>
		a[i].x = 0;
 8001e02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		a[i].y = 0;
 8001e18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
		a[i].alive = 0;
 8001e2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2200      	movs	r2, #0
 8001e42:	721a      	strb	r2, [r3, #8]
	for (i=0; i<length;i++){
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbd2      	blt.n	8001e02 <initArrayAstroid+0x12>
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <createAstroid>:

void createAstroid(bigRock a[]) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	int8_t i;
	for(i = 0; i <= 5; i++) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e098      	b.n	8001fac <createAstroid+0x140>
		if(a[i].alive==0) {
 8001e7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 8085 	bne.w	8001fa0 <createAstroid+0x134>
			ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 8001e96:	2300      	movs	r3, #0
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ea0:	f7fe f9ee 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 8001ea4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ea8:	f7fe fae2 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001eac:	bf00      	nop
 8001eae:	2104      	movs	r1, #4
 8001eb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001eb4:	f7fe faf9 	bl	80004aa <ADC_GetFlagStatus>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f7      	beq.n	8001eae <createAstroid+0x42>

			uint16_t randSpawn = ADC_GetConversionValue(ADC1);
 8001ebe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ec2:	f7fe fae5 	bl	8000490 <ADC_GetConversionValue>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	81bb      	strh	r3, [r7, #12]
			ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2102      	movs	r1, #2
 8001ed0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ed4:	f7fe f9d4 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 8001ed8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001edc:	f7fe fac8 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8001ee0:	bf00      	nop
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ee8:	f7fe fadf 	bl	80004aa <ADC_GetFlagStatus>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f7      	beq.n	8001ee2 <createAstroid+0x76>

			randSpawn += ADC_GetConversionValue(ADC1);
 8001ef2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ef6:	f7fe facb 	bl	8000490 <ADC_GetConversionValue>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	89bb      	ldrh	r3, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	81bb      	strh	r3, [r7, #12]
			randSpawn = randSpawn%10;
 8001f04:	89ba      	ldrh	r2, [r7, #12]
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <createAstroid+0x154>)
 8001f08:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0c:	08d9      	lsrs	r1, r3, #3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	81bb      	strh	r3, [r7, #12]
			randSpawn = randSpawn/2;
 8001f1a:	89bb      	ldrh	r3, [r7, #12]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	81bb      	strh	r3, [r7, #12]
			a[i].x = 15+randSpawn*26;
 8001f20:	89bb      	ldrh	r3, [r7, #12]
 8001f22:	221a      	movs	r2, #26
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	f103 010f 	add.w	r1, r3, #15
 8001f2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	460a      	mov	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
			a[i].y = 5;
 8001f42:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	2205      	movs	r2, #5
 8001f56:	605a      	str	r2, [r3, #4]
			a[i].alive=1;
 8001f58:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	721a      	strb	r2, [r3, #8]
			astroidDraw(a[i].x, a[i].y);
 8001f6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f002 f9b7 	bl	800430c <astroidDraw>
			break;
 8001f9e:	e00b      	b.n	8001fb8 <createAstroid+0x14c>
	for(i = 0; i <= 5; i++) {
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	f77f af62 	ble.w	8001e7a <createAstroid+0xe>
		}
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	cccccccd 	.word	0xcccccccd

08001fc4 <moveAstroid>:

void moveAstroid(bigRock a[]) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	int8_t i;
	for(i=0; i<5;i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e064      	b.n	800209c <moveAstroid+0xd8>
		if(!(a[i].alive==0)) {
 8001fd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d051      	beq.n	8002090 <moveAstroid+0xcc>
			if(!((a[i].y)==(123-2))) {
 8001fec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b79      	cmp	r3, #121	; 0x79
 8002002:	d022      	beq.n	800204a <moveAstroid+0x86>
				slideAstroid(a[i]);
 8002004:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800201a:	f000 f849 	bl	80020b0 <slideAstroid>
				a[i].y = a[i].y+1;
 800201e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	1c4a      	adds	r2, r1, #1
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e022      	b.n	8002090 <moveAstroid+0xcc>
			} else {
				astroidRemove(a[i].x, a[i].y);
 800204a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4619      	mov	r1, r3
 8002076:	f002 f9f9 	bl	800446c <astroidRemove>
				a[i].alive=0;
 800207a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	721a      	strb	r2, [r3, #8]
	for(i=0; i<5;i++) {
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	dd96      	ble.n	8001fd2 <moveAstroid+0xe>
			}
		}
	}
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <slideAstroid>:

void slideAstroid(bigRock a) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fgcolor(7);
 80020bc:	2007      	movs	r0, #7
 80020be:	f7ff fe45 	bl	8001d4c <fgcolor>
	gotoxy(a.x-1,a.y+3);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3303      	adds	r3, #3
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff fe7c 	bl	8001dcc <gotoxy>
	printf("%c%c%c%c",219,219,219,219);
 80020d4:	23db      	movs	r3, #219	; 0xdb
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	23db      	movs	r3, #219	; 0xdb
 80020da:	22db      	movs	r2, #219	; 0xdb
 80020dc:	21db      	movs	r1, #219	; 0xdb
 80020de:	4863      	ldr	r0, [pc, #396]	; (800226c <slideAstroid+0x1bc>)
 80020e0:	f002 fc8c 	bl	80049fc <iprintf>
	gotoxy(a.x-3,a.y+2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b03      	subs	r3, #3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3302      	adds	r3, #2
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7ff fe6b 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 80020f6:	22db      	movs	r2, #219	; 0xdb
 80020f8:	21db      	movs	r1, #219	; 0xdb
 80020fa:	485d      	ldr	r0, [pc, #372]	; (8002270 <slideAstroid+0x1c0>)
 80020fc:	f002 fc7e 	bl	80049fc <iprintf>
	fgcolor(8);
 8002100:	2008      	movs	r0, #8
 8002102:	f7ff fe23 	bl	8001d4c <fgcolor>
	printf("%c%c%c%c",219,219,219,219);
 8002106:	23db      	movs	r3, #219	; 0xdb
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	23db      	movs	r3, #219	; 0xdb
 800210c:	22db      	movs	r2, #219	; 0xdb
 800210e:	21db      	movs	r1, #219	; 0xdb
 8002110:	4856      	ldr	r0, [pc, #344]	; (800226c <slideAstroid+0x1bc>)
 8002112:	f002 fc73 	bl	80049fc <iprintf>
	fgcolor(7);
 8002116:	2007      	movs	r0, #7
 8002118:	f7ff fe18 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 800211c:	22db      	movs	r2, #219	; 0xdb
 800211e:	21db      	movs	r1, #219	; 0xdb
 8002120:	4853      	ldr	r0, [pc, #332]	; (8002270 <slideAstroid+0x1c0>)
 8002122:	f002 fc6b 	bl	80049fc <iprintf>
	gotoxy(a.x-4,a.y+1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3b04      	subs	r3, #4
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7ff fe4a 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002138:	20db      	movs	r0, #219	; 0xdb
 800213a:	f002 fc77 	bl	8004a2c <putchar>
	fgcolor(8);
 800213e:	2008      	movs	r0, #8
 8002140:	f7ff fe04 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 8002144:	22db      	movs	r2, #219	; 0xdb
 8002146:	21db      	movs	r1, #219	; 0xdb
 8002148:	4849      	ldr	r0, [pc, #292]	; (8002270 <slideAstroid+0x1c0>)
 800214a:	f002 fc57 	bl	80049fc <iprintf>
	gotoxy(a.x+3,a.y+1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3303      	adds	r3, #3
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fe36 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002160:	20db      	movs	r0, #219	; 0xdb
 8002162:	f002 fc63 	bl	8004a2c <putchar>
	fgcolor(7);
 8002166:	2007      	movs	r0, #7
 8002168:	f7ff fdf0 	bl	8001d4c <fgcolor>
	gotoxy(a.x+3,a.y);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3303      	adds	r3, #3
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7ff fe28 	bl	8001dcc <gotoxy>
	printf("%c",219);
 800217c:	20db      	movs	r0, #219	; 0xdb
 800217e:	f002 fc55 	bl	8004a2c <putchar>
	fgcolor(0);
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fde2 	bl	8001d4c <fgcolor>
	printf("%c",219);
 8002188:	20db      	movs	r0, #219	; 0xdb
 800218a:	f002 fc4f 	bl	8004a2c <putchar>
	fgcolor(7);
 800218e:	2007      	movs	r0, #7
 8002190:	f7ff fddc 	bl	8001d4c <fgcolor>
	gotoxy(a.x-3,a.y-1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b03      	subs	r3, #3
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7ff fe13 	bl	8001dcc <gotoxy>
	printf("%c%c%c",219,219,219);
 80021a6:	23db      	movs	r3, #219	; 0xdb
 80021a8:	22db      	movs	r2, #219	; 0xdb
 80021aa:	21db      	movs	r1, #219	; 0xdb
 80021ac:	4831      	ldr	r0, [pc, #196]	; (8002274 <slideAstroid+0x1c4>)
 80021ae:	f002 fc25 	bl	80049fc <iprintf>
	gotoxy(a.x+2,a.y-1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3302      	adds	r3, #2
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f7ff fe04 	bl	8001dcc <gotoxy>
	printf("%c",219);
 80021c4:	20db      	movs	r0, #219	; 0xdb
 80021c6:	f002 fc31 	bl	8004a2c <putchar>
	fgcolor(0);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fdbe 	bl	8001d4c <fgcolor>
	gotoxy(a.x-4,a.y-1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b04      	subs	r3, #4
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7ff fdf5 	bl	8001dcc <gotoxy>
	printf("%c",219);
 80021e2:	20db      	movs	r0, #219	; 0xdb
 80021e4:	f002 fc22 	bl	8004a2c <putchar>
	fgcolor(7);
 80021e8:	2007      	movs	r0, #7
 80021ea:	f7ff fdaf 	bl	8001d4c <fgcolor>
	gotoxy(a.x,a.y-2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3b02      	subs	r3, #2
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7ff fde7 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 80021fe:	22db      	movs	r2, #219	; 0xdb
 8002200:	21db      	movs	r1, #219	; 0xdb
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <slideAstroid+0x1c0>)
 8002204:	f002 fbfa 	bl	80049fc <iprintf>
	fgcolor(0);
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fd9f 	bl	8001d4c <fgcolor>
	gotoxy(a.x-3,a.y-2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3b03      	subs	r3, #3
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3b02      	subs	r3, #2
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7ff fdd6 	bl	8001dcc <gotoxy>
	printf("%c%c%c",219,219,219);
 8002220:	23db      	movs	r3, #219	; 0xdb
 8002222:	22db      	movs	r2, #219	; 0xdb
 8002224:	21db      	movs	r1, #219	; 0xdb
 8002226:	4813      	ldr	r0, [pc, #76]	; (8002274 <slideAstroid+0x1c4>)
 8002228:	f002 fbe8 	bl	80049fc <iprintf>
	gotoxy(a.x+2,a.y-2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3302      	adds	r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b02      	subs	r3, #2
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7ff fdc7 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 800223e:	22db      	movs	r2, #219	; 0xdb
 8002240:	21db      	movs	r1, #219	; 0xdb
 8002242:	480b      	ldr	r0, [pc, #44]	; (8002270 <slideAstroid+0x1c0>)
 8002244:	f002 fbda 	bl	80049fc <iprintf>
	gotoxy(a.x,a.y-3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3b03      	subs	r3, #3
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f7ff fdba 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 8002258:	22db      	movs	r2, #219	; 0xdb
 800225a:	21db      	movs	r1, #219	; 0xdb
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <slideAstroid+0x1c0>)
 800225e:	f002 fbcd 	bl	80049fc <iprintf>

}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	08005fc0 	.word	0x08005fc0
 8002270:	08005fcc 	.word	0x08005fcc
 8002274:	08005fd4 	.word	0x08005fd4

08002278 <collision>:
#include "collision.h"

void collision(badShip a[], bigRock b[], goodShip *c) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int8_t i;
	for(i = 0; i < 20; i++) {
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
 8002288:	e089      	b.n	800239e <collision+0x126>
		if(a[i].alive==1) {
 800228a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d176      	bne.n	8002392 <collision+0x11a>
			if(a[i].y>=c->y && a[i].x-4 <= c->x+4 && a[i].x+4 >= c->x-4) {
 80022a4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	db68      	blt.n	8002392 <collision+0x11a>
 80022c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1f1a      	subs	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3304      	adds	r3, #4
 80022dc:	429a      	cmp	r2, r3
 80022de:	dc58      	bgt.n	8002392 <collision+0x11a>
 80022e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1d1a      	adds	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3b04      	subs	r3, #4
 80022fc:	429a      	cmp	r2, r3
 80022fe:	db48      	blt.n	8002392 <collision+0x11a>
				enemyRemove(a[i].x,a[i].y);
 8002300:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	461a      	mov	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4619      	mov	r1, r3
 800232a:	f001 ff6d 	bl	8004208 <enemyRemove>
				a[i].x=0;
 800232e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
				a[i].y=0;
 8002344:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
				a[i].alive=0;
 800235a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	2200      	movs	r2, #0
 800236e:	721a      	strb	r2, [r3, #8]
				c->life--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	b25a      	sxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	721a      	strb	r2, [r3, #8]
				playerDraw(c->x,c->y);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f001 fd41 	bl	8003e14 <playerDraw>
	for(i = 0; i < 20; i++) {
 8002392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	75fb      	strb	r3, [r7, #23]
 800239e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023a2:	2b13      	cmp	r3, #19
 80023a4:	f77f af71 	ble.w	800228a <collision+0x12>
			}
		}
	}
	for(i = 0; i < 5; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]
 80023ac:	e08b      	b.n	80024c6 <collision+0x24e>
		if(b[i].alive==1) {
 80023ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d178      	bne.n	80024ba <collision+0x242>
			if(b[i].y+3>=c->y && b[i].x-4 <= c->x+4 && b[i].x+4 >= c->x-4) {
 80023c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	3303      	adds	r3, #3
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6852      	ldr	r2, [r2, #4]
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d369      	bcc.n	80024ba <collision+0x242>
 80023e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3b04      	subs	r3, #4
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	3204      	adds	r2, #4
 8002402:	4293      	cmp	r3, r2
 8002404:	d859      	bhi.n	80024ba <collision+0x242>
 8002406:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3304      	adds	r3, #4
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	3a04      	subs	r2, #4
 8002422:	4293      	cmp	r3, r2
 8002424:	d349      	bcc.n	80024ba <collision+0x242>
				astroidRemove(b[i].x,b[i].y);
 8002426:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4413      	add	r3, r2
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4619      	mov	r1, r3
 8002452:	f002 f80b 	bl	800446c <astroidRemove>
				b[i].x=0;
 8002456:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4413      	add	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
				b[i].y=0;
 800246c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
				b[i].alive=0;
 8002482:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4413      	add	r3, r2
 8002494:	2200      	movs	r2, #0
 8002496:	721a      	strb	r2, [r3, #8]
				c->life--;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	721a      	strb	r2, [r3, #8]
				playerDraw(c->x,c->y);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f001 fcad 	bl	8003e14 <playerDraw>
	for(i = 0; i < 5; i++) {
 80024ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	75fb      	strb	r3, [r7, #23]
 80024c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	f77f af6f 	ble.w	80023ae <collision+0x136>
			}
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <pinConfig>:
#include "config.h"

void pinConfig(void) {
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <pinConfig+0x150>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <pinConfig+0x150>)
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ea:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 80024ec:	4b4f      	ldr	r3, [pc, #316]	; (800262c <pinConfig+0x150>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4a4e      	ldr	r2, [pc, #312]	; (800262c <pinConfig+0x150>)
 80024f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024f6:	6153      	str	r3, [r2, #20]

	//pin A0
	GPIOA->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 80024f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8002508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800250c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8002514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8002524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin A1
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 8002534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800253e:	f023 030c 	bic.w	r3, r3, #12
 8002542:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8002544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002548:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 8002550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800255a:	f023 030c 	bic.w	r3, r3, #12
 800255e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 8002560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C0
	GPIOC->MODER &= ~(0x00000003 << (0 * 2)); 		// Clear mode register
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <pinConfig+0x154>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <pinConfig+0x154>)
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (0 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <pinConfig+0x154>)
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <pinConfig+0x154>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (0 * 2)); 		// Clear push/pull register
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <pinConfig+0x154>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <pinConfig+0x154>)
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (0 * 2)); 		// Set push/pull register (0x00 -
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <pinConfig+0x154>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <pinConfig+0x154>)
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin C1
	GPIOC->MODER &= ~(0x00000003 << (1 * 2)); 		// Clear mode register
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <pinConfig+0x154>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <pinConfig+0x154>)
 80025a2:	f023 030c 	bic.w	r3, r3, #12
 80025a6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (1 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <pinConfig+0x154>)
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <pinConfig+0x154>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (1 * 2)); 		// Clear push/pull register
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <pinConfig+0x154>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <pinConfig+0x154>)
 80025b6:	f023 030c 	bic.w	r3, r3, #12
 80025ba:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (1 * 2)); 		// Set push/pull register (0x00 -
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <pinConfig+0x154>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <pinConfig+0x154>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
	//pin C2
	GPIOC->MODER &= ~(0x00000003 << (2 * 2)); 		// Clear mode register
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <pinConfig+0x154>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a18      	ldr	r2, [pc, #96]	; (8002630 <pinConfig+0x154>)
 80025ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025d2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (2 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <pinConfig+0x154>)
 80025d6:	4a16      	ldr	r2, [pc, #88]	; (8002630 <pinConfig+0x154>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (2 * 2)); 		// Clear push/pull register
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <pinConfig+0x154>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <pinConfig+0x154>)
 80025e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025e6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (2 * 2)); 		// Set push/pull register (0x00 -
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <pinConfig+0x154>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <pinConfig+0x154>)
 80025ee:	f043 0320 	orr.w	r3, r3, #32
 80025f2:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)

	//pin C3
	GPIOC->MODER &= ~(0x00000003 << (3 * 2)); 		// Clear mode register
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <pinConfig+0x154>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <pinConfig+0x154>)
 80025fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (3 * 2)); 		// Set mode register (0x00 – Input, 0x01 - Output, 0x02 -
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <pinConfig+0x154>)
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <pinConfig+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6013      	str	r3, [r2, #0]
											 	 	//Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x00000003 << (3 * 2)); 		// Clear push/pull register
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <pinConfig+0x154>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <pinConfig+0x154>)
 800260e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002612:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x00000002 << (3 * 2)); 		// Set push/pull register (0x00 -
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <pinConfig+0x154>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <pinConfig+0x154>)
 800261a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261e:	60d3      	str	r3, [r2, #12]
											 	 	//No pull, 0x01 - Pull-up, 0x02 - Pull-down)
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	48000800 	.word	0x48000800

08002634 <adcConfig>:

void adcConfig(void) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
	RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <adcConfig+0xd4>)
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	4a32      	ldr	r2, [pc, #200]	; (8002708 <adcConfig+0xd4>)
 8002640:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002644:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <adcConfig+0xd4>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <adcConfig+0xd4>)
 800264c:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8002650:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <adcConfig+0xd4>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <adcConfig+0xd4>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6153      	str	r3, [r2, #20]

	ADC1->CR = 0x00000000; // Clear CR register
 800265e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
	ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 8002666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <adcConfig+0xd8>)
 8002672:	4013      	ands	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
	ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 8002676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 8002686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6093      	str	r3, [r2, #8]
	for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	e002      	b.n	80026a2 <adcConfig+0x6e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a8:	dbf8      	blt.n	800269c <adcConfig+0x68>

	ADC1->CR |= 0x80000000; // Start ADC1 calibration
 80026aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	6093      	str	r3, [r2, #8]
	while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 80026ba:	bf00      	nop
 80026bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dafa      	bge.n	80026bc <adcConfig+0x88>
	for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	e002      	b.n	80026d2 <adcConfig+0x9e>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b63      	cmp	r3, #99	; 0x63
 80026d6:	ddf9      	ble.n	80026cc <adcConfig+0x98>

	ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 80026d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 80026e8:	bf00      	nop
 80026ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f8      	beq.n	80026ea <adcConfig+0xb6>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	fdffc007 	.word	0xfdffc007

08002710 <config>:


void config(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	pinConfig();
 8002714:	f7ff fee2 	bl	80024dc <pinConfig>
	adcConfig();
 8002718:	f7ff ff8c 	bl	8002634 <adcConfig>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <initArrayEnemy>:
#include "enemy.h"

void initArrayEnemy(badShip a[], int8_t length) {
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
	int8_t i;
	for (i=0; i<length;i++){
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e026      	b.n	8002780 <initArrayEnemy+0x60>
		a[i].x = 0;
 8002732:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
		a[i].y = 0;
 8002748:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
		a[i].alive = 0;
 800275e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	721a      	strb	r2, [r3, #8]
	for (i=0; i<length;i++){
 8002774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002788:	429a      	cmp	r2, r3
 800278a:	dbd2      	blt.n	8002732 <initArrayEnemy+0x12>
	}
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <createEnemy>:

void createEnemy(badShip a[]) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	int8_t i;
	for (i=0; i<20; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e095      	b.n	80028d6 <createEnemy+0x13a>
		if (a[i].alive==0) {
 80027aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 8082 	bne.w	80028ca <createEnemy+0x12e>
			ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_1Cycles5);
 80027c6:	2300      	movs	r3, #0
 80027c8:	2201      	movs	r2, #1
 80027ca:	2101      	movs	r1, #1
 80027cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027d0:	f7fd fd56 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 80027d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027d8:	f7fd fe4a 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 80027dc:	bf00      	nop
 80027de:	2104      	movs	r1, #4
 80027e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027e4:	f7fd fe61 	bl	80004aa <ADC_GetFlagStatus>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f7      	beq.n	80027de <createEnemy+0x42>

			uint16_t randSpawn = ADC_GetConversionValue(ADC1);
 80027ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027f2:	f7fd fe4d 	bl	8000490 <ADC_GetConversionValue>
 80027f6:	4603      	mov	r3, r0
 80027f8:	81bb      	strh	r3, [r7, #12]
			ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_1Cycles5);
 80027fa:	2300      	movs	r3, #0
 80027fc:	2201      	movs	r2, #1
 80027fe:	2102      	movs	r1, #2
 8002800:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002804:	f7fd fd3c 	bl	8000280 <ADC_RegularChannelConfig>

			ADC_StartConversion(ADC1); // Start ADC read
 8002808:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800280c:	f7fd fe30 	bl	8000470 <ADC_StartConversion>
			while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0); // Wait for ADC read
 8002810:	bf00      	nop
 8002812:	2104      	movs	r1, #4
 8002814:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002818:	f7fd fe47 	bl	80004aa <ADC_GetFlagStatus>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f7      	beq.n	8002812 <createEnemy+0x76>

			randSpawn += ADC_GetConversionValue(ADC1);
 8002822:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002826:	f7fd fe33 	bl	8000490 <ADC_GetConversionValue>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	81bb      	strh	r3, [r7, #12]
			randSpawn = randSpawn%10;
 8002834:	89ba      	ldrh	r2, [r7, #12]
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <createEnemy+0x150>)
 8002838:	fba3 1302 	umull	r1, r3, r3, r2
 800283c:	08d9      	lsrs	r1, r3, #3
 800283e:	460b      	mov	r3, r1
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	81bb      	strh	r3, [r7, #12]
			a[i].x = 10+randSpawn*13;
 800284a:	89ba      	ldrh	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	1899      	adds	r1, r3, r2
 8002856:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	f101 020a 	add.w	r2, r1, #10
 800286c:	601a      	str	r2, [r3, #0]
			a[i].y = 10;
 800286e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	220a      	movs	r2, #10
 8002882:	605a      	str	r2, [r3, #4]
			a[i].alive=1;
 8002884:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	2201      	movs	r2, #1
 8002898:	721a      	strb	r2, [r3, #8]
			enemyDraw(a[i].x, a[i].y);
 800289a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4619      	mov	r1, r3
 80028c4:	f001 fbd6 	bl	8004074 <enemyDraw>
			break;
 80028c8:	e00b      	b.n	80028e2 <createEnemy+0x146>
	for (i=0; i<20; i++) {
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	2b13      	cmp	r3, #19
 80028dc:	f77f af65 	ble.w	80027aa <createEnemy+0xe>
		}
	}
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	cccccccd 	.word	0xcccccccd

080028f0 <moveEnemy>:

void moveEnemy(badShip a[], goodShip *player) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	int8_t i;
	for(i=0; i<20;i++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e06c      	b.n	80029da <moveEnemy+0xea>
		if(!(a[i].alive==0)) {
 8002900:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d059      	beq.n	80029ce <moveEnemy+0xde>
			if(!((a[i].y)==(123))) {
 800291a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b7b      	cmp	r3, #123	; 0x7b
 8002930:	d022      	beq.n	8002978 <moveEnemy+0x88>
				slideEnemy(a[i]);
 8002932:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	461a      	mov	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002948:	f000 f850 	bl	80029ec <slideEnemy>
				a[i].y = a[i].y+(1);
 800294c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	1c4a      	adds	r2, r1, #1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e02a      	b.n	80029ce <moveEnemy+0xde>
			} else {
				enemyRemove(a[i].x, a[i].y);
 8002978:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f001 fc31 	bl	8004208 <enemyRemove>
				a[i].alive=0;
 80029a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	2200      	movs	r2, #0
 80029ba:	721a      	strb	r2, [r3, #8]
				player->life--;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	b25a      	sxtb	r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	721a      	strb	r2, [r3, #8]
	for(i=0; i<20;i++) {
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	2b13      	cmp	r3, #19
 80029e0:	dd8e      	ble.n	8002900 <moveEnemy+0x10>
			}
		}
	}

}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <slideEnemy>:

void slideEnemy(badShip a) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fgcolor(1);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff f9a7 	bl	8001d4c <fgcolor>
	gotoxy(a.x-3,a.y+1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1eda      	subs	r2, r3, #3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f7ff f9df 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a0e:	20db      	movs	r0, #219	; 0xdb
 8002a10:	f002 f80c 	bl	8004a2c <putchar>
	gotoxy(a.x+3,a.y+1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	1cda      	adds	r2, r3, #3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff f9d4 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a24:	20db      	movs	r0, #219	; 0xdb
 8002a26:	f002 f801 	bl	8004a2c <putchar>
	gotoxy(a.x-1,a.y-1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f7ff f9c9 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a3a:	20db      	movs	r0, #219	; 0xdb
 8002a3c:	f001 fff6 	bl	8004a2c <putchar>
	gotoxy(a.x+1,a.y-1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff f9be 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a50:	20db      	movs	r0, #219	; 0xdb
 8002a52:	f001 ffeb 	bl	8004a2c <putchar>
	gotoxy(a.x-2,a.y-2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1e9a      	subs	r2, r3, #2
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3b02      	subs	r3, #2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7ff f9b3 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a66:	20db      	movs	r0, #219	; 0xdb
 8002a68:	f001 ffe0 	bl	8004a2c <putchar>
	gotoxy(a.x,a.y-2);
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3b02      	subs	r3, #2
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7ff f9a9 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a7a:	20db      	movs	r0, #219	; 0xdb
 8002a7c:	f001 ffd6 	bl	8004a2c <putchar>
	gotoxy(a.x+2,a.y-2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1c9a      	adds	r2, r3, #2
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3b02      	subs	r3, #2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7ff f99e 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002a90:	20db      	movs	r0, #219	; 0xdb
 8002a92:	f001 ffcb 	bl	8004a2c <putchar>
	fgcolor(11);
 8002a96:	200b      	movs	r0, #11
 8002a98:	f7ff f958 	bl	8001d4c <fgcolor>
	gotoxy(a.x-1,a.y-3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3b03      	subs	r3, #3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7ff f990 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002aac:	20db      	movs	r0, #219	; 0xdb
 8002aae:	f001 ffbd 	bl	8004a2c <putchar>
	gotoxy(a.x+1,a.y-3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7ff f985 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002ac2:	20db      	movs	r0, #219	; 0xdb
 8002ac4:	f001 ffb2 	bl	8004a2c <putchar>
	gotoxy(a.x,a.y-4);
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b04      	subs	r3, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7ff f97b 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002ad6:	20db      	movs	r0, #219	; 0xdb
 8002ad8:	f001 ffa8 	bl	8004a2c <putchar>
	fgcolor(1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7ff f935 	bl	8001d4c <fgcolor>
	gotoxy(a.x-1,a.y-4);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3b04      	subs	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f7ff f96d 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002af2:	20db      	movs	r0, #219	; 0xdb
 8002af4:	f001 ff9a 	bl	8004a2c <putchar>
	gotoxy(a.x+1,a.y-4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3b04      	subs	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff f962 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b08:	20db      	movs	r0, #219	; 0xdb
 8002b0a:	f001 ff8f 	bl	8004a2c <putchar>
	fgcolor(0);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7ff f91c 	bl	8001d4c <fgcolor>
	gotoxy(a.x-3,a.y-4);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1eda      	subs	r2, r3, #3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f7ff f954 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b24:	20db      	movs	r0, #219	; 0xdb
 8002b26:	f001 ff81 	bl	8004a2c <putchar>
	gotoxy(a.x+3,a.y-4);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1cda      	adds	r2, r3, #3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b04      	subs	r3, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7ff f949 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b3a:	20db      	movs	r0, #219	; 0xdb
 8002b3c:	f001 ff76 	bl	8004a2c <putchar>
	fgcolor(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff f903 	bl	8001d4c <fgcolor>
	gotoxy(a.x-3,a.y-5);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1eda      	subs	r2, r3, #3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b05      	subs	r3, #5
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f7ff f93b 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b56:	20db      	movs	r0, #219	; 0xdb
 8002b58:	f001 ff68 	bl	8004a2c <putchar>
	gotoxy(a.x,a.y-5);
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b05      	subs	r3, #5
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff f931 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b6a:	20db      	movs	r0, #219	; 0xdb
 8002b6c:	f001 ff5e 	bl	8004a2c <putchar>
	gotoxy(a.x+3,a.y-5);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1cda      	adds	r2, r3, #3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3b05      	subs	r3, #5
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff f926 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b80:	20db      	movs	r0, #219	; 0xdb
 8002b82:	f001 ff53 	bl	8004a2c <putchar>
	fgcolor(0);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff f8e0 	bl	8001d4c <fgcolor>
	gotoxy(a.x-1,a.y-5);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3b05      	subs	r3, #5
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff f918 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002b9c:	20db      	movs	r0, #219	; 0xdb
 8002b9e:	f001 ff45 	bl	8004a2c <putchar>
	gotoxy(a.x+1,a.y-5);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7ff f90d 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002bb2:	20db      	movs	r0, #219	; 0xdb
 8002bb4:	f001 ff3a 	bl	8004a2c <putchar>
	fgcolor(1);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7ff f8c7 	bl	8001d4c <fgcolor>
	gotoxy(a.x-4,a.y-6);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1f1a      	subs	r2, r3, #4
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b06      	subs	r3, #6
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7ff f8ff 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002bce:	20db      	movs	r0, #219	; 0xdb
 8002bd0:	f001 ff2c 	bl	8004a2c <putchar>
	gotoxy(a.x+4,a.y-6);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3b06      	subs	r3, #6
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f7ff f8f4 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002be4:	20db      	movs	r0, #219	; 0xdb
 8002be6:	f001 ff21 	bl	8004a2c <putchar>
	fgcolor(0);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7ff f8ae 	bl	8001d4c <fgcolor>
	gotoxy(a.x-2,a.y-6);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1e9a      	subs	r2, r3, #2
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3b06      	subs	r3, #6
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7ff f8e6 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c00:	20db      	movs	r0, #219	; 0xdb
 8002c02:	f001 ff13 	bl	8004a2c <putchar>
	gotoxy(a.x,a.y-6);
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3b06      	subs	r3, #6
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7ff f8dc 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c14:	20db      	movs	r0, #219	; 0xdb
 8002c16:	f001 ff09 	bl	8004a2c <putchar>
	gotoxy(a.x+2,a.y-6);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b06      	subs	r3, #6
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7ff f8d1 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c2a:	20db      	movs	r0, #219	; 0xdb
 8002c2c:	f001 fefe 	bl	8004a2c <putchar>
	gotoxy(a.x-3,a.y-7);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1eda      	subs	r2, r3, #3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	3b07      	subs	r3, #7
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7ff f8c6 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c40:	20db      	movs	r0, #219	; 0xdb
 8002c42:	f001 fef3 	bl	8004a2c <putchar>
	gotoxy(a.x+3,a.y-7);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1cda      	adds	r2, r3, #3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3b07      	subs	r3, #7
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f7ff f8bb 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c56:	20db      	movs	r0, #219	; 0xdb
 8002c58:	f001 fee8 	bl	8004a2c <putchar>
	gotoxy(a.x-4,a.y-8);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1f1a      	subs	r2, r3, #4
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3b08      	subs	r3, #8
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7ff f8b0 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c6c:	20db      	movs	r0, #219	; 0xdb
 8002c6e:	f001 fedd 	bl	8004a2c <putchar>
	gotoxy(a.x+4,a.y-8);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1d1a      	adds	r2, r3, #4
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3b08      	subs	r3, #8
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7ff f8a5 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8002c82:	20db      	movs	r0, #219	; 0xdb
 8002c84:	f001 fed2 	bl	8004a2c <putchar>
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <makeBoard>:
		printf("%c",196);
	}
	printf("%c",217);
}

void makeBoard(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	int32_t i;
	int32_t j;
	fgcolor(3);
 8002c96:	2003      	movs	r0, #3
 8002c98:	f7ff f858 	bl	8001d4c <fgcolor>
	gotoxy(1,1);
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7ff f894 	bl	8001dcc <gotoxy>
	printf("%c",218);
 8002ca4:	20da      	movs	r0, #218	; 0xda
 8002ca6:	f001 fec1 	bl	8004a2c <putchar>
	for(i = 0; i <= 134; i++) {
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	e005      	b.n	8002cbc <makeBoard+0x2c>
		printf("%c",196);
 8002cb0:	20c4      	movs	r0, #196	; 0xc4
 8002cb2:	f001 febb 	bl	8004a2c <putchar>
	for(i = 0; i <= 134; i++) {
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b86      	cmp	r3, #134	; 0x86
 8002cc0:	ddf6      	ble.n	8002cb0 <makeBoard+0x20>
	}
	printf("%c",191);
 8002cc2:	20bf      	movs	r0, #191	; 0xbf
 8002cc4:	f001 feb2 	bl	8004a2c <putchar>
	for(i = 2; i <= 123; i++) {
 8002cc8:	2302      	movs	r3, #2
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	e018      	b.n	8002d00 <makeBoard+0x70>
		gotoxy(1,i);
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f7ff f87b 	bl	8001dcc <gotoxy>
		printf("%c",179);
 8002cd6:	20b3      	movs	r0, #179	; 0xb3
 8002cd8:	f001 fea8 	bl	8004a2c <putchar>
		for(j = 0; j <= 134; j++) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	e005      	b.n	8002cee <makeBoard+0x5e>
			printf(" ");
 8002ce2:	2020      	movs	r0, #32
 8002ce4:	f001 fea2 	bl	8004a2c <putchar>
		for(j = 0; j <= 134; j++) {
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b86      	cmp	r3, #134	; 0x86
 8002cf2:	ddf6      	ble.n	8002ce2 <makeBoard+0x52>
		}
		printf("%c",179);
 8002cf4:	20b3      	movs	r0, #179	; 0xb3
 8002cf6:	f001 fe99 	bl	8004a2c <putchar>
	for(i = 2; i <= 123; i++) {
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b7b      	cmp	r3, #123	; 0x7b
 8002d04:	dde3      	ble.n	8002cce <makeBoard+0x3e>
	}
	gotoxy(1,124);
 8002d06:	217c      	movs	r1, #124	; 0x7c
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff f85f 	bl	8001dcc <gotoxy>
	printf("%c",192);
 8002d0e:	20c0      	movs	r0, #192	; 0xc0
 8002d10:	f001 fe8c 	bl	8004a2c <putchar>
	for(i = 0; i <= 134; i++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	e005      	b.n	8002d26 <makeBoard+0x96>
		printf("%c",196);
 8002d1a:	20c4      	movs	r0, #196	; 0xc4
 8002d1c:	f001 fe86 	bl	8004a2c <putchar>
	for(i = 0; i <= 134; i++) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3301      	adds	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b86      	cmp	r3, #134	; 0x86
 8002d2a:	ddf6      	ble.n	8002d1a <makeBoard+0x8a>
	}
	printf("%c",217);
 8002d2c:	20d9      	movs	r0, #217	; 0xd9
 8002d2e:	f001 fe7d 	bl	8004a2c <putchar>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <createScoreLCD>:
#include "lcd.h"

void createScoreLCD(int16_t score, int8_t buffer[], int8_t hs){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	80fb      	strh	r3, [r7, #6]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	717b      	strb	r3, [r7, #5]
	char scoreLCD [17];
	if (hs == 1){
 8002d4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10f      	bne.n	8002d74 <createScoreLCD+0x38>
		sprintf(scoreLCD, "Highscore: %05d",score);
 8002d54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	4910      	ldr	r1, [pc, #64]	; (8002da0 <createScoreLCD+0x64>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 ff48 	bl	8004bf4 <siprintf>
		lcd_write_string(scoreLCD, buffer,128);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f8d7 	bl	8002f20 <lcd_write_string>
 8002d72:	e00e      	b.n	8002d92 <createScoreLCD+0x56>
	}else {
		sprintf(scoreLCD, "Score: %05d",score);
 8002d74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4909      	ldr	r1, [pc, #36]	; (8002da4 <createScoreLCD+0x68>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 ff38 	bl	8004bf4 <siprintf>
		lcd_write_string(scoreLCD, buffer,0);
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6839      	ldr	r1, [r7, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f8c7 	bl	8002f20 <lcd_write_string>
	}
	lcd_push_buffer(buffer);
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f7fd fffc 	bl	8000d90 <lcd_push_buffer>
}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08005fdc 	.word	0x08005fdc
 8002da4:	08005fec 	.word	0x08005fec

08002da8 <lcd_write_level>:

void lcd_write_level(int8_t level, int8_t buffer[]){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
	char levelLCD [7] = {'L','e','v','e','l',':'};
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <lcd_write_level+0x5c>)
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbe:	6018      	str	r0, [r3, #0]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	8019      	strh	r1, [r3, #0]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	0c0a      	lsrs	r2, r1, #16
 8002dc8:	701a      	strb	r2, [r3, #0]
	char niveauLCD [3];
	lcd_write_string(levelLCD, buffer, 98);
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	2262      	movs	r2, #98	; 0x62
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f8a4 	bl	8002f20 <lcd_write_string>
	sprintf(niveauLCD, "%02d",level);
 8002dd8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002ddc:	f107 030c 	add.w	r3, r7, #12
 8002de0:	4909      	ldr	r1, [pc, #36]	; (8002e08 <lcd_write_level+0x60>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 ff06 	bl	8004bf4 <siprintf>
	lcd_write_string(niveauLCD, buffer, 246);
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	22f6      	movs	r2, #246	; 0xf6
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f895 	bl	8002f20 <lcd_write_string>
	lcd_push_buffer(buffer);
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f7fd ffca 	bl	8000d90 <lcd_push_buffer>

}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	08006000 	.word	0x08006000
 8002e08:	08005ff8 	.word	0x08005ff8

08002e0c <lcd_write_missil>:

void lcd_write_missil(int8_t buffer[], int8_t create, int16_t position){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	803b      	strh	r3, [r7, #0]
	char mi [8] = {'M','i','s','s','i','l',':','\0'};
 8002e1c:	4a3e      	ldr	r2, [pc, #248]	; (8002f18 <lcd_write_missil+0x10c>)
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e26:	e883 0003 	stmia.w	r3, {r0, r1}
	int16_t sted = 475;
 8002e2a:	f240 13db 	movw	r3, #475	; 0x1db
 8002e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (create == 1){
 8002e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d12b      	bne.n	8002e90 <lcd_write_missil+0x84>
		lcd_write_string(mi,buffer,349);
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	f240 125d 	movw	r2, #349	; 0x15d
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f86c 	bl	8002f20 <lcd_write_string>
		for (int j = 0; j<4; j++){
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	e01c      	b.n	8002e88 <lcd_write_missil+0x7c>
			for(int i = 0; i<9 ;i++){
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e013      	b.n	8002e7c <lcd_write_missil+0x70>
				buffer[sted]=customset[6][i];
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <lcd_write_missil+0x110>)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3336      	adds	r3, #54	; 0x36
 8002e5c:	7819      	ldrb	r1, [r3, #0]
 8002e5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	b24a      	sxtb	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
				sted++;
 8002e6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	84fb      	strh	r3, [r7, #38]	; 0x26
			for(int i = 0; i<9 ;i++){
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	dde8      	ble.n	8002e54 <lcd_write_missil+0x48>
		for (int j = 0; j<4; j++){
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	3301      	adds	r3, #1
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	dddf      	ble.n	8002e4e <lcd_write_missil+0x42>
 8002e8e:	e03b      	b.n	8002f08 <lcd_write_missil+0xfc>
			}
		}

	}else if(create == 2){
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d127      	bne.n	8002ee8 <lcd_write_missil+0xdc>
		for (int j = 2; j<6; j++){
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e020      	b.n	8002ee0 <lcd_write_missil+0xd4>
			for(int i = 0; i<9 ;i++){
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e017      	b.n	8002ed4 <lcd_write_missil+0xc8>
				buffer[sted]=customset[j][i];
 8002ea4:	491d      	ldr	r1, [pc, #116]	; (8002f1c <lcd_write_missil+0x110>)
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	18ca      	adds	r2, r1, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	7819      	ldrb	r1, [r3, #0]
 8002eb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b24a      	sxtb	r2, r1
 8002ec0:	701a      	strb	r2, [r3, #0]
				sted++;
 8002ec2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
			for(int i = 0; i<9 ;i++){
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	dde4      	ble.n	8002ea4 <lcd_write_missil+0x98>
		for (int j = 2; j<6; j++){
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	dddb      	ble.n	8002e9e <lcd_write_missil+0x92>
 8002ee6:	e00f      	b.n	8002f08 <lcd_write_missil+0xfc>
			}
		}

	}else if (create == 3){
 8002ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d10b      	bne.n	8002f08 <lcd_write_missil+0xfc>
		buffer[position] = 0xFF;
 8002ef0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	701a      	strb	r2, [r3, #0]
		position++;
 8002efc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	803b      	strh	r3, [r7, #0]
	}
	lcd_push_buffer(buffer);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd ff41 	bl	8000d90 <lcd_push_buffer>
}
 8002f0e:	bf00      	nop
 8002f10:	3728      	adds	r7, #40	; 0x28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08006008 	.word	0x08006008
 8002f1c:	080062dc 	.word	0x080062dc

08002f20 <lcd_write_string>:

void lcd_write_string(char string[], int8_t buffer[], int16_t position){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
	int8_t n = strlen(string);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fd f94e 	bl	80001d0 <strlen>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]
	for (int j = 0; j < n; j++){
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e025      	b.n	8002f8a <lcd_write_string+0x6a>
		for (int i = 0; i<5;i++){
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e01c      	b.n	8002f7e <lcd_write_string+0x5e>
			buffer[position]=character_data[string[j]-0x20][i];
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f1a3 0220 	sub.w	r2, r3, #32
 8002f50:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <lcd_write_string+0x84>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	18ca      	adds	r2, r1, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	7819      	ldrb	r1, [r3, #0]
 8002f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	4413      	add	r3, r2
 8002f68:	b24a      	sxtb	r2, r1
 8002f6a:	701a      	strb	r2, [r3, #0]
			position++;
 8002f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i<5;i++){
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	dddf      	ble.n	8002f44 <lcd_write_string+0x24>
	for (int j = 0; j < n; j++){
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dbd4      	blt.n	8002f3e <lcd_write_string+0x1e>
		}
	}
	lcd_push_buffer(buffer);
 8002f94:	68b8      	ldr	r0, [r7, #8]
 8002f96:	f7fd fefb 	bl	8000d90 <lcd_push_buffer>
}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08006100 	.word	0x08006100

08002fa8 <lcd_write_heart>:

void lcd_write_heart(int8_t filled,int8_t antal, int8_t buffer[], int16_t position){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	603a      	str	r2, [r7, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	71bb      	strb	r3, [r7, #6]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80bb      	strh	r3, [r7, #4]
	char space[2] = {' ', '\0'};
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	81bb      	strh	r3, [r7, #12]
	if (filled == 1){
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d132      	bne.n	8003030 <lcd_write_heart+0x88>
		for (int j = 0; j<antal; j++){
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e029      	b.n	8003024 <lcd_write_heart+0x7c>
			for(int i = 0; i<9 ;i++){
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e012      	b.n	8002ffc <lcd_write_heart+0x54>
				buffer[position]=customset[0][i];
 8002fd6:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <lcd_write_heart+0xfc>)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	4413      	add	r3, r2
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b24a      	sxtb	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]
				position++;
 8002fea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	80bb      	strh	r3, [r7, #4]
			for(int i = 0; i<9 ;i++){
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	dde9      	ble.n	8002fd6 <lcd_write_heart+0x2e>
			}
			lcd_write_string(space,buffer,position);
 8003002:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff87 	bl	8002f20 <lcd_write_string>
			position++;
 8003012:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003016:	b29b      	uxth	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	80bb      	strh	r3, [r7, #4]
		for (int j = 0; j<antal; j++){
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	429a      	cmp	r2, r3
 800302c:	dbd0      	blt.n	8002fd0 <lcd_write_heart+0x28>
 800302e:	e032      	b.n	8003096 <lcd_write_heart+0xee>
		}
	} else{
		for (int j = 0; j<antal; j++){
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e02a      	b.n	800308c <lcd_write_heart+0xe4>
			for(int i = 0; i<9 ;i++){
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e013      	b.n	8003064 <lcd_write_heart+0xbc>
				buffer[position]=customset[1][i];
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <lcd_write_heart+0xfc>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	3309      	adds	r3, #9
 8003044:	7819      	ldrb	r1, [r3, #0]
 8003046:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	b24a      	sxtb	r2, r1
 8003050:	701a      	strb	r2, [r3, #0]
				position++;
 8003052:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003056:	b29b      	uxth	r3, r3
 8003058:	3301      	adds	r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	80bb      	strh	r3, [r7, #4]
			for(int i = 0; i<9 ;i++){
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b08      	cmp	r3, #8
 8003068:	dde8      	ble.n	800303c <lcd_write_heart+0x94>
			}
			lcd_write_string(space,buffer,position);
 800306a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff53 	bl	8002f20 <lcd_write_string>
			position++;
 800307a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	80bb      	strh	r3, [r7, #4]
		for (int j = 0; j<antal; j++){
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	429a      	cmp	r2, r3
 8003094:	dbcf      	blt.n	8003036 <lcd_write_heart+0x8e>
		}

	}
	lcd_push_buffer(buffer);
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f7fd fe7a 	bl	8000d90 <lcd_push_buffer>

}
 800309c:	bf00      	nop
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	080062dc 	.word	0x080062dc

080030a8 <TIM1_BRK_TIM15_IRQHandler>:

//Initialicering af Programmer Start



void TIM1_BRK_TIM15_IRQHandler(void) {
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
	c1=c1+(1<<8);
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80030b6:	6013      	str	r3, [r2, #0]
	c2=c2+(1<<8);
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80030c2:	6013      	str	r3, [r2, #0]
	c3=c3+(1<<8);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030cc:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80030ce:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001; //s Clear interrupt bit
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6113      	str	r3, [r2, #16]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	200000bc 	.word	0x200000bc
 80030ec:	200000c0 	.word	0x200000c0
 80030f0:	200000c4 	.word	0x200000c4
 80030f4:	40014000 	.word	0x40014000

080030f8 <main>:


//Initialicering af Programmer Slut


int main(void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f6ad 1d98 	subw	sp, sp, #2456	; 0x998
 80030fe:	af04      	add	r7, sp, #16
	//Initialicering af forbindelse
	uart_init(500000);
 8003100:	48cb      	ldr	r0, [pc, #812]	; (8003430 <main+0x338>)
 8003102:	f7fd fcf9 	bl	8000af8 <uart_init>
	int8_t timeOut = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
	int8_t aSpawn = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3986 	strb.w	r3, [r7, #2438]	; 0x986
	lcd_init();
 8003112:	f7fd ff71 	bl	8000ff8 <lcd_init>
//	int32_t i;
	int8_t buffer[512];
	memset(buffer,0x00,512);
 8003116:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800311a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f001 fc63 	bl	80049ec <memset>
	createScoreLCD(score,buffer, 0);
 8003126:	4bc3      	ldr	r3, [pc, #780]	; (8003434 <main+0x33c>)
 8003128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312c:	4618      	mov	r0, r3
 800312e:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003132:	2200      	movs	r2, #0
 8003134:	4619      	mov	r1, r3
 8003136:	f7ff fe01 	bl	8002d3c <createScoreLCD>
	createScoreLCD(score,buffer, 1);
 800313a:	4bbe      	ldr	r3, [pc, #760]	; (8003434 <main+0x33c>)
 800313c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003140:	4618      	mov	r0, r3
 8003142:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003146:	2201      	movs	r2, #1
 8003148:	4619      	mov	r1, r3
 800314a:	f7ff fdf7 	bl	8002d3c <createScoreLCD>
	char lives[7] = {'L','i','v','e','s',':','\0'};
 800314e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003152:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003156:	4ab8      	ldr	r2, [pc, #736]	; (8003438 <main+0x340>)
 8003158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800315c:	6018      	str	r0, [r3, #0]
 800315e:	3304      	adds	r3, #4
 8003160:	8019      	strh	r1, [r3, #0]
 8003162:	3302      	adds	r3, #2
 8003164:	0c0a      	lsrs	r2, r1, #16
 8003166:	701a      	strb	r2, [r3, #0]
	lcd_write_string(lives, buffer,2*128);
 8003168:	f207 7184 	addw	r1, r7, #1924	; 0x784
 800316c:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 8003170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fed3 	bl	8002f20 <lcd_write_string>
	lcd_write_heart(1,3,buffer,3*128);
 800317a:	f207 7284 	addw	r2, r7, #1924	; 0x784
 800317e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003182:	2103      	movs	r1, #3
 8003184:	2001      	movs	r0, #1
 8003186:	f7ff ff0f 	bl	8002fa8 <lcd_write_heart>
	lcd_write_missil(buffer,1,position);
 800318a:	4bac      	ldr	r3, [pc, #688]	; (800343c <main+0x344>)
 800318c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003190:	461a      	mov	r2, r3
 8003192:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fe37 	bl	8002e0c <lcd_write_missil>
//	lcd_push_buffer(buffer);
	color(15,0);
 800319e:	2100      	movs	r1, #0
 80031a0:	200f      	movs	r0, #15
 80031a2:	f7fe fdef 	bl	8001d84 <color>
	//Initialicering af Programmer i main Start
	config();
 80031a6:	f7ff fab3 	bl	8002710 <config>
	clockInit();
 80031aa:	f001 fb1f 	bl	80047ec <clockInit>
	//BuzzConfig();
	makeBoard();
 80031ae:	f7ff fd6f 	bl	8002c90 <makeBoard>
	goodShip player;
	createPlayer(&player);
 80031b2:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f986 	bl	80034c8 <createPlayer>
	badShip enemyA[20];
	initArrayEnemy(enemyA, 20);
 80031bc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80031c0:	2114      	movs	r1, #20
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff faac 	bl	8002720 <initArrayEnemy>
	bullet bulletE[50];
	bullet bulletF[50];
	initArrayBullets(bulletE, 50);
 80031c8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80031cc:	2132      	movs	r1, #50	; 0x32
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe f86e 	bl	80012b0 <initArrayBullets>
	initArrayBullets(bulletF, 50);
 80031d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031d8:	2132      	movs	r1, #50	; 0x32
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe f868 	bl	80012b0 <initArrayBullets>
	bigRock astroidA[5];
	initArrayAstroid(astroidA, 5);
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2105      	movs	r1, #5
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fe03 	bl	8001df0 <initArrayAstroid>
//	moveAstroid(&astroidA);
	//Hentning af Statisk info Slut

	//Klad af funktioner
	while(1){
		int8_t button = buttonRead();
 80031ea:	f7fe fd81 	bl	8001cf0 <buttonRead>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3985 	strb.w	r3, [r7, #2437]	; 0x985
		int8_t joystickWay = adcRead();
 80031f4:	f7fe fd4d 	bl	8001c92 <adcRead>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 3984 	strb.w	r3, [r7, #2436]	; 0x984
		clockCounter(score, &c1, &c2, &c3, &flagF, &flagE, &flagR,&level);
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <main+0x33c>)
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	4618      	mov	r0, r3
 8003206:	4b8e      	ldr	r3, [pc, #568]	; (8003440 <main+0x348>)
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	4b8e      	ldr	r3, [pc, #568]	; (8003444 <main+0x34c>)
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <main+0x350>)
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <main+0x354>)
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <main+0x358>)
 8003218:	4a8e      	ldr	r2, [pc, #568]	; (8003454 <main+0x35c>)
 800321a:	498f      	ldr	r1, [pc, #572]	; (8003458 <main+0x360>)
 800321c:	f001 fb14 	bl	8004848 <clockCounter>
		lcd_write_level(level,buffer);
 8003220:	4b87      	ldr	r3, [pc, #540]	; (8003440 <main+0x348>)
 8003222:	f993 3000 	ldrsb.w	r3, [r3]
 8003226:	461a      	mov	r2, r3
 8003228:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7ff fdba 	bl	8002da8 <lcd_write_level>
		//Hentning af kontinuerlig info Start
		if (flagF == 1){
 8003234:	4b85      	ldr	r3, [pc, #532]	; (800344c <main+0x354>)
 8003236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800323a:	2b01      	cmp	r3, #1
 800323c:	f040 8082 	bne.w	8003344 <main+0x24c>
			movePlayer(&player, joystickWay);
 8003240:	f997 2984 	ldrsb.w	r2, [r7, #2436]	; 0x984
 8003244:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f951 	bl	80034f2 <movePlayer>
			if(button==1) {
 8003250:	f997 3985 	ldrsb.w	r3, [r7, #2437]	; 0x985
 8003254:	2b01      	cmp	r3, #1
 8003256:	d11e      	bne.n	8003296 <main+0x19e>
				if(timeOut==0) {
 8003258:	f997 3987 	ldrsb.w	r3, [r7, #2439]	; 0x987
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11a      	bne.n	8003296 <main+0x19e>
					bulletSpaceship(player.x, player.y-1, bulletF);
 8003260:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003264:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b218      	sxth	r0, r3
 800326c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003270:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29b      	uxth	r3, r3
 800327c:	b21b      	sxth	r3, r3
 800327e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003282:	4619      	mov	r1, r3
 8003284:	f7fe f85a 	bl	800133c <bulletSpaceship>
					timeOut++;
 8003288:	f997 3987 	ldrsb.w	r3, [r7, #2439]	; 0x987
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
				}
			}
			if(timeOut>0 && timeOut<7) {
 8003296:	f997 3987 	ldrsb.w	r3, [r7, #2439]	; 0x987
 800329a:	2b00      	cmp	r3, #0
 800329c:	dd0b      	ble.n	80032b6 <main+0x1be>
 800329e:	f997 3987 	ldrsb.w	r3, [r7, #2439]	; 0x987
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	dc07      	bgt.n	80032b6 <main+0x1be>
				timeOut++;
 80032a6:	f997 3987 	ldrsb.w	r3, [r7, #2439]	; 0x987
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
 80032b4:	e002      	b.n	80032bc <main+0x1c4>
			} else {
				timeOut=0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
			}
			updateBulletFriendly(bulletF);
 80032bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe f918 	bl	80014f6 <updateBulletFriendly>
			updateBulletEnemy(bulletE);
 80032c6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe f9bb 	bl	8001646 <updateBulletEnemy>
			score = bulletHitEnemy(bulletF, enemyA, score);
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <main+0x33c>)
 80032d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 80032dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fa74 	bl	80017ce <bulletHitEnemy>
 80032e6:	4603      	mov	r3, r0
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <main+0x33c>)
 80032ec:	801a      	strh	r2, [r3, #0]
			createScoreLCD(score,buffer, 0);
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <main+0x33c>)
 80032f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80032fa:	2200      	movs	r2, #0
 80032fc:	4619      	mov	r1, r3
 80032fe:	f7ff fd1d 	bl	8002d3c <createScoreLCD>
			bulletHitPlayer(bulletE, &player);
 8003302:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 8003306:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fb6e 	bl	80019ee <bulletHitPlayer>
			bulletHitAstroid(bulletE, astroidA);
 8003312:	1d3a      	adds	r2, r7, #4
 8003314:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fbe4 	bl	8001ae8 <bulletHitAstroid>
			bulletHitAstroid(bulletF, astroidA);
 8003320:	1d3a      	adds	r2, r7, #4
 8003322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fbdd 	bl	8001ae8 <bulletHitAstroid>
			collision(enemyA, astroidA, &player);
 800332e:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 8003332:	1d39      	adds	r1, r7, #4
 8003334:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ff9d 	bl	8002278 <collision>
			flagF = 0;
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <main+0x354>)
 8003340:	2200      	movs	r2, #0
 8003342:	801a      	strh	r2, [r3, #0]
		}
		if (flagE == 1){
 8003344:	4b40      	ldr	r3, [pc, #256]	; (8003448 <main+0x350>)
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10e      	bne.n	800336c <main+0x274>
			moveEnemy(enemyA, &player);
 800334e:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 8003352:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fac9 	bl	80028f0 <moveEnemy>
			moveAstroid(astroidA);
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fe2f 	bl	8001fc4 <moveAstroid>
			flagE = 0;
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <main+0x350>)
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
		}
		if (flagR == 1) {
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <main+0x34c>)
 800336e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d12b      	bne.n	80033ce <main+0x2d6>
			bulletEnemy(enemyA, bulletE);
 8003376:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800337a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f835 	bl	80013f0 <bulletEnemy>
			if(aSpawn < 4) {
 8003386:	f997 3986 	ldrsb.w	r3, [r7, #2438]	; 0x986
 800338a:	2b03      	cmp	r3, #3
 800338c:	dc10      	bgt.n	80033b0 <main+0x2b8>
				createAstroid(astroidA);
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fd6b 	bl	8001e6c <createAstroid>
				createEnemy(enemyA);
 8003396:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f9fe 	bl	800279c <createEnemy>
				aSpawn++;
 80033a0:	f997 3986 	ldrsb.w	r3, [r7, #2438]	; 0x986
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f887 3986 	strb.w	r3, [r7, #2438]	; 0x986
 80033ae:	e006      	b.n	80033be <main+0x2c6>
			} else {
				createAstroid(astroidA);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fd5a 	bl	8001e6c <createAstroid>
				aSpawn=0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3986 	strb.w	r3, [r7, #2438]	; 0x986
			}
			createEnemy(enemyA);
 80033be:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f9ea 	bl	800279c <createEnemy>
			flagR = 0;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <main+0x34c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	801a      	strh	r2, [r3, #0]
		}
		if(player.life==0) {
 80033ce:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80033d2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80033d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d140      	bne.n	8003460 <main+0x368>
			if (score > highScore){
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <main+0x33c>)
 80033e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <main+0x364>)
 80033e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	dd09      	ble.n	8003402 <main+0x30a>
				createScoreLCD(score,buffer, 0);
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <main+0x33c>)
 80033f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80033fa:	2200      	movs	r2, #0
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7ff fc9d 	bl	8002d3c <createScoreLCD>
			}
			lcd_write_heart(0,3,buffer,384);
 8003402:	f207 7284 	addw	r2, r7, #1924	; 0x784
 8003406:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800340a:	2103      	movs	r1, #3
 800340c:	2000      	movs	r0, #0
 800340e:	f7ff fdcb 	bl	8002fa8 <lcd_write_heart>
			playerRemove(player.x,player.y);
 8003412:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003416:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003420:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f000 fdb5 	bl	8003f98 <playerRemove>
			while(1) {}
 800342e:	e7fe      	b.n	800342e <main+0x336>
 8003430:	0007a120 	.word	0x0007a120
 8003434:	200000c8 	.word	0x200000c8
 8003438:	08006014 	.word	0x08006014
 800343c:	2000002a 	.word	0x2000002a
 8003440:	200000cc 	.word	0x200000cc
 8003444:	200000b8 	.word	0x200000b8
 8003448:	200000b6 	.word	0x200000b6
 800344c:	200000b4 	.word	0x200000b4
 8003450:	200000c4 	.word	0x200000c4
 8003454:	200000c0 	.word	0x200000c0
 8003458:	200000bc 	.word	0x200000bc
 800345c:	200000ca 	.word	0x200000ca
		}
		if(player.life==1){
 8003460:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003464:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003468:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <main+0x388>
			lcd_write_heart(0,2,buffer,394);
 8003470:	f207 7284 	addw	r2, r7, #1924	; 0x784
 8003474:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8003478:	2102      	movs	r1, #2
 800347a:	2000      	movs	r0, #0
 800347c:	f7ff fd94 	bl	8002fa8 <lcd_write_heart>
		}
		if(player.life==2){
 8003480:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003484:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8003488:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d107      	bne.n	80034a0 <main+0x3a8>
			lcd_write_heart(0,1,buffer,404);
 8003490:	f207 7284 	addw	r2, r7, #1924	; 0x784
 8003494:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003498:	2101      	movs	r1, #1
 800349a:	2000      	movs	r0, #0
 800349c:	f7ff fd84 	bl	8002fa8 <lcd_write_heart>
		}

		fgcolor(15);
 80034a0:	200f      	movs	r0, #15
 80034a2:	f7fe fc53 	bl	8001d4c <fgcolor>
		gotoxy(3,2);
 80034a6:	2102      	movs	r1, #2
 80034a8:	2003      	movs	r0, #3
 80034aa:	f7fe fc8f 	bl	8001dcc <gotoxy>
		printf("%d",score);
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <main+0x3c8>)
 80034b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b4:	4619      	mov	r1, r3
 80034b6:	4803      	ldr	r0, [pc, #12]	; (80034c4 <main+0x3cc>)
 80034b8:	f001 faa0 	bl	80049fc <iprintf>
	while(1){
 80034bc:	e695      	b.n	80031ea <main+0xf2>
 80034be:	bf00      	nop
 80034c0:	200000c8 	.word	0x200000c8
 80034c4:	08006010 	.word	0x08006010

080034c8 <createPlayer>:
#include "player.h"

void createPlayer(goodShip *player) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	playerDraw(65,115);
 80034d0:	2173      	movs	r1, #115	; 0x73
 80034d2:	2041      	movs	r0, #65	; 0x41
 80034d4:	f000 fc9e 	bl	8003e14 <playerDraw>
	player->x = 65;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2241      	movs	r2, #65	; 0x41
 80034dc:	601a      	str	r2, [r3, #0]
	player->y = 115;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2273      	movs	r2, #115	; 0x73
 80034e2:	605a      	str	r2, [r3, #4]
	player->life = 3;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	721a      	strb	r2, [r3, #8]
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <movePlayer>:


void movePlayer(goodShip *player, int32_t joystick) {
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if(joystick == 1 && player->x>6) { //left
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10b      	bne.n	800351a <movePlayer+0x28>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b06      	cmp	r3, #6
 8003508:	dd07      	ble.n	800351a <movePlayer+0x28>
		shiftLeft(player);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa43 	bl	8003996 <shiftLeft>
		player->x--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
	}
	if(joystick == 2 && player->x<132) {//right
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d10b      	bne.n	8003538 <movePlayer+0x46>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b83      	cmp	r3, #131	; 0x83
 8003526:	dc07      	bgt.n	8003538 <movePlayer+0x46>
		shiftRight(player);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f809 	bl	8003540 <shiftRight>
		player->x++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	601a      	str	r2, [r3, #0]
	}
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <shiftRight>:

void shiftRight(goodShip *player) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 8003548:	200f      	movs	r0, #15
 800354a:	f7fe fbff 	bl	8001d4c <fgcolor>
	gotoxy(player->x+1,player->y);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f7fe fc36 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003560:	20db      	movs	r0, #219	; 0xdb
 8003562:	f001 fa63 	bl	8004a2c <putchar>
	fgcolor(0);
 8003566:	2000      	movs	r0, #0
 8003568:	f7fe fbf0 	bl	8001d4c <fgcolor>
	gotoxy(player->x,player->y);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f7fe fc28 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800357c:	20db      	movs	r0, #219	; 0xdb
 800357e:	f001 fa55 	bl	8004a2c <putchar>
	fgcolor(15);
 8003582:	200f      	movs	r0, #15
 8003584:	f7fe fbe2 	bl	8001d4c <fgcolor>
	gotoxy(player->x-2,player->y+1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1e9a      	subs	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	3301      	adds	r3, #1
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe fc18 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800359c:	20db      	movs	r0, #219	; 0xdb
 800359e:	f001 fa45 	bl	8004a2c <putchar>
	gotoxy(player->x+1,player->y+1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	3301      	adds	r3, #1
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7fe fc0b 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80035b6:	20db      	movs	r0, #219	; 0xdb
 80035b8:	f001 fa38 	bl	8004a2c <putchar>
	gotoxy(player->x+4,player->y+1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1d1a      	adds	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7fe fbfe 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80035d0:	20db      	movs	r0, #219	; 0xdb
 80035d2:	f001 fa2b 	bl	8004a2c <putchar>
	fgcolor(0);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fe fbb8 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	1eda      	subs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7fe fbee 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80035f0:	20db      	movs	r0, #219	; 0xdb
 80035f2:	f001 fa1b 	bl	8004a2c <putchar>
	gotoxy(player->x,player->y+1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	3301      	adds	r3, #1
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f7fe fbe2 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003608:	20db      	movs	r0, #219	; 0xdb
 800360a:	f001 fa0f 	bl	8004a2c <putchar>
	gotoxy(player->x+3,player->y+1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1cda      	adds	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	3301      	adds	r3, #1
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fe fbd5 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003622:	20db      	movs	r0, #219	; 0xdb
 8003624:	f001 fa02 	bl	8004a2c <putchar>
	fgcolor(15);
 8003628:	200f      	movs	r0, #15
 800362a:	f7fe fb8f 	bl	8001d4c <fgcolor>
	gotoxy(player->x-2,player->y+2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1e9a      	subs	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	3302      	adds	r3, #2
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7fe fbc5 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003642:	20db      	movs	r0, #219	; 0xdb
 8003644:	f001 f9f2 	bl	8004a2c <putchar>
	gotoxy(player->x+1,player->y+2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	3302      	adds	r3, #2
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7fe fbb8 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800365c:	20db      	movs	r0, #219	; 0xdb
 800365e:	f001 f9e5 	bl	8004a2c <putchar>
	gotoxy(player->x+2,player->y+2);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	3302      	adds	r3, #2
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7fe fbab 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003676:	20db      	movs	r0, #219	; 0xdb
 8003678:	f001 f9d8 	bl	8004a2c <putchar>
	gotoxy(player->x+4,player->y+2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	3302      	adds	r3, #2
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f7fe fb9e 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003690:	20db      	movs	r0, #219	; 0xdb
 8003692:	f001 f9cb 	bl	8004a2c <putchar>
	fgcolor(0);
 8003696:	2000      	movs	r0, #0
 8003698:	f7fe fb58 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1eda      	subs	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	3302      	adds	r3, #2
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7fe fb8e 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80036b0:	20db      	movs	r0, #219	; 0xdb
 80036b2:	f001 f9bb 	bl	8004a2c <putchar>
	gotoxy(player->x-1,player->y+2);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	3302      	adds	r3, #2
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7fe fb81 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80036ca:	20db      	movs	r0, #219	; 0xdb
 80036cc:	f001 f9ae 	bl	8004a2c <putchar>
	gotoxy(player->x+3,player->y+2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1cda      	adds	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	3302      	adds	r3, #2
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7fe fb74 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80036e4:	20db      	movs	r0, #219	; 0xdb
 80036e6:	f001 f9a1 	bl	8004a2c <putchar>
	fgcolor(15);
 80036ea:	200f      	movs	r0, #15
 80036ec:	f7fe fb2e 	bl	8001d4c <fgcolor>
	gotoxy(player->x,player->y+3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	3303      	adds	r3, #3
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe fb65 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003702:	20db      	movs	r0, #219	; 0xdb
 8003704:	f001 f992 	bl	8004a2c <putchar>
	fgcolor(4);
 8003708:	2004      	movs	r0, #4
 800370a:	f7fe fb1f 	bl	8001d4c <fgcolor>
	printf("%c", 219);
 800370e:	20db      	movs	r0, #219	; 0xdb
 8003710:	f001 f98c 	bl	8004a2c <putchar>
	fgcolor(15);
 8003714:	200f      	movs	r0, #15
 8003716:	f7fe fb19 	bl	8001d4c <fgcolor>
	gotoxy(player->x+4,player->y+3);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	3303      	adds	r3, #3
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe fb4f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800372e:	20db      	movs	r0, #219	; 0xdb
 8003730:	f001 f97c 	bl	8004a2c <putchar>
	fgcolor(0);
 8003734:	2000      	movs	r0, #0
 8003736:	f7fe fb09 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+3);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1eda      	subs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	3303      	adds	r3, #3
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fe fb3f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800374e:	20db      	movs	r0, #219	; 0xdb
 8003750:	f001 f96c 	bl	8004a2c <putchar>
	fgcolor(15);
 8003754:	200f      	movs	r0, #15
 8003756:	f7fe faf9 	bl	8001d4c <fgcolor>
	gotoxy(player->x-1,player->y+4);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1e5a      	subs	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fb2f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800376e:	20db      	movs	r0, #219	; 0xdb
 8003770:	f001 f95c 	bl	8004a2c <putchar>
	fgcolor(4);
 8003774:	2004      	movs	r0, #4
 8003776:	f7fe fae9 	bl	8001d4c <fgcolor>
	gotoxy(player->x+2,player->y+4);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fe fb1f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800378e:	20db      	movs	r0, #219	; 0xdb
 8003790:	f001 f94c 	bl	8004a2c <putchar>
	fgcolor(15);
 8003794:	200f      	movs	r0, #15
 8003796:	f7fe fad9 	bl	8001d4c <fgcolor>
	printf("%c", 219);
 800379a:	20db      	movs	r0, #219	; 0xdb
 800379c:	f001 f946 	bl	8004a2c <putchar>
	fgcolor(0);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fe fad3 	bl	8001d4c <fgcolor>
	gotoxy(player->x-2,player->y+4);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1e9a      	subs	r2, r3, #2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f7fe fb09 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80037ba:	20db      	movs	r0, #219	; 0xdb
 80037bc:	f001 f936 	bl	8004a2c <putchar>
	fgcolor(15);
 80037c0:	200f      	movs	r0, #15
 80037c2:	f7fe fac3 	bl	8001d4c <fgcolor>
	gotoxy(player->x+4, player->y+5);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	3305      	adds	r3, #5
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7fe faf9 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80037da:	20db      	movs	r0, #219	; 0xdb
 80037dc:	f001 f926 	bl	8004a2c <putchar>
	fgcolor(0);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fe fab3 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+5);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1eda      	subs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	3305      	adds	r3, #5
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7fe fae9 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80037fa:	20db      	movs	r0, #219	; 0xdb
 80037fc:	f001 f916 	bl	8004a2c <putchar>
	fgcolor(15);
 8003800:	200f      	movs	r0, #15
 8003802:	f7fe faa3 	bl	8001d4c <fgcolor>
	gotoxy(player->x-1, player->y+6);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	3306      	adds	r3, #6
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fe fad9 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800381a:	20db      	movs	r0, #219	; 0xdb
 800381c:	f001 f906 	bl	8004a2c <putchar>
	gotoxy(player->x+1, player->y+6);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	3306      	adds	r3, #6
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7fe facc 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003834:	20db      	movs	r0, #219	; 0xdb
 8003836:	f001 f8f9 	bl	8004a2c <putchar>
	gotoxy(player->x+5, player->y+6);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1d5a      	adds	r2, r3, #5
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	3306      	adds	r3, #6
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe fabf 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800384e:	20db      	movs	r0, #219	; 0xdb
 8003850:	f001 f8ec 	bl	8004a2c <putchar>
	fgcolor(0);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fe fa79 	bl	8001d4c <fgcolor>
	gotoxy(player->x-4,player->y+6);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1f1a      	subs	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	3306      	adds	r3, #6
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7fe faaf 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800386e:	20db      	movs	r0, #219	; 0xdb
 8003870:	f001 f8dc 	bl	8004a2c <putchar>
	gotoxy(player->x,player->y+6);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	3306      	adds	r3, #6
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fe faa3 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003886:	20db      	movs	r0, #219	; 0xdb
 8003888:	f001 f8d0 	bl	8004a2c <putchar>
	gotoxy(player->x+2,player->y+6);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	3306      	adds	r3, #6
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f7fe fa96 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80038a0:	20db      	movs	r0, #219	; 0xdb
 80038a2:	f001 f8c3 	bl	8004a2c <putchar>
	fgcolor(15);
 80038a6:	200f      	movs	r0, #15
 80038a8:	f7fe fa50 	bl	8001d4c <fgcolor>
	gotoxy(player->x-2,player->y+7);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1e9a      	subs	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	3307      	adds	r3, #7
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f7fe fa86 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80038c0:	20db      	movs	r0, #219	; 0xdb
 80038c2:	f001 f8b3 	bl	8004a2c <putchar>
	gotoxy(player->x+5,player->y+7);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1d5a      	adds	r2, r3, #5
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	3307      	adds	r3, #7
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7fe fa79 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80038da:	20db      	movs	r0, #219	; 0xdb
 80038dc:	f001 f8a6 	bl	8004a2c <putchar>
	fgcolor(0);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fe fa33 	bl	8001d4c <fgcolor>
	gotoxy(player->x-4,player->y+7);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1f1a      	subs	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	3307      	adds	r3, #7
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe fa69 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80038fa:	20db      	movs	r0, #219	; 0xdb
 80038fc:	f001 f896 	bl	8004a2c <putchar>
	gotoxy(player->x+3,player->y+7);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1cda      	adds	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	3307      	adds	r3, #7
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f7fe fa5c 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003914:	20db      	movs	r0, #219	; 0xdb
 8003916:	f001 f889 	bl	8004a2c <putchar>
	fgcolor(15);
 800391a:	200f      	movs	r0, #15
 800391c:	f7fe fa16 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+8);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1eda      	subs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	3308      	adds	r3, #8
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7fe fa4c 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003934:	20db      	movs	r0, #219	; 0xdb
 8003936:	f001 f879 	bl	8004a2c <putchar>
	gotoxy(player->x+5,player->y+8);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1d5a      	adds	r2, r3, #5
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	3308      	adds	r3, #8
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fe fa3f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800394e:	20db      	movs	r0, #219	; 0xdb
 8003950:	f001 f86c 	bl	8004a2c <putchar>
	fgcolor(0);
 8003954:	2000      	movs	r0, #0
 8003956:	f7fe f9f9 	bl	8001d4c <fgcolor>
	gotoxy(player->x-4,player->y+8);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1f1a      	subs	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	3308      	adds	r3, #8
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f7fe fa2f 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 800396e:	20db      	movs	r0, #219	; 0xdb
 8003970:	f001 f85c 	bl	8004a2c <putchar>
	gotoxy(player->x+4,player->y+8);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	3308      	adds	r3, #8
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7fe fa22 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003988:	20db      	movs	r0, #219	; 0xdb
 800398a:	f001 f84f 	bl	8004a2c <putchar>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <shiftLeft>:

void shiftLeft(goodShip *player) {
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
	fgcolor(15);
 800399e:	200f      	movs	r0, #15
 80039a0:	f7fe f9d4 	bl	8001d4c <fgcolor>
	gotoxy(player->x-1,player->y);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7fe fa0b 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80039b6:	20db      	movs	r0, #219	; 0xdb
 80039b8:	f001 f838 	bl	8004a2c <putchar>
	fgcolor(0);
 80039bc:	2000      	movs	r0, #0
 80039be:	f7fe f9c5 	bl	8001d4c <fgcolor>
	gotoxy(player->x,player->y);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe f9fd 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80039d2:	20db      	movs	r0, #219	; 0xdb
 80039d4:	f001 f82a 	bl	8004a2c <putchar>
	fgcolor(15);
 80039d8:	200f      	movs	r0, #15
 80039da:	f7fe f9b7 	bl	8001d4c <fgcolor>
	gotoxy(player->x+2,player->y+1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe f9ed 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 80039f2:	20db      	movs	r0, #219	; 0xdb
 80039f4:	f001 f81a 	bl	8004a2c <putchar>
	gotoxy(player->x-1,player->y+1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	3301      	adds	r3, #1
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fe f9e0 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a0c:	20db      	movs	r0, #219	; 0xdb
 8003a0e:	f001 f80d 	bl	8004a2c <putchar>
	gotoxy(player->x-4,player->y+1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1f1a      	subs	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fe f9d3 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a26:	20db      	movs	r0, #219	; 0xdb
 8003a28:	f001 f800 	bl	8004a2c <putchar>
	fgcolor(0);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fe f98d 	bl	8001d4c <fgcolor>
	gotoxy(player->x+3,player->y+1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1cda      	adds	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe f9c3 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a46:	20db      	movs	r0, #219	; 0xdb
 8003a48:	f000 fff0 	bl	8004a2c <putchar>
	gotoxy(player->x,player->y+1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7fe f9b7 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a5e:	20db      	movs	r0, #219	; 0xdb
 8003a60:	f000 ffe4 	bl	8004a2c <putchar>
	gotoxy(player->x-3,player->y+1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1eda      	subs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe f9aa 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a78:	20db      	movs	r0, #219	; 0xdb
 8003a7a:	f000 ffd7 	bl	8004a2c <putchar>
	fgcolor(15);
 8003a7e:	200f      	movs	r0, #15
 8003a80:	f7fe f964 	bl	8001d4c <fgcolor>
	gotoxy(player->x+2,player->y+2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	3302      	adds	r3, #2
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe f99a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003a98:	20db      	movs	r0, #219	; 0xdb
 8003a9a:	f000 ffc7 	bl	8004a2c <putchar>
	gotoxy(player->x-1,player->y+2);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe f98d 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003ab2:	20db      	movs	r0, #219	; 0xdb
 8003ab4:	f000 ffba 	bl	8004a2c <putchar>
	gotoxy(player->x-2,player->y+2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1e9a      	subs	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe f980 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003acc:	20db      	movs	r0, #219	; 0xdb
 8003ace:	f000 ffad 	bl	8004a2c <putchar>
	gotoxy(player->x-4,player->y+2);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1f1a      	subs	r2, r3, #4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	3302      	adds	r3, #2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe f973 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003ae6:	20db      	movs	r0, #219	; 0xdb
 8003ae8:	f000 ffa0 	bl	8004a2c <putchar>
	fgcolor(0);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fe f92d 	bl	8001d4c <fgcolor>
	gotoxy(player->x+3,player->y+2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1cda      	adds	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	3302      	adds	r3, #2
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fe f963 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b06:	20db      	movs	r0, #219	; 0xdb
 8003b08:	f000 ff90 	bl	8004a2c <putchar>
	gotoxy(player->x+1,player->y+2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	3302      	adds	r3, #2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7fe f956 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b20:	20db      	movs	r0, #219	; 0xdb
 8003b22:	f000 ff83 	bl	8004a2c <putchar>
	gotoxy(player->x-3,player->y+2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1eda      	subs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	3302      	adds	r3, #2
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7fe f949 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b3a:	20db      	movs	r0, #219	; 0xdb
 8003b3c:	f000 ff76 	bl	8004a2c <putchar>
	fgcolor(15);
 8003b40:	200f      	movs	r0, #15
 8003b42:	f7fe f903 	bl	8001d4c <fgcolor>
	gotoxy(player->x,player->y+3);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f7fe f93a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b58:	20db      	movs	r0, #219	; 0xdb
 8003b5a:	f000 ff67 	bl	8004a2c <putchar>
	fgcolor(4);
 8003b5e:	2004      	movs	r0, #4
 8003b60:	f7fe f8f4 	bl	8001d4c <fgcolor>
	gotoxy(player->x-1,player->y+3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	3303      	adds	r3, #3
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe f92a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b78:	20db      	movs	r0, #219	; 0xdb
 8003b7a:	f000 ff57 	bl	8004a2c <putchar>
	fgcolor(15);
 8003b7e:	200f      	movs	r0, #15
 8003b80:	f7fe f8e4 	bl	8001d4c <fgcolor>
	gotoxy(player->x-4,player->y+3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1f1a      	subs	r2, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe f91a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003b98:	20db      	movs	r0, #219	; 0xdb
 8003b9a:	f000 ff47 	bl	8004a2c <putchar>
	fgcolor(0);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7fe f8d4 	bl	8001d4c <fgcolor>
	gotoxy(player->x+3,player->y+3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	1cda      	adds	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	3303      	adds	r3, #3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7fe f90a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003bb8:	20db      	movs	r0, #219	; 0xdb
 8003bba:	f000 ff37 	bl	8004a2c <putchar>
	fgcolor(15);
 8003bbe:	200f      	movs	r0, #15
 8003bc0:	f7fe f8c4 	bl	8001d4c <fgcolor>
	gotoxy(player->x+1,player->y+4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7fe f8fa 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003bd8:	20db      	movs	r0, #219	; 0xdb
 8003bda:	f000 ff27 	bl	8004a2c <putchar>
	fgcolor(4);
 8003bde:	2004      	movs	r0, #4
 8003be0:	f7fe f8b4 	bl	8001d4c <fgcolor>
	gotoxy(player->x-2,player->y+4);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1e9a      	subs	r2, r3, #2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe f8ea 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003bf8:	20db      	movs	r0, #219	; 0xdb
 8003bfa:	f000 ff17 	bl	8004a2c <putchar>
	fgcolor(15);
 8003bfe:	200f      	movs	r0, #15
 8003c00:	f7fe f8a4 	bl	8001d4c <fgcolor>
	gotoxy(player->x-3,player->y+4);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1eda      	subs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fe f8da 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003c18:	20db      	movs	r0, #219	; 0xdb
 8003c1a:	f000 ff07 	bl	8004a2c <putchar>
	fgcolor(0);
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f7fe f894 	bl	8001d4c <fgcolor>
	gotoxy(player->x+2,player->y+4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fe f8ca 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003c38:	20db      	movs	r0, #219	; 0xdb
 8003c3a:	f000 fef7 	bl	8004a2c <putchar>
	fgcolor(15);
 8003c3e:	200f      	movs	r0, #15
 8003c40:	f7fe f884 	bl	8001d4c <fgcolor>
	gotoxy(player->x-4, player->y+5);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1f1a      	subs	r2, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	3305      	adds	r3, #5
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fe f8ba 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003c58:	20db      	movs	r0, #219	; 0xdb
 8003c5a:	f000 fee7 	bl	8004a2c <putchar>
	fgcolor(0);
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f7fe f874 	bl	8001d4c <fgcolor>
	gotoxy(player->x+3,player->y+5);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1cda      	adds	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	3305      	adds	r3, #5
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fe f8aa 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003c78:	20db      	movs	r0, #219	; 0xdb
 8003c7a:	f000 fed7 	bl	8004a2c <putchar>
	fgcolor(15);
 8003c7e:	200f      	movs	r0, #15
 8003c80:	f7fe f864 	bl	8001d4c <fgcolor>
	gotoxy(player->x+1, player->y+6);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	3306      	adds	r3, #6
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f7fe f89a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003c98:	20db      	movs	r0, #219	; 0xdb
 8003c9a:	f000 fec7 	bl	8004a2c <putchar>
	gotoxy(player->x-1, player->y+6);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	3306      	adds	r3, #6
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fe f88d 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003cb2:	20db      	movs	r0, #219	; 0xdb
 8003cb4:	f000 feba 	bl	8004a2c <putchar>
	gotoxy(player->x-5, player->y+6);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1f5a      	subs	r2, r3, #5
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	3306      	adds	r3, #6
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe f880 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003ccc:	20db      	movs	r0, #219	; 0xdb
 8003cce:	f000 fead 	bl	8004a2c <putchar>
	fgcolor(0);
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f7fe f83a 	bl	8001d4c <fgcolor>
	gotoxy(player->x+4,player->y+6);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	3306      	adds	r3, #6
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fe f870 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003cec:	20db      	movs	r0, #219	; 0xdb
 8003cee:	f000 fe9d 	bl	8004a2c <putchar>
	gotoxy(player->x,player->y+6);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	3306      	adds	r3, #6
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fe f864 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d04:	20db      	movs	r0, #219	; 0xdb
 8003d06:	f000 fe91 	bl	8004a2c <putchar>
	gotoxy(player->x-2,player->y+6);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1e9a      	subs	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	3306      	adds	r3, #6
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7fe f857 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d1e:	20db      	movs	r0, #219	; 0xdb
 8003d20:	f000 fe84 	bl	8004a2c <putchar>
	fgcolor(15);
 8003d24:	200f      	movs	r0, #15
 8003d26:	f7fe f811 	bl	8001d4c <fgcolor>
	gotoxy(player->x+2,player->y+7);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	3307      	adds	r3, #7
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7fe f847 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d3e:	20db      	movs	r0, #219	; 0xdb
 8003d40:	f000 fe74 	bl	8004a2c <putchar>
	gotoxy(player->x-5,player->y+7);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1f5a      	subs	r2, r3, #5
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7fe f83a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d58:	20db      	movs	r0, #219	; 0xdb
 8003d5a:	f000 fe67 	bl	8004a2c <putchar>
	fgcolor(0);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fd fff4 	bl	8001d4c <fgcolor>
	gotoxy(player->x+4,player->y+7);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	3307      	adds	r3, #7
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7fe f82a 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d78:	20db      	movs	r0, #219	; 0xdb
 8003d7a:	f000 fe57 	bl	8004a2c <putchar>
	gotoxy(player->x-3,player->y+7);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1eda      	subs	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	3307      	adds	r3, #7
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe f81d 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003d92:	20db      	movs	r0, #219	; 0xdb
 8003d94:	f000 fe4a 	bl	8004a2c <putchar>
	fgcolor(15);
 8003d98:	200f      	movs	r0, #15
 8003d9a:	f7fd ffd7 	bl	8001d4c <fgcolor>
	gotoxy(player->x+3,player->y+8);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1cda      	adds	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	3308      	adds	r3, #8
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fe f80d 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003db2:	20db      	movs	r0, #219	; 0xdb
 8003db4:	f000 fe3a 	bl	8004a2c <putchar>
	gotoxy(player->x-5,player->y+8);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	1f5a      	subs	r2, r3, #5
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe f800 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003dcc:	20db      	movs	r0, #219	; 0xdb
 8003dce:	f000 fe2d 	bl	8004a2c <putchar>
	fgcolor(0);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7fd ffba 	bl	8001d4c <fgcolor>
	gotoxy(player->x+4,player->y+8);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	3308      	adds	r3, #8
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fd fff0 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003dec:	20db      	movs	r0, #219	; 0xdb
 8003dee:	f000 fe1d 	bl	8004a2c <putchar>
	gotoxy(player->x-4,player->y+8);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1f1a      	subs	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fd ffe3 	bl	8001dcc <gotoxy>
	printf("%c", 219);
 8003e06:	20db      	movs	r0, #219	; 0xdb
 8003e08:	f000 fe10 	bl	8004a2c <putchar>
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <playerDraw>:
#include "sprite.h"

void playerDraw(int32_t x, int32_t y) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af04      	add	r7, sp, #16
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	fgcolor(15);
 8003e1e:	200f      	movs	r0, #15
 8003e20:	f7fd ff94 	bl	8001d4c <fgcolor>
	gotoxy(x,y);
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd ffd0 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8003e2c:	20db      	movs	r0, #219	; 0xdb
 8003e2e:	f000 fdfd 	bl	8004a2c <putchar>
	gotoxy(x-3,y+1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1eda      	subs	r2, r3, #3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f7fd ffc5 	bl	8001dcc <gotoxy>
	printf("%c  %c  %c",219,219,219);
 8003e42:	23db      	movs	r3, #219	; 0xdb
 8003e44:	22db      	movs	r2, #219	; 0xdb
 8003e46:	21db      	movs	r1, #219	; 0xdb
 8003e48:	484c      	ldr	r0, [pc, #304]	; (8003f7c <playerDraw+0x168>)
 8003e4a:	f000 fdd7 	bl	80049fc <iprintf>
	gotoxy(x-3,y+2);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1eda      	subs	r2, r3, #3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	3302      	adds	r3, #2
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7fd ffb7 	bl	8001dcc <gotoxy>
	printf("%c %c%c%c %c",219,219,219,219,219);
 8003e5e:	23db      	movs	r3, #219	; 0xdb
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	23db      	movs	r3, #219	; 0xdb
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	23db      	movs	r3, #219	; 0xdb
 8003e68:	22db      	movs	r2, #219	; 0xdb
 8003e6a:	21db      	movs	r1, #219	; 0xdb
 8003e6c:	4844      	ldr	r0, [pc, #272]	; (8003f80 <playerDraw+0x16c>)
 8003e6e:	f000 fdc5 	bl	80049fc <iprintf>
	gotoxy(x-3,y+3);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1eda      	subs	r2, r3, #3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	3303      	adds	r3, #3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fd ffa5 	bl	8001dcc <gotoxy>
	printf("%c%c%c",219,219,219);
 8003e82:	23db      	movs	r3, #219	; 0xdb
 8003e84:	22db      	movs	r2, #219	; 0xdb
 8003e86:	21db      	movs	r1, #219	; 0xdb
 8003e88:	483e      	ldr	r0, [pc, #248]	; (8003f84 <playerDraw+0x170>)
 8003e8a:	f000 fdb7 	bl	80049fc <iprintf>
	fgcolor(4);
 8003e8e:	2004      	movs	r0, #4
 8003e90:	f7fd ff5c 	bl	8001d4c <fgcolor>
	printf("%c",219);
 8003e94:	20db      	movs	r0, #219	; 0xdb
 8003e96:	f000 fdc9 	bl	8004a2c <putchar>
	fgcolor(15);
 8003e9a:	200f      	movs	r0, #15
 8003e9c:	f7fd ff56 	bl	8001d4c <fgcolor>
	printf("%c%c%c",219,219,219);
 8003ea0:	23db      	movs	r3, #219	; 0xdb
 8003ea2:	22db      	movs	r2, #219	; 0xdb
 8003ea4:	21db      	movs	r1, #219	; 0xdb
 8003ea6:	4837      	ldr	r0, [pc, #220]	; (8003f84 <playerDraw+0x170>)
 8003ea8:	f000 fda8 	bl	80049fc <iprintf>
	gotoxy(x-2,y+4);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1e9a      	subs	r2, r3, #2
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fd ff88 	bl	8001dcc <gotoxy>
	printf("%c",219);
 8003ebc:	20db      	movs	r0, #219	; 0xdb
 8003ebe:	f000 fdb5 	bl	8004a2c <putchar>
	fgcolor(4);
 8003ec2:	2004      	movs	r0, #4
 8003ec4:	f7fd ff42 	bl	8001d4c <fgcolor>
	printf("%c%c%c",219,219,219);
 8003ec8:	23db      	movs	r3, #219	; 0xdb
 8003eca:	22db      	movs	r2, #219	; 0xdb
 8003ecc:	21db      	movs	r1, #219	; 0xdb
 8003ece:	482d      	ldr	r0, [pc, #180]	; (8003f84 <playerDraw+0x170>)
 8003ed0:	f000 fd94 	bl	80049fc <iprintf>
	fgcolor(15);
 8003ed4:	200f      	movs	r0, #15
 8003ed6:	f7fd ff39 	bl	8001d4c <fgcolor>
	printf("%c",219);
 8003eda:	20db      	movs	r0, #219	; 0xdb
 8003edc:	f000 fda6 	bl	8004a2c <putchar>
	gotoxy(x-3,y+5);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1eda      	subs	r2, r3, #3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	3305      	adds	r3, #5
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fd ff6e 	bl	8001dcc <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 8003ef0:	23db      	movs	r3, #219	; 0xdb
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	23db      	movs	r3, #219	; 0xdb
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	23db      	movs	r3, #219	; 0xdb
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	23db      	movs	r3, #219	; 0xdb
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	23db      	movs	r3, #219	; 0xdb
 8003f02:	22db      	movs	r2, #219	; 0xdb
 8003f04:	21db      	movs	r1, #219	; 0xdb
 8003f06:	4820      	ldr	r0, [pc, #128]	; (8003f88 <playerDraw+0x174>)
 8003f08:	f000 fd78 	bl	80049fc <iprintf>
	gotoxy(x-4,y+6);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1f1a      	subs	r2, r3, #4
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	3306      	adds	r3, #6
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f7fd ff58 	bl	8001dcc <gotoxy>
	printf("%c%c%c %c %c%c%c",219,219,219,219,219,219,219);
 8003f1c:	23db      	movs	r3, #219	; 0xdb
 8003f1e:	9303      	str	r3, [sp, #12]
 8003f20:	23db      	movs	r3, #219	; 0xdb
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	23db      	movs	r3, #219	; 0xdb
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	23db      	movs	r3, #219	; 0xdb
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	23db      	movs	r3, #219	; 0xdb
 8003f2e:	22db      	movs	r2, #219	; 0xdb
 8003f30:	21db      	movs	r1, #219	; 0xdb
 8003f32:	4816      	ldr	r0, [pc, #88]	; (8003f8c <playerDraw+0x178>)
 8003f34:	f000 fd62 	bl	80049fc <iprintf>
	gotoxy(x-4,y+7);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1f1a      	subs	r2, r3, #4
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	3307      	adds	r3, #7
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f7fd ff42 	bl	8001dcc <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 8003f48:	23db      	movs	r3, #219	; 0xdb
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	23db      	movs	r3, #219	; 0xdb
 8003f4e:	22db      	movs	r2, #219	; 0xdb
 8003f50:	21db      	movs	r1, #219	; 0xdb
 8003f52:	480f      	ldr	r0, [pc, #60]	; (8003f90 <playerDraw+0x17c>)
 8003f54:	f000 fd52 	bl	80049fc <iprintf>
	gotoxy(x-4,y+8);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1f1a      	subs	r2, r3, #4
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fd ff32 	bl	8001dcc <gotoxy>
	printf("%c       %c",219,219);
 8003f68:	22db      	movs	r2, #219	; 0xdb
 8003f6a:	21db      	movs	r1, #219	; 0xdb
 8003f6c:	4809      	ldr	r0, [pc, #36]	; (8003f94 <playerDraw+0x180>)
 8003f6e:	f000 fd45 	bl	80049fc <iprintf>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	0800601c 	.word	0x0800601c
 8003f80:	08006028 	.word	0x08006028
 8003f84:	08006038 	.word	0x08006038
 8003f88:	08006040 	.word	0x08006040
 8003f8c:	08006050 	.word	0x08006050
 8003f90:	08006064 	.word	0x08006064
 8003f94:	08006074 	.word	0x08006074

08003f98 <playerRemove>:

void playerRemove(int32_t x, int32_t y) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	gotoxy(x,y);
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd ff11 	bl	8001dcc <gotoxy>
	printf(" ");
 8003faa:	2020      	movs	r0, #32
 8003fac:	f000 fd3e 	bl	8004a2c <putchar>
	gotoxy(x-3,y+1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1eda      	subs	r2, r3, #3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7fd ff06 	bl	8001dcc <gotoxy>
	printf("       ");
 8003fc0:	4829      	ldr	r0, [pc, #164]	; (8004068 <playerRemove+0xd0>)
 8003fc2:	f000 fd1b 	bl	80049fc <iprintf>
	gotoxy(x-3,y+2);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1eda      	subs	r2, r3, #3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fd fefb 	bl	8001dcc <gotoxy>
	printf("       ");
 8003fd6:	4824      	ldr	r0, [pc, #144]	; (8004068 <playerRemove+0xd0>)
 8003fd8:	f000 fd10 	bl	80049fc <iprintf>
	gotoxy(x-3,y+3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1eda      	subs	r2, r3, #3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	3303      	adds	r3, #3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fd fef0 	bl	8001dcc <gotoxy>
	printf("       ");
 8003fec:	481e      	ldr	r0, [pc, #120]	; (8004068 <playerRemove+0xd0>)
 8003fee:	f000 fd05 	bl	80049fc <iprintf>
	gotoxy(x-2,y+4);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1e9a      	subs	r2, r3, #2
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fd fee5 	bl	8001dcc <gotoxy>
	printf("     ");
 8004002:	481a      	ldr	r0, [pc, #104]	; (800406c <playerRemove+0xd4>)
 8004004:	f000 fcfa 	bl	80049fc <iprintf>
	gotoxy(x-3,y+5);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1eda      	subs	r2, r3, #3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	3305      	adds	r3, #5
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fd feda 	bl	8001dcc <gotoxy>
	printf("       ");
 8004018:	4813      	ldr	r0, [pc, #76]	; (8004068 <playerRemove+0xd0>)
 800401a:	f000 fcef 	bl	80049fc <iprintf>
	gotoxy(x-4,y+6);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1f1a      	subs	r2, r3, #4
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	3306      	adds	r3, #6
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fd fecf 	bl	8001dcc <gotoxy>
	printf("         ");
 800402e:	4810      	ldr	r0, [pc, #64]	; (8004070 <playerRemove+0xd8>)
 8004030:	f000 fce4 	bl	80049fc <iprintf>
	gotoxy(x-4,y+7);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1f1a      	subs	r2, r3, #4
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	3307      	adds	r3, #7
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fd fec4 	bl	8001dcc <gotoxy>
	printf("         ");
 8004044:	480a      	ldr	r0, [pc, #40]	; (8004070 <playerRemove+0xd8>)
 8004046:	f000 fcd9 	bl	80049fc <iprintf>
	gotoxy(x-4,y+8);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	1f1a      	subs	r2, r3, #4
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fd feb9 	bl	8001dcc <gotoxy>
	printf("         ");
 800405a:	4805      	ldr	r0, [pc, #20]	; (8004070 <playerRemove+0xd8>)
 800405c:	f000 fcce 	bl	80049fc <iprintf>
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	08006080 	.word	0x08006080
 800406c:	08006088 	.word	0x08006088
 8004070:	08006090 	.word	0x08006090

08004074 <enemyDraw>:



void enemyDraw(int32_t x, int32_t y) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af04      	add	r7, sp, #16
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	fgcolor(1);
 800407e:	2001      	movs	r0, #1
 8004080:	f7fd fe64 	bl	8001d4c <fgcolor>
	gotoxy(x-3,y);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b03      	subs	r3, #3
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fe9e 	bl	8001dcc <gotoxy>
	printf("%c     %c",219,219);
 8004090:	22db      	movs	r2, #219	; 0xdb
 8004092:	21db      	movs	r1, #219	; 0xdb
 8004094:	4855      	ldr	r0, [pc, #340]	; (80041ec <enemyDraw+0x178>)
 8004096:	f000 fcb1 	bl	80049fc <iprintf>
	gotoxy(x-3,y-1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	1eda      	subs	r2, r3, #3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fd fe91 	bl	8001dcc <gotoxy>
	printf("%c     %c",219,219);
 80040aa:	22db      	movs	r2, #219	; 0xdb
 80040ac:	21db      	movs	r1, #219	; 0xdb
 80040ae:	484f      	ldr	r0, [pc, #316]	; (80041ec <enemyDraw+0x178>)
 80040b0:	f000 fca4 	bl	80049fc <iprintf>
	gotoxy(x-3,y-2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1eda      	subs	r2, r3, #3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	3b02      	subs	r3, #2
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f7fd fe84 	bl	8001dcc <gotoxy>
	printf("%c %c %c %c",219,219,219,219);
 80040c4:	23db      	movs	r3, #219	; 0xdb
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	23db      	movs	r3, #219	; 0xdb
 80040ca:	22db      	movs	r2, #219	; 0xdb
 80040cc:	21db      	movs	r1, #219	; 0xdb
 80040ce:	4848      	ldr	r0, [pc, #288]	; (80041f0 <enemyDraw+0x17c>)
 80040d0:	f000 fc94 	bl	80049fc <iprintf>
	gotoxy(x-3,y-3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1eda      	subs	r2, r3, #3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	3b03      	subs	r3, #3
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fd fe74 	bl	8001dcc <gotoxy>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 80040e4:	23db      	movs	r3, #219	; 0xdb
 80040e6:	9303      	str	r3, [sp, #12]
 80040e8:	23db      	movs	r3, #219	; 0xdb
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	23db      	movs	r3, #219	; 0xdb
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	23db      	movs	r3, #219	; 0xdb
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	23db      	movs	r3, #219	; 0xdb
 80040f6:	22db      	movs	r2, #219	; 0xdb
 80040f8:	21db      	movs	r1, #219	; 0xdb
 80040fa:	483e      	ldr	r0, [pc, #248]	; (80041f4 <enemyDraw+0x180>)
 80040fc:	f000 fc7e 	bl	80049fc <iprintf>
	gotoxy(x-3,y-4);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1eda      	subs	r2, r3, #3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	3b04      	subs	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7fd fe5e 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 8004110:	22db      	movs	r2, #219	; 0xdb
 8004112:	21db      	movs	r1, #219	; 0xdb
 8004114:	4838      	ldr	r0, [pc, #224]	; (80041f8 <enemyDraw+0x184>)
 8004116:	f000 fc71 	bl	80049fc <iprintf>
	fgcolor(11);
 800411a:	200b      	movs	r0, #11
 800411c:	f7fd fe16 	bl	8001d4c <fgcolor>
	printf("%c",219);
 8004120:	20db      	movs	r0, #219	; 0xdb
 8004122:	f000 fc83 	bl	8004a2c <putchar>
	fgcolor(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f7fd fe10 	bl	8001d4c <fgcolor>
	printf("%c",219);
 800412c:	20db      	movs	r0, #219	; 0xdb
 800412e:	f000 fc7d 	bl	8004a2c <putchar>
	fgcolor(11);
 8004132:	200b      	movs	r0, #11
 8004134:	f7fd fe0a 	bl	8001d4c <fgcolor>
	printf("%c",219);
 8004138:	20db      	movs	r0, #219	; 0xdb
 800413a:	f000 fc77 	bl	8004a2c <putchar>
	fgcolor(1);
 800413e:	2001      	movs	r0, #1
 8004140:	f7fd fe04 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 8004144:	22db      	movs	r2, #219	; 0xdb
 8004146:	21db      	movs	r1, #219	; 0xdb
 8004148:	482b      	ldr	r0, [pc, #172]	; (80041f8 <enemyDraw+0x184>)
 800414a:	f000 fc57 	bl	80049fc <iprintf>
	gotoxy(x-2,y-5);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1e9a      	subs	r2, r3, #2
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3b05      	subs	r3, #5
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fd fe37 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 800415e:	22db      	movs	r2, #219	; 0xdb
 8004160:	21db      	movs	r1, #219	; 0xdb
 8004162:	4825      	ldr	r0, [pc, #148]	; (80041f8 <enemyDraw+0x184>)
 8004164:	f000 fc4a 	bl	80049fc <iprintf>
	fgcolor(11);
 8004168:	200b      	movs	r0, #11
 800416a:	f7fd fdef 	bl	8001d4c <fgcolor>
	printf("%c",219);
 800416e:	20db      	movs	r0, #219	; 0xdb
 8004170:	f000 fc5c 	bl	8004a2c <putchar>
	fgcolor(1);
 8004174:	2001      	movs	r0, #1
 8004176:	f7fd fde9 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 800417a:	22db      	movs	r2, #219	; 0xdb
 800417c:	21db      	movs	r1, #219	; 0xdb
 800417e:	481e      	ldr	r0, [pc, #120]	; (80041f8 <enemyDraw+0x184>)
 8004180:	f000 fc3c 	bl	80049fc <iprintf>
	gotoxy(x-3,y-6);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1eda      	subs	r2, r3, #3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3b06      	subs	r3, #6
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7fd fe1c 	bl	8001dcc <gotoxy>
	printf("%c%c %c %c%c",219,219,219,219,219);
 8004194:	23db      	movs	r3, #219	; 0xdb
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	23db      	movs	r3, #219	; 0xdb
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	23db      	movs	r3, #219	; 0xdb
 800419e:	22db      	movs	r2, #219	; 0xdb
 80041a0:	21db      	movs	r1, #219	; 0xdb
 80041a2:	4816      	ldr	r0, [pc, #88]	; (80041fc <enemyDraw+0x188>)
 80041a4:	f000 fc2a 	bl	80049fc <iprintf>
	gotoxy(x-4,y-7);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1f1a      	subs	r2, r3, #4
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3b07      	subs	r3, #7
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7fd fe0a 	bl	8001dcc <gotoxy>
	printf("%c%c     %c%c",219,219,219,219);
 80041b8:	23db      	movs	r3, #219	; 0xdb
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	23db      	movs	r3, #219	; 0xdb
 80041be:	22db      	movs	r2, #219	; 0xdb
 80041c0:	21db      	movs	r1, #219	; 0xdb
 80041c2:	480f      	ldr	r0, [pc, #60]	; (8004200 <enemyDraw+0x18c>)
 80041c4:	f000 fc1a 	bl	80049fc <iprintf>
	gotoxy(x-4,y-8);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1f1a      	subs	r2, r3, #4
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3b08      	subs	r3, #8
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f7fd fdfa 	bl	8001dcc <gotoxy>
	printf("%c       %c",219,219);
 80041d8:	22db      	movs	r2, #219	; 0xdb
 80041da:	21db      	movs	r1, #219	; 0xdb
 80041dc:	4809      	ldr	r0, [pc, #36]	; (8004204 <enemyDraw+0x190>)
 80041de:	f000 fc0d 	bl	80049fc <iprintf>
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	0800609c 	.word	0x0800609c
 80041f0:	080060a8 	.word	0x080060a8
 80041f4:	08006040 	.word	0x08006040
 80041f8:	080060b4 	.word	0x080060b4
 80041fc:	080060bc 	.word	0x080060bc
 8004200:	08006064 	.word	0x08006064
 8004204:	08006074 	.word	0x08006074

08004208 <enemyRemove>:

void enemyRemove(int32_t x, int32_t y) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	gotoxy(x-3,y);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3b03      	subs	r3, #3
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fd fdd7 	bl	8001dcc <gotoxy>
	printf("       ");
 800421e:	4838      	ldr	r0, [pc, #224]	; (8004300 <enemyRemove+0xf8>)
 8004220:	f000 fbec 	bl	80049fc <iprintf>
	gotoxy(x-3,y-1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	1eda      	subs	r2, r3, #3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	3b01      	subs	r3, #1
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f7fd fdcc 	bl	8001dcc <gotoxy>
	printf("       ");
 8004234:	4832      	ldr	r0, [pc, #200]	; (8004300 <enemyRemove+0xf8>)
 8004236:	f000 fbe1 	bl	80049fc <iprintf>
	gotoxy(x-3,y-2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1eda      	subs	r2, r3, #3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3b02      	subs	r3, #2
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fd fdc1 	bl	8001dcc <gotoxy>
	printf("       ");
 800424a:	482d      	ldr	r0, [pc, #180]	; (8004300 <enemyRemove+0xf8>)
 800424c:	f000 fbd6 	bl	80049fc <iprintf>
	gotoxy(x-3,y-3);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	1eda      	subs	r2, r3, #3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3b03      	subs	r3, #3
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fd fdb6 	bl	8001dcc <gotoxy>
	printf("       ");
 8004260:	4827      	ldr	r0, [pc, #156]	; (8004300 <enemyRemove+0xf8>)
 8004262:	f000 fbcb 	bl	80049fc <iprintf>
	gotoxy(x-3,y-4);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	1eda      	subs	r2, r3, #3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	3b04      	subs	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fd fdab 	bl	8001dcc <gotoxy>
	printf("  ");
 8004276:	4823      	ldr	r0, [pc, #140]	; (8004304 <enemyRemove+0xfc>)
 8004278:	f000 fbc0 	bl	80049fc <iprintf>
	printf(" ");
 800427c:	2020      	movs	r0, #32
 800427e:	f000 fbd5 	bl	8004a2c <putchar>
	printf(" ");
 8004282:	2020      	movs	r0, #32
 8004284:	f000 fbd2 	bl	8004a2c <putchar>
	printf(" ");
 8004288:	2020      	movs	r0, #32
 800428a:	f000 fbcf 	bl	8004a2c <putchar>
	printf("  ");
 800428e:	481d      	ldr	r0, [pc, #116]	; (8004304 <enemyRemove+0xfc>)
 8004290:	f000 fbb4 	bl	80049fc <iprintf>
	gotoxy(x-2,y-5);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1e9a      	subs	r2, r3, #2
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3b05      	subs	r3, #5
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fd fd94 	bl	8001dcc <gotoxy>
	printf("  ");
 80042a4:	4817      	ldr	r0, [pc, #92]	; (8004304 <enemyRemove+0xfc>)
 80042a6:	f000 fba9 	bl	80049fc <iprintf>
	printf(" ");
 80042aa:	2020      	movs	r0, #32
 80042ac:	f000 fbbe 	bl	8004a2c <putchar>
	printf("  ");
 80042b0:	4814      	ldr	r0, [pc, #80]	; (8004304 <enemyRemove+0xfc>)
 80042b2:	f000 fba3 	bl	80049fc <iprintf>
	gotoxy(x-3,y-6);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	1eda      	subs	r2, r3, #3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3b06      	subs	r3, #6
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7fd fd83 	bl	8001dcc <gotoxy>
	printf("       ");
 80042c6:	480e      	ldr	r0, [pc, #56]	; (8004300 <enemyRemove+0xf8>)
 80042c8:	f000 fb98 	bl	80049fc <iprintf>
	gotoxy(x-4,y-7);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1f1a      	subs	r2, r3, #4
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	3b07      	subs	r3, #7
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fd fd78 	bl	8001dcc <gotoxy>
	printf("         ");
 80042dc:	480a      	ldr	r0, [pc, #40]	; (8004308 <enemyRemove+0x100>)
 80042de:	f000 fb8d 	bl	80049fc <iprintf>
	gotoxy(x-4,y-8);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1f1a      	subs	r2, r3, #4
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3b08      	subs	r3, #8
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f7fd fd6d 	bl	8001dcc <gotoxy>
	printf("         ");
 80042f2:	4805      	ldr	r0, [pc, #20]	; (8004308 <enemyRemove+0x100>)
 80042f4:	f000 fb82 	bl	80049fc <iprintf>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	08006080 	.word	0x08006080
 8004304:	080060cc 	.word	0x080060cc
 8004308:	08006090 	.word	0x08006090

0800430c <astroidDraw>:


void astroidDraw(int32_t x, int32_t y) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af04      	add	r7, sp, #16
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	fgcolor(7);
 8004316:	2007      	movs	r0, #7
 8004318:	f7fd fd18 	bl	8001d4c <fgcolor>
	gotoxy(x,y-3);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	3b03      	subs	r3, #3
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fd52 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 8004328:	22db      	movs	r2, #219	; 0xdb
 800432a:	21db      	movs	r1, #219	; 0xdb
 800432c:	484a      	ldr	r0, [pc, #296]	; (8004458 <astroidDraw+0x14c>)
 800432e:	f000 fb65 	bl	80049fc <iprintf>
	gotoxy(x-3,y-2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	1eda      	subs	r2, r3, #3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3b02      	subs	r3, #2
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fd fd45 	bl	8001dcc <gotoxy>
	printf("%c%c%c",219,219,219);
 8004342:	23db      	movs	r3, #219	; 0xdb
 8004344:	22db      	movs	r2, #219	; 0xdb
 8004346:	21db      	movs	r1, #219	; 0xdb
 8004348:	4844      	ldr	r0, [pc, #272]	; (800445c <astroidDraw+0x150>)
 800434a:	f000 fb57 	bl	80049fc <iprintf>
	fgcolor(8);
 800434e:	2008      	movs	r0, #8
 8004350:	f7fd fcfc 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 8004354:	22db      	movs	r2, #219	; 0xdb
 8004356:	21db      	movs	r1, #219	; 0xdb
 8004358:	483f      	ldr	r0, [pc, #252]	; (8004458 <astroidDraw+0x14c>)
 800435a:	f000 fb4f 	bl	80049fc <iprintf>
	fgcolor(7);
 800435e:	2007      	movs	r0, #7
 8004360:	f7fd fcf4 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 8004364:	22db      	movs	r2, #219	; 0xdb
 8004366:	21db      	movs	r1, #219	; 0xdb
 8004368:	483b      	ldr	r0, [pc, #236]	; (8004458 <astroidDraw+0x14c>)
 800436a:	f000 fb47 	bl	80049fc <iprintf>
	gotoxy(x-4,y-1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	1f1a      	subs	r2, r3, #4
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fd fd27 	bl	8001dcc <gotoxy>
	printf("%c",219);
 800437e:	20db      	movs	r0, #219	; 0xdb
 8004380:	f000 fb54 	bl	8004a2c <putchar>
	fgcolor(8);
 8004384:	2008      	movs	r0, #8
 8004386:	f7fd fce1 	bl	8001d4c <fgcolor>
	printf("%c%c%c%c%c%c",219,219,219,219,219,219);
 800438a:	23db      	movs	r3, #219	; 0xdb
 800438c:	9302      	str	r3, [sp, #8]
 800438e:	23db      	movs	r3, #219	; 0xdb
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	23db      	movs	r3, #219	; 0xdb
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	23db      	movs	r3, #219	; 0xdb
 8004398:	22db      	movs	r2, #219	; 0xdb
 800439a:	21db      	movs	r1, #219	; 0xdb
 800439c:	4830      	ldr	r0, [pc, #192]	; (8004460 <astroidDraw+0x154>)
 800439e:	f000 fb2d 	bl	80049fc <iprintf>
	fgcolor(7);
 80043a2:	2007      	movs	r0, #7
 80043a4:	f7fd fcd2 	bl	8001d4c <fgcolor>
	printf("%c",219);
 80043a8:	20db      	movs	r0, #219	; 0xdb
 80043aa:	f000 fb3f 	bl	8004a2c <putchar>
	gotoxy(x-4,y);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	6839      	ldr	r1, [r7, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fd09 	bl	8001dcc <gotoxy>
	printf("%c",219);
 80043ba:	20db      	movs	r0, #219	; 0xdb
 80043bc:	f000 fb36 	bl	8004a2c <putchar>
	fgcolor(8);
 80043c0:	2008      	movs	r0, #8
 80043c2:	f7fd fcc3 	bl	8001d4c <fgcolor>
	printf("%c%c%c%c%c%c%c",219,219,219,219,219,219,219);
 80043c6:	23db      	movs	r3, #219	; 0xdb
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	23db      	movs	r3, #219	; 0xdb
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	23db      	movs	r3, #219	; 0xdb
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	23db      	movs	r3, #219	; 0xdb
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	23db      	movs	r3, #219	; 0xdb
 80043d8:	22db      	movs	r2, #219	; 0xdb
 80043da:	21db      	movs	r1, #219	; 0xdb
 80043dc:	4821      	ldr	r0, [pc, #132]	; (8004464 <astroidDraw+0x158>)
 80043de:	f000 fb0d 	bl	80049fc <iprintf>
	fgcolor(7);
 80043e2:	2007      	movs	r0, #7
 80043e4:	f7fd fcb2 	bl	8001d4c <fgcolor>
	printf("%c",219);
 80043e8:	20db      	movs	r0, #219	; 0xdb
 80043ea:	f000 fb1f 	bl	8004a2c <putchar>
	gotoxy(x-3,y+1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1eda      	subs	r2, r3, #3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fd fce7 	bl	8001dcc <gotoxy>
	printf("%c%c",219,219);
 80043fe:	22db      	movs	r2, #219	; 0xdb
 8004400:	21db      	movs	r1, #219	; 0xdb
 8004402:	4815      	ldr	r0, [pc, #84]	; (8004458 <astroidDraw+0x14c>)
 8004404:	f000 fafa 	bl	80049fc <iprintf>
	fgcolor(8);
 8004408:	2008      	movs	r0, #8
 800440a:	f7fd fc9f 	bl	8001d4c <fgcolor>
	printf("%c%c%c%c",219,219,219,219);
 800440e:	23db      	movs	r3, #219	; 0xdb
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	23db      	movs	r3, #219	; 0xdb
 8004414:	22db      	movs	r2, #219	; 0xdb
 8004416:	21db      	movs	r1, #219	; 0xdb
 8004418:	4813      	ldr	r0, [pc, #76]	; (8004468 <astroidDraw+0x15c>)
 800441a:	f000 faef 	bl	80049fc <iprintf>
	fgcolor(7);
 800441e:	2007      	movs	r0, #7
 8004420:	f7fd fc94 	bl	8001d4c <fgcolor>
	printf("%c%c",219,219);
 8004424:	22db      	movs	r2, #219	; 0xdb
 8004426:	21db      	movs	r1, #219	; 0xdb
 8004428:	480b      	ldr	r0, [pc, #44]	; (8004458 <astroidDraw+0x14c>)
 800442a:	f000 fae7 	bl	80049fc <iprintf>
	gotoxy(x-1,y+2);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1e5a      	subs	r2, r3, #1
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	3302      	adds	r3, #2
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fd fcc7 	bl	8001dcc <gotoxy>
	printf("%c%c%c%c",219,219,219,219);
 800443e:	23db      	movs	r3, #219	; 0xdb
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	23db      	movs	r3, #219	; 0xdb
 8004444:	22db      	movs	r2, #219	; 0xdb
 8004446:	21db      	movs	r1, #219	; 0xdb
 8004448:	4807      	ldr	r0, [pc, #28]	; (8004468 <astroidDraw+0x15c>)
 800444a:	f000 fad7 	bl	80049fc <iprintf>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	080060b4 	.word	0x080060b4
 800445c:	08006038 	.word	0x08006038
 8004460:	080060d0 	.word	0x080060d0
 8004464:	08006040 	.word	0x08006040
 8004468:	080060e0 	.word	0x080060e0

0800446c <astroidRemove>:

void astroidRemove(int32_t x, int32_t y) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	gotoxy(x,y-3);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	3b03      	subs	r3, #3
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fd fca5 	bl	8001dcc <gotoxy>
	printf("  ");
 8004482:	482a      	ldr	r0, [pc, #168]	; (800452c <astroidRemove+0xc0>)
 8004484:	f000 faba 	bl	80049fc <iprintf>
	gotoxy(x-3,y-2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1eda      	subs	r2, r3, #3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	3b02      	subs	r3, #2
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fd fc9a 	bl	8001dcc <gotoxy>
	printf("   ");
 8004498:	4825      	ldr	r0, [pc, #148]	; (8004530 <astroidRemove+0xc4>)
 800449a:	f000 faaf 	bl	80049fc <iprintf>
	printf("  ");
 800449e:	4823      	ldr	r0, [pc, #140]	; (800452c <astroidRemove+0xc0>)
 80044a0:	f000 faac 	bl	80049fc <iprintf>
	printf("  ");
 80044a4:	4821      	ldr	r0, [pc, #132]	; (800452c <astroidRemove+0xc0>)
 80044a6:	f000 faa9 	bl	80049fc <iprintf>
	gotoxy(x-4,y-1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	1f1a      	subs	r2, r3, #4
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fd fc89 	bl	8001dcc <gotoxy>
	printf(" ");
 80044ba:	2020      	movs	r0, #32
 80044bc:	f000 fab6 	bl	8004a2c <putchar>
	printf("      ");
 80044c0:	481c      	ldr	r0, [pc, #112]	; (8004534 <astroidRemove+0xc8>)
 80044c2:	f000 fa9b 	bl	80049fc <iprintf>
	printf(" ");
 80044c6:	2020      	movs	r0, #32
 80044c8:	f000 fab0 	bl	8004a2c <putchar>
	gotoxy(x-4,y);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b04      	subs	r3, #4
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fc7a 	bl	8001dcc <gotoxy>
	printf(" ");
 80044d8:	2020      	movs	r0, #32
 80044da:	f000 faa7 	bl	8004a2c <putchar>
	printf("       ");
 80044de:	4816      	ldr	r0, [pc, #88]	; (8004538 <astroidRemove+0xcc>)
 80044e0:	f000 fa8c 	bl	80049fc <iprintf>
	printf(" ");
 80044e4:	2020      	movs	r0, #32
 80044e6:	f000 faa1 	bl	8004a2c <putchar>
	gotoxy(x-3,y+1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1eda      	subs	r2, r3, #3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fd fc69 	bl	8001dcc <gotoxy>
	printf("  ");
 80044fa:	480c      	ldr	r0, [pc, #48]	; (800452c <astroidRemove+0xc0>)
 80044fc:	f000 fa7e 	bl	80049fc <iprintf>
	printf("    ");
 8004500:	480e      	ldr	r0, [pc, #56]	; (800453c <astroidRemove+0xd0>)
 8004502:	f000 fa7b 	bl	80049fc <iprintf>
	printf("  ");
 8004506:	4809      	ldr	r0, [pc, #36]	; (800452c <astroidRemove+0xc0>)
 8004508:	f000 fa78 	bl	80049fc <iprintf>
	gotoxy(x-1,y+2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1e5a      	subs	r2, r3, #1
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3302      	adds	r3, #2
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7fd fc58 	bl	8001dcc <gotoxy>
	printf("    ");
 800451c:	4807      	ldr	r0, [pc, #28]	; (800453c <astroidRemove+0xd0>)
 800451e:	f000 fa6d 	bl	80049fc <iprintf>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	080060cc 	.word	0x080060cc
 8004530:	080060ec 	.word	0x080060ec
 8004534:	080060f0 	.word	0x080060f0
 8004538:	08006080 	.word	0x08006080
 800453c:	080060f8 	.word	0x080060f8

08004540 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e00a      	b.n	8004568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004552:	f3af 8000 	nop.w
 8004556:	4601      	mov	r1, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	60ba      	str	r2, [r7, #8]
 800455e:	b2ca      	uxtb	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3301      	adds	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	dbf0      	blt.n	8004552 <_read+0x12>
	}

return len;
 8004570:	687b      	ldr	r3, [r7, #4]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_close>:
	}
	return len;
}

int _close(int file)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
	return -1;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045a2:	605a      	str	r2, [r3, #4]
	return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <_isatty>:

int _isatty(int file)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
	return 1;
 80045ba:	2301      	movs	r3, #1
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
	return 0;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <_sbrk+0x50>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <_sbrk+0x16>
		heap_end = &end;
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <_sbrk+0x50>)
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <_sbrk+0x54>)
 80045f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <_sbrk+0x50>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <_sbrk+0x50>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	466a      	mov	r2, sp
 800460a:	4293      	cmp	r3, r2
 800460c:	d907      	bls.n	800461e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800460e:	f000 f9c3 	bl	8004998 <__errno>
 8004612:	4603      	mov	r3, r0
 8004614:	220c      	movs	r2, #12
 8004616:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e006      	b.n	800462c <_sbrk+0x48>
	}

	heap_end += incr;
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <_sbrk+0x50>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	4a03      	ldr	r2, [pc, #12]	; (8004634 <_sbrk+0x50>)
 8004628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	200000d0 	.word	0x200000d0
 8004638:	200000e8 	.word	0x200000e8

0800463c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004640:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <SystemInit+0x84>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <SystemInit+0x84>)
 8004648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800464c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <SystemInit+0x88>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <SystemInit+0x88>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <SystemInit+0x88>)
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4918      	ldr	r1, [pc, #96]	; (80046c4 <SystemInit+0x88>)
 8004662:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <SystemInit+0x8c>)
 8004664:	4013      	ands	r3, r2
 8004666:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <SystemInit+0x88>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <SystemInit+0x88>)
 800466e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <SystemInit+0x88>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <SystemInit+0x88>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004682:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <SystemInit+0x88>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <SystemInit+0x88>)
 800468a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800468e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <SystemInit+0x88>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <SystemInit+0x88>)
 8004696:	f023 030f 	bic.w	r3, r3, #15
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <SystemInit+0x88>)
 800469e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a0:	4908      	ldr	r1, [pc, #32]	; (80046c4 <SystemInit+0x88>)
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <SystemInit+0x90>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <SystemInit+0x88>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80046ae:	f000 f80f 	bl	80046d0 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80046b2:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <SystemInit+0x84>)
 80046b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046b8:	609a      	str	r2, [r3, #8]
#endif  
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	e000ed00 	.word	0xe000ed00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	f87fc00c 	.word	0xf87fc00c
 80046cc:	ff00fccc 	.word	0xff00fccc

080046d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <SetSysClock+0x8c>)
 80046d6:	2212      	movs	r2, #18
 80046d8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <SetSysClock+0x90>)
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <SetSysClock+0x90>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <SetSysClock+0x90>)
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <SetSysClock+0x90>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <SetSysClock+0x90>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <SetSysClock+0x90>)
 80046f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <SetSysClock+0x90>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a19      	ldr	r2, [pc, #100]	; (8004760 <SetSysClock+0x90>)
 80046fc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004700:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <SetSysClock+0x90>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <SetSysClock+0x90>)
 8004708:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800470c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <SetSysClock+0x90>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <SetSysClock+0x90>)
 8004714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004718:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800471a:	bf00      	nop
 800471c:	4b10      	ldr	r3, [pc, #64]	; (8004760 <SetSysClock+0x90>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f9      	beq.n	800471c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <SetSysClock+0x90>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <SetSysClock+0x90>)
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <SetSysClock+0x90>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <SetSysClock+0x90>)
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8004740:	bf00      	nop
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <SetSysClock+0x90>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d1f9      	bne.n	8004742 <SetSysClock+0x72>
  {
  }
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40022000 	.word	0x40022000
 8004760:	40021000 	.word	0x40021000

08004764 <NVIC_EnableIRQ>:
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2201      	movs	r2, #1
 8004776:	fa02 f103 	lsl.w	r1, r2, r3
 800477a:	4a06      	ldr	r2, [pc, #24]	; (8004794 <NVIC_EnableIRQ+0x30>)
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000e100 	.word	0xe000e100

08004798 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da0b      	bge.n	80047c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <NVIC_SetPriority+0x4c>)
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	3b04      	subs	r3, #4
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	440b      	add	r3, r1
 80047c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80047c2:	e009      	b.n	80047d8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4907      	ldr	r1, [pc, #28]	; (80047e8 <NVIC_SetPriority+0x50>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	e000e100 	.word	0xe000e100

080047ec <clockInit>:
#include "timer.h"


void clockInit(){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2Periph_TIM15; // Enable clock line to timer 15;
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <clockInit+0x54>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	4a12      	ldr	r2, [pc, #72]	; (8004840 <clockInit+0x54>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = 0x0000;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <clockInit+0x58>)
 80047fe:	2200      	movs	r2, #0
 8004800:	801a      	strh	r2, [r3, #0]
	TIM15->ARR = 0x18FF; // Set auto reload value
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <clockInit+0x58>)
 8004804:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8004808:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 0x0000; // Set pre-scaler value
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <clockInit+0x58>)
 800480c:	2200      	movs	r2, #0
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 0x0001; // Enable timer interrupt
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <clockInit+0x58>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <clockInit+0x58>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 800481c:	2100      	movs	r1, #0
 800481e:	2018      	movs	r0, #24
 8004820:	f7ff ffba 	bl	8004798 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004824:	2018      	movs	r0, #24
 8004826:	f7ff ff9d 	bl	8004764 <NVIC_EnableIRQ>
	TIM15->CR1 |= 0x0001; // Enable timer
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <clockInit+0x58>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <clockInit+0x58>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	40014000 	.word	0x40014000

08004848 <clockCounter>:

void clockCounter(int32_t score,int32_t *c1,int32_t *c2,int32_t *c3,int16_t *flagF, int16_t *flagE, int16_t *flagR, int8_t *level){
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
	static int32_t nextInterval = 100<<8;
	static int32_t time = 1000<<8;
	if (score<<8 < nextInterval){
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <clockCounter+0xf4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	da27      	bge.n	80048b2 <clockCounter+0x6a>
		if (*c1 >= time>>1){
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <clockCounter+0xf8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	105b      	asrs	r3, r3, #1
 800486c:	429a      	cmp	r2, r3
 800486e:	db05      	blt.n	800487c <clockCounter+0x34>
			*flagF = 1;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2201      	movs	r2, #1
 8004874:	801a      	strh	r2, [r3, #0]
			*c1=0;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
		}
		if (*c2 >= time<<1){
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <clockCounter+0xf8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	429a      	cmp	r2, r3
 8004888:	db05      	blt.n	8004896 <clockCounter+0x4e>
			*flagE = 1;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2201      	movs	r2, #1
 800488e:	801a      	strh	r2, [r3, #0]
			*c2=0;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
		}
		if (*c3>= time<<5){
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <clockCounter+0xf8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	429a      	cmp	r2, r3
 80048a2:	db44      	blt.n	800492e <clockCounter+0xe6>
			*flagR = 1;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2201      	movs	r2, #1
 80048a8:	801a      	strh	r2, [r3, #0]
			*c3=0;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
			*c3=0;
		}
		nextInterval = nextInterval<<1;
	}

}
 80048b0:	e03d      	b.n	800492e <clockCounter+0xe6>
	}else if (score<<8 == nextInterval){
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	021a      	lsls	r2, r3, #8
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <clockCounter+0xf4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d137      	bne.n	800492e <clockCounter+0xe6>
		time = FIX8_MULT(time, 0xE7);
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <clockCounter+0xf8>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	4413      	add	r3, r2
 80048cc:	121b      	asrs	r3, r3, #8
 80048ce:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <clockCounter+0xf8>)
 80048d0:	6013      	str	r3, [r2, #0]
		*level++;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	3301      	adds	r3, #1
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (*c1 >= time>>1){
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <clockCounter+0xf8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	105b      	asrs	r3, r3, #1
 80048e2:	429a      	cmp	r2, r3
 80048e4:	db05      	blt.n	80048f2 <clockCounter+0xaa>
			*flagF = 1;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2201      	movs	r2, #1
 80048ea:	801a      	strh	r2, [r3, #0]
			*c1=0;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
		if (*c2 >= time){
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <clockCounter+0xf8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	db05      	blt.n	800490a <clockCounter+0xc2>
			*flagE = 1;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2201      	movs	r2, #1
 8004902:	801a      	strh	r2, [r3, #0]
			*c2=0;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
		if (*c3>= time<<5){
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <clockCounter+0xf8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	015b      	lsls	r3, r3, #5
 8004914:	429a      	cmp	r2, r3
 8004916:	db05      	blt.n	8004924 <clockCounter+0xdc>
			*flagR = 1;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2201      	movs	r2, #1
 800491c:	801a      	strh	r2, [r3, #0]
			*c3=0;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
		nextInterval = nextInterval<<1;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <clockCounter+0xf4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4a04      	ldr	r2, [pc, #16]	; (800493c <clockCounter+0xf4>)
 800492c:	6013      	str	r3, [r2, #0]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000002c 	.word	0x2000002c
 8004940:	20000030 	.word	0x20000030

08004944 <Reset_Handler>:
 8004944:	480d      	ldr	r0, [pc, #52]	; (800497c <LoopForever+0x2>)
 8004946:	4685      	mov	sp, r0
 8004948:	480d      	ldr	r0, [pc, #52]	; (8004980 <LoopForever+0x6>)
 800494a:	490e      	ldr	r1, [pc, #56]	; (8004984 <LoopForever+0xa>)
 800494c:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <LoopForever+0xe>)
 800494e:	2300      	movs	r3, #0
 8004950:	e002      	b.n	8004958 <LoopCopyDataInit>

08004952 <CopyDataInit>:
 8004952:	58d4      	ldr	r4, [r2, r3]
 8004954:	50c4      	str	r4, [r0, r3]
 8004956:	3304      	adds	r3, #4

08004958 <LoopCopyDataInit>:
 8004958:	18c4      	adds	r4, r0, r3
 800495a:	428c      	cmp	r4, r1
 800495c:	d3f9      	bcc.n	8004952 <CopyDataInit>
 800495e:	4a0b      	ldr	r2, [pc, #44]	; (800498c <LoopForever+0x12>)
 8004960:	4c0b      	ldr	r4, [pc, #44]	; (8004990 <LoopForever+0x16>)
 8004962:	2300      	movs	r3, #0
 8004964:	e001      	b.n	800496a <LoopFillZerobss>

08004966 <FillZerobss>:
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	3204      	adds	r2, #4

0800496a <LoopFillZerobss>:
 800496a:	42a2      	cmp	r2, r4
 800496c:	d3fb      	bcc.n	8004966 <FillZerobss>
 800496e:	f7ff fe65 	bl	800463c <SystemInit>
 8004972:	f000 f817 	bl	80049a4 <__libc_init_array>
 8004976:	f7fe fbbf 	bl	80030f8 <main>

0800497a <LoopForever>:
 800497a:	e7fe      	b.n	800497a <LoopForever>
 800497c:	20004000 	.word	0x20004000
 8004980:	20000000 	.word	0x20000000
 8004984:	20000098 	.word	0x20000098
 8004988:	080063bc 	.word	0x080063bc
 800498c:	20000098 	.word	0x20000098
 8004990:	200000e4 	.word	0x200000e4

08004994 <ADC1_2_IRQHandler>:
 8004994:	e7fe      	b.n	8004994 <ADC1_2_IRQHandler>
	...

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000034 	.word	0x20000034

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f001 faac 	bl	8005f14 <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	080063b4 	.word	0x080063b4
 80049e0:	080063b4 	.word	0x080063b4
 80049e4:	080063b4 	.word	0x080063b4
 80049e8:	080063b8 	.word	0x080063b8

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <iprintf>:
 80049fc:	b40f      	push	{r0, r1, r2, r3}
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <iprintf+0x2c>)
 8004a00:	b513      	push	{r0, r1, r4, lr}
 8004a02:	681c      	ldr	r4, [r3, #0]
 8004a04:	b124      	cbz	r4, 8004a10 <iprintf+0x14>
 8004a06:	69a3      	ldr	r3, [r4, #24]
 8004a08:	b913      	cbnz	r3, 8004a10 <iprintf+0x14>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 fa2c 	bl	8004e68 <__sinit>
 8004a10:	ab05      	add	r3, sp, #20
 8004a12:	9a04      	ldr	r2, [sp, #16]
 8004a14:	68a1      	ldr	r1, [r4, #8]
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fd99 	bl	8005550 <_vfiprintf_r>
 8004a1e:	b002      	add	sp, #8
 8004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a24:	b004      	add	sp, #16
 8004a26:	4770      	bx	lr
 8004a28:	20000034 	.word	0x20000034

08004a2c <putchar>:
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <putchar+0x28>)
 8004a2e:	b513      	push	{r0, r1, r4, lr}
 8004a30:	681c      	ldr	r4, [r3, #0]
 8004a32:	4601      	mov	r1, r0
 8004a34:	b134      	cbz	r4, 8004a44 <putchar+0x18>
 8004a36:	69a3      	ldr	r3, [r4, #24]
 8004a38:	b923      	cbnz	r3, 8004a44 <putchar+0x18>
 8004a3a:	9001      	str	r0, [sp, #4]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 fa13 	bl	8004e68 <__sinit>
 8004a42:	9901      	ldr	r1, [sp, #4]
 8004a44:	68a2      	ldr	r2, [r4, #8]
 8004a46:	4620      	mov	r0, r4
 8004a48:	b002      	add	sp, #8
 8004a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4e:	f001 b843 	b.w	8005ad8 <_putc_r>
 8004a52:	bf00      	nop
 8004a54:	20000034 	.word	0x20000034

08004a58 <setbuf>:
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5e:	bf0c      	ite	eq
 8004a60:	2202      	moveq	r2, #2
 8004a62:	2200      	movne	r2, #0
 8004a64:	f000 b800 	b.w	8004a68 <setvbuf>

08004a68 <setvbuf>:
 8004a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <setvbuf+0x17c>)
 8004a70:	681f      	ldr	r7, [r3, #0]
 8004a72:	4604      	mov	r4, r0
 8004a74:	460e      	mov	r6, r1
 8004a76:	4690      	mov	r8, r2
 8004a78:	b127      	cbz	r7, 8004a84 <setvbuf+0x1c>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	b913      	cbnz	r3, 8004a84 <setvbuf+0x1c>
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f000 f9f2 	bl	8004e68 <__sinit>
 8004a84:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <setvbuf+0x180>)
 8004a86:	429c      	cmp	r4, r3
 8004a88:	d167      	bne.n	8004b5a <setvbuf+0xf2>
 8004a8a:	687c      	ldr	r4, [r7, #4]
 8004a8c:	f1b8 0f02 	cmp.w	r8, #2
 8004a90:	d006      	beq.n	8004aa0 <setvbuf+0x38>
 8004a92:	f1b8 0f01 	cmp.w	r8, #1
 8004a96:	f200 809f 	bhi.w	8004bd8 <setvbuf+0x170>
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	f2c0 809c 	blt.w	8004bd8 <setvbuf+0x170>
 8004aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa2:	07db      	lsls	r3, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <setvbuf+0x4a>
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	0598      	lsls	r0, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <setvbuf+0x4a>
 8004aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aae:	f000 fa79 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f000 f943 	bl	8004d40 <_fflush_r>
 8004aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abc:	b141      	cbz	r1, 8004ad0 <setvbuf+0x68>
 8004abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d002      	beq.n	8004acc <setvbuf+0x64>
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f000 fadc 	bl	8005084 <_free_r>
 8004acc:	2300      	movs	r3, #0
 8004ace:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61a3      	str	r3, [r4, #24]
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	0619      	lsls	r1, r3, #24
 8004ada:	d503      	bpl.n	8004ae4 <setvbuf+0x7c>
 8004adc:	6921      	ldr	r1, [r4, #16]
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f000 fad0 	bl	8005084 <_free_r>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	f1b8 0f02 	cmp.w	r8, #2
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	d06c      	beq.n	8004bd0 <setvbuf+0x168>
 8004af6:	ab01      	add	r3, sp, #4
 8004af8:	466a      	mov	r2, sp
 8004afa:	4621      	mov	r1, r4
 8004afc:	4638      	mov	r0, r7
 8004afe:	f000 fa53 	bl	8004fa8 <__swhatbuf_r>
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	4318      	orrs	r0, r3
 8004b06:	81a0      	strh	r0, [r4, #12]
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	d130      	bne.n	8004b6e <setvbuf+0x106>
 8004b0c:	9d00      	ldr	r5, [sp, #0]
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fab0 	bl	8005074 <malloc>
 8004b14:	4606      	mov	r6, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d155      	bne.n	8004bc6 <setvbuf+0x15e>
 8004b1a:	f8dd 9000 	ldr.w	r9, [sp]
 8004b1e:	45a9      	cmp	r9, r5
 8004b20:	d14a      	bne.n	8004bb8 <setvbuf+0x150>
 8004b22:	f04f 35ff 	mov.w	r5, #4294967295
 8004b26:	2200      	movs	r2, #0
 8004b28:	60a2      	str	r2, [r4, #8]
 8004b2a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004b2e:	6022      	str	r2, [r4, #0]
 8004b30:	6122      	str	r2, [r4, #16]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b38:	6162      	str	r2, [r4, #20]
 8004b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b3c:	f043 0302 	orr.w	r3, r3, #2
 8004b40:	07d2      	lsls	r2, r2, #31
 8004b42:	81a3      	strh	r3, [r4, #12]
 8004b44:	d405      	bmi.n	8004b52 <setvbuf+0xea>
 8004b46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b4a:	d102      	bne.n	8004b52 <setvbuf+0xea>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4e:	f000 fa2a 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004b52:	4628      	mov	r0, r5
 8004b54:	b003      	add	sp, #12
 8004b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <setvbuf+0x184>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	d101      	bne.n	8004b64 <setvbuf+0xfc>
 8004b60:	68bc      	ldr	r4, [r7, #8]
 8004b62:	e793      	b.n	8004a8c <setvbuf+0x24>
 8004b64:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <setvbuf+0x188>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	bf08      	it	eq
 8004b6a:	68fc      	ldreq	r4, [r7, #12]
 8004b6c:	e78e      	b.n	8004a8c <setvbuf+0x24>
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d0cd      	beq.n	8004b0e <setvbuf+0xa6>
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	b913      	cbnz	r3, 8004b7c <setvbuf+0x114>
 8004b76:	4638      	mov	r0, r7
 8004b78:	f000 f976 	bl	8004e68 <__sinit>
 8004b7c:	f1b8 0f01 	cmp.w	r8, #1
 8004b80:	bf08      	it	eq
 8004b82:	89a3      	ldrheq	r3, [r4, #12]
 8004b84:	6026      	str	r6, [r4, #0]
 8004b86:	bf04      	itt	eq
 8004b88:	f043 0301 	orreq.w	r3, r3, #1
 8004b8c:	81a3      	strheq	r3, [r4, #12]
 8004b8e:	89a2      	ldrh	r2, [r4, #12]
 8004b90:	f012 0308 	ands.w	r3, r2, #8
 8004b94:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004b98:	d01c      	beq.n	8004bd4 <setvbuf+0x16c>
 8004b9a:	07d3      	lsls	r3, r2, #31
 8004b9c:	bf41      	itttt	mi
 8004b9e:	2300      	movmi	r3, #0
 8004ba0:	426d      	negmi	r5, r5
 8004ba2:	60a3      	strmi	r3, [r4, #8]
 8004ba4:	61a5      	strmi	r5, [r4, #24]
 8004ba6:	bf58      	it	pl
 8004ba8:	60a5      	strpl	r5, [r4, #8]
 8004baa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004bac:	f015 0501 	ands.w	r5, r5, #1
 8004bb0:	d115      	bne.n	8004bde <setvbuf+0x176>
 8004bb2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004bb6:	e7c8      	b.n	8004b4a <setvbuf+0xe2>
 8004bb8:	4648      	mov	r0, r9
 8004bba:	f000 fa5b 	bl	8005074 <malloc>
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d0ae      	beq.n	8004b22 <setvbuf+0xba>
 8004bc4:	464d      	mov	r5, r9
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	e7d0      	b.n	8004b72 <setvbuf+0x10a>
 8004bd0:	2500      	movs	r5, #0
 8004bd2:	e7a8      	b.n	8004b26 <setvbuf+0xbe>
 8004bd4:	60a3      	str	r3, [r4, #8]
 8004bd6:	e7e8      	b.n	8004baa <setvbuf+0x142>
 8004bd8:	f04f 35ff 	mov.w	r5, #4294967295
 8004bdc:	e7b9      	b.n	8004b52 <setvbuf+0xea>
 8004bde:	2500      	movs	r5, #0
 8004be0:	e7b7      	b.n	8004b52 <setvbuf+0xea>
 8004be2:	bf00      	nop
 8004be4:	20000034 	.word	0x20000034
 8004be8:	08006340 	.word	0x08006340
 8004bec:	08006360 	.word	0x08006360
 8004bf0:	08006320 	.word	0x08006320

08004bf4 <siprintf>:
 8004bf4:	b40e      	push	{r1, r2, r3}
 8004bf6:	b500      	push	{lr}
 8004bf8:	b09c      	sub	sp, #112	; 0x70
 8004bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8004bfc:	9002      	str	r0, [sp, #8]
 8004bfe:	9006      	str	r0, [sp, #24]
 8004c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c04:	4809      	ldr	r0, [pc, #36]	; (8004c2c <siprintf+0x38>)
 8004c06:	9107      	str	r1, [sp, #28]
 8004c08:	9104      	str	r1, [sp, #16]
 8004c0a:	4909      	ldr	r1, [pc, #36]	; (8004c30 <siprintf+0x3c>)
 8004c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c10:	9105      	str	r1, [sp, #20]
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	a902      	add	r1, sp, #8
 8004c18:	f000 fb70 	bl	80052fc <_svfiprintf_r>
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	b01c      	add	sp, #112	; 0x70
 8004c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c28:	b003      	add	sp, #12
 8004c2a:	4770      	bx	lr
 8004c2c:	20000034 	.word	0x20000034
 8004c30:	ffff0208 	.word	0xffff0208

08004c34 <__sflush_r>:
 8004c34:	898a      	ldrh	r2, [r1, #12]
 8004c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	0710      	lsls	r0, r2, #28
 8004c3e:	460c      	mov	r4, r1
 8004c40:	d458      	bmi.n	8004cf4 <__sflush_r+0xc0>
 8004c42:	684b      	ldr	r3, [r1, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc05      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc02      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d0f9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	d032      	beq.n	8004ccc <__sflush_r+0x98>
 8004c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	075a      	lsls	r2, r3, #29
 8004c6c:	d505      	bpl.n	8004c7a <__sflush_r+0x46>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	1ac0      	subs	r0, r0, r3
 8004c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c74:	b10b      	cbz	r3, 8004c7a <__sflush_r+0x46>
 8004c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	d106      	bne.n	8004c9a <__sflush_r+0x66>
 8004c8c:	6829      	ldr	r1, [r5, #0]
 8004c8e:	291d      	cmp	r1, #29
 8004c90:	d82c      	bhi.n	8004cec <__sflush_r+0xb8>
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <__sflush_r+0x108>)
 8004c94:	40ca      	lsrs	r2, r1
 8004c96:	07d6      	lsls	r6, r2, #31
 8004c98:	d528      	bpl.n	8004cec <__sflush_r+0xb8>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6062      	str	r2, [r4, #4]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	d504      	bpl.n	8004cb0 <__sflush_r+0x7c>
 8004ca6:	1c42      	adds	r2, r0, #1
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0x7a>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b903      	cbnz	r3, 8004cb0 <__sflush_r+0x7c>
 8004cae:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb2:	602f      	str	r7, [r5, #0]
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d0ca      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	d002      	beq.n	8004cc6 <__sflush_r+0x92>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 f9df 	bl	8005084 <_free_r>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cca:	e7c1      	b.n	8004c50 <__sflush_r+0x1c>
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b0      	blx	r6
 8004cd4:	1c41      	adds	r1, r0, #1
 8004cd6:	d1c7      	bne.n	8004c68 <__sflush_r+0x34>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c4      	beq.n	8004c68 <__sflush_r+0x34>
 8004cde:	2b1d      	cmp	r3, #29
 8004ce0:	d001      	beq.n	8004ce6 <__sflush_r+0xb2>
 8004ce2:	2b16      	cmp	r3, #22
 8004ce4:	d101      	bne.n	8004cea <__sflush_r+0xb6>
 8004ce6:	602f      	str	r7, [r5, #0]
 8004ce8:	e7b1      	b.n	8004c4e <__sflush_r+0x1a>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e7ad      	b.n	8004c50 <__sflush_r+0x1c>
 8004cf4:	690f      	ldr	r7, [r1, #16]
 8004cf6:	2f00      	cmp	r7, #0
 8004cf8:	d0a9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cfa:	0793      	lsls	r3, r2, #30
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	bf08      	it	eq
 8004d00:	694b      	ldreq	r3, [r1, #20]
 8004d02:	600f      	str	r7, [r1, #0]
 8004d04:	bf18      	it	ne
 8004d06:	2300      	movne	r3, #0
 8004d08:	eba6 0807 	sub.w	r8, r6, r7
 8004d0c:	608b      	str	r3, [r1, #8]
 8004d0e:	f1b8 0f00 	cmp.w	r8, #0
 8004d12:	dd9c      	ble.n	8004c4e <__sflush_r+0x1a>
 8004d14:	6a21      	ldr	r1, [r4, #32]
 8004d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d18:	4643      	mov	r3, r8
 8004d1a:	463a      	mov	r2, r7
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	2800      	cmp	r0, #0
 8004d22:	dc06      	bgt.n	8004d32 <__sflush_r+0xfe>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e78e      	b.n	8004c50 <__sflush_r+0x1c>
 8004d32:	4407      	add	r7, r0
 8004d34:	eba8 0800 	sub.w	r8, r8, r0
 8004d38:	e7e9      	b.n	8004d0e <__sflush_r+0xda>
 8004d3a:	bf00      	nop
 8004d3c:	20400001 	.word	0x20400001

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6983      	ldr	r3, [r0, #24]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f000 f887 	bl	8004e68 <__sinit>
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <_fflush_r+0x6c>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d11b      	bne.n	8004d98 <_fflush_r+0x58>
 8004d60:	686c      	ldr	r4, [r5, #4]
 8004d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ef      	beq.n	8004d4a <_fflush_r+0xa>
 8004d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d6c:	07d0      	lsls	r0, r2, #31
 8004d6e:	d404      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d70:	0599      	lsls	r1, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d76:	f000 f915 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	f7ff ff59 	bl	8004c34 <__sflush_r>
 8004d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d84:	07da      	lsls	r2, r3, #31
 8004d86:	4605      	mov	r5, r0
 8004d88:	d4e0      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	059b      	lsls	r3, r3, #22
 8004d8e:	d4dd      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d92:	f000 f908 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004d96:	e7d9      	b.n	8004d4c <_fflush_r+0xc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <_fflush_r+0x70>)
 8004d9a:	429c      	cmp	r4, r3
 8004d9c:	d101      	bne.n	8004da2 <_fflush_r+0x62>
 8004d9e:	68ac      	ldr	r4, [r5, #8]
 8004da0:	e7df      	b.n	8004d62 <_fflush_r+0x22>
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <_fflush_r+0x74>)
 8004da4:	429c      	cmp	r4, r3
 8004da6:	bf08      	it	eq
 8004da8:	68ec      	ldreq	r4, [r5, #12]
 8004daa:	e7da      	b.n	8004d62 <_fflush_r+0x22>
 8004dac:	08006340 	.word	0x08006340
 8004db0:	08006360 	.word	0x08006360
 8004db4:	08006320 	.word	0x08006320

08004db8 <std>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	8181      	strh	r1, [r0, #12]
 8004dca:	6643      	str	r3, [r0, #100]	; 0x64
 8004dcc:	81c2      	strh	r2, [r0, #14]
 8004dce:	6183      	str	r3, [r0, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	305c      	adds	r0, #92	; 0x5c
 8004dd6:	f7ff fe09 	bl	80049ec <memset>
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x38>)
 8004ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <std+0x3c>)
 8004de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x40>)
 8004de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <std+0x44>)
 8004de8:	6224      	str	r4, [r4, #32]
 8004dea:	6323      	str	r3, [r4, #48]	; 0x30
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	bf00      	nop
 8004df0:	08005b89 	.word	0x08005b89
 8004df4:	08005bab 	.word	0x08005bab
 8004df8:	08005be3 	.word	0x08005be3
 8004dfc:	08005c07 	.word	0x08005c07

08004e00 <_cleanup_r>:
 8004e00:	4901      	ldr	r1, [pc, #4]	; (8004e08 <_cleanup_r+0x8>)
 8004e02:	f000 b8af 	b.w	8004f64 <_fwalk_reent>
 8004e06:	bf00      	nop
 8004e08:	08004d41 	.word	0x08004d41

08004e0c <__sfmoreglue>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	2268      	movs	r2, #104	; 0x68
 8004e10:	1e4d      	subs	r5, r1, #1
 8004e12:	4355      	muls	r5, r2
 8004e14:	460e      	mov	r6, r1
 8004e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e1a:	f000 f99f 	bl	800515c <_malloc_r>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	b140      	cbz	r0, 8004e34 <__sfmoreglue+0x28>
 8004e22:	2100      	movs	r1, #0
 8004e24:	e9c0 1600 	strd	r1, r6, [r0]
 8004e28:	300c      	adds	r0, #12
 8004e2a:	60a0      	str	r0, [r4, #8]
 8004e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e30:	f7ff fddc 	bl	80049ec <memset>
 8004e34:	4620      	mov	r0, r4
 8004e36:	bd70      	pop	{r4, r5, r6, pc}

08004e38 <__sfp_lock_acquire>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sfp_lock_acquire+0x8>)
 8004e3a:	f000 b8b3 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e3e:	bf00      	nop
 8004e40:	200000d5 	.word	0x200000d5

08004e44 <__sfp_lock_release>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__sfp_lock_release+0x8>)
 8004e46:	f000 b8ae 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	200000d5 	.word	0x200000d5

08004e50 <__sinit_lock_acquire>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sinit_lock_acquire+0x8>)
 8004e52:	f000 b8a7 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	200000d6 	.word	0x200000d6

08004e5c <__sinit_lock_release>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sinit_lock_release+0x8>)
 8004e5e:	f000 b8a2 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	200000d6 	.word	0x200000d6

08004e68 <__sinit>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	f7ff fff0 	bl	8004e50 <__sinit_lock_acquire>
 8004e70:	69a3      	ldr	r3, [r4, #24]
 8004e72:	b11b      	cbz	r3, 8004e7c <__sinit+0x14>
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	f7ff bff0 	b.w	8004e5c <__sinit_lock_release>
 8004e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e80:	6523      	str	r3, [r4, #80]	; 0x50
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <__sinit+0x68>)
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <__sinit+0x6c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	bf04      	itt	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	61a3      	streq	r3, [r4, #24]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f820 	bl	8004ed8 <__sfp>
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f81c 	bl	8004ed8 <__sfp>
 8004ea0:	60a0      	str	r0, [r4, #8]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f818 	bl	8004ed8 <__sfp>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60e0      	str	r0, [r4, #12]
 8004eac:	2104      	movs	r1, #4
 8004eae:	6860      	ldr	r0, [r4, #4]
 8004eb0:	f7ff ff82 	bl	8004db8 <std>
 8004eb4:	68a0      	ldr	r0, [r4, #8]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2109      	movs	r1, #9
 8004eba:	f7ff ff7d 	bl	8004db8 <std>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	2112      	movs	r1, #18
 8004ec4:	f7ff ff78 	bl	8004db8 <std>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61a3      	str	r3, [r4, #24]
 8004ecc:	e7d2      	b.n	8004e74 <__sinit+0xc>
 8004ece:	bf00      	nop
 8004ed0:	0800631c 	.word	0x0800631c
 8004ed4:	08004e01 	.word	0x08004e01

08004ed8 <__sfp>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4607      	mov	r7, r0
 8004edc:	f7ff ffac 	bl	8004e38 <__sfp_lock_acquire>
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <__sfp+0x84>)
 8004ee2:	681e      	ldr	r6, [r3, #0]
 8004ee4:	69b3      	ldr	r3, [r6, #24]
 8004ee6:	b913      	cbnz	r3, 8004eee <__sfp+0x16>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7ff ffbd 	bl	8004e68 <__sinit>
 8004eee:	3648      	adds	r6, #72	; 0x48
 8004ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	d503      	bpl.n	8004f00 <__sfp+0x28>
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	b30b      	cbz	r3, 8004f40 <__sfp+0x68>
 8004efc:	6836      	ldr	r6, [r6, #0]
 8004efe:	e7f7      	b.n	8004ef0 <__sfp+0x18>
 8004f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f04:	b9d5      	cbnz	r5, 8004f3c <__sfp+0x64>
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <__sfp+0x88>)
 8004f08:	60e3      	str	r3, [r4, #12]
 8004f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f10:	f000 f847 	bl	8004fa2 <__retarget_lock_init_recursive>
 8004f14:	f7ff ff96 	bl	8004e44 <__sfp_lock_release>
 8004f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	61a5      	str	r5, [r4, #24]
 8004f24:	2208      	movs	r2, #8
 8004f26:	4629      	mov	r1, r5
 8004f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f2c:	f7ff fd5e 	bl	80049ec <memset>
 8004f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3c:	3468      	adds	r4, #104	; 0x68
 8004f3e:	e7d9      	b.n	8004ef4 <__sfp+0x1c>
 8004f40:	2104      	movs	r1, #4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ff62 	bl	8004e0c <__sfmoreglue>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	6030      	str	r0, [r6, #0]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d1d5      	bne.n	8004efc <__sfp+0x24>
 8004f50:	f7ff ff78 	bl	8004e44 <__sfp_lock_release>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7ee      	b.n	8004f38 <__sfp+0x60>
 8004f5a:	bf00      	nop
 8004f5c:	0800631c 	.word	0x0800631c
 8004f60:	ffff0001 	.word	0xffff0001

08004f64 <_fwalk_reent>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4688      	mov	r8, r1
 8004f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f70:	2700      	movs	r7, #0
 8004f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f76:	f1b9 0901 	subs.w	r9, r9, #1
 8004f7a:	d505      	bpl.n	8004f88 <_fwalk_reent+0x24>
 8004f7c:	6824      	ldr	r4, [r4, #0]
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d1f7      	bne.n	8004f72 <_fwalk_reent+0xe>
 8004f82:	4638      	mov	r0, r7
 8004f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d907      	bls.n	8004f9e <_fwalk_reent+0x3a>
 8004f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f92:	3301      	adds	r3, #1
 8004f94:	d003      	beq.n	8004f9e <_fwalk_reent+0x3a>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	47c0      	blx	r8
 8004f9c:	4307      	orrs	r7, r0
 8004f9e:	3568      	adds	r5, #104	; 0x68
 8004fa0:	e7e9      	b.n	8004f76 <_fwalk_reent+0x12>

08004fa2 <__retarget_lock_init_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <__retarget_lock_acquire_recursive>:
 8004fa4:	4770      	bx	lr

08004fa6 <__retarget_lock_release_recursive>:
 8004fa6:	4770      	bx	lr

08004fa8 <__swhatbuf_r>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	460e      	mov	r6, r1
 8004fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	b096      	sub	sp, #88	; 0x58
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	da08      	bge.n	8004fcc <__swhatbuf_r+0x24>
 8004fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	061a      	lsls	r2, r3, #24
 8004fc4:	d410      	bmi.n	8004fe8 <__swhatbuf_r+0x40>
 8004fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fca:	e00e      	b.n	8004fea <__swhatbuf_r+0x42>
 8004fcc:	466a      	mov	r2, sp
 8004fce:	f000 feef 	bl	8005db0 <_fstat_r>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	dbf1      	blt.n	8004fba <__swhatbuf_r+0x12>
 8004fd6:	9a01      	ldr	r2, [sp, #4]
 8004fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fe0:	425a      	negs	r2, r3
 8004fe2:	415a      	adcs	r2, r3
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	e7ee      	b.n	8004fc6 <__swhatbuf_r+0x1e>
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	2000      	movs	r0, #0
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	b016      	add	sp, #88	; 0x58
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ff4 <__smakebuf_r>:
 8004ff4:	898b      	ldrh	r3, [r1, #12]
 8004ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ff8:	079d      	lsls	r5, r3, #30
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	d507      	bpl.n	8005010 <__smakebuf_r+0x1c>
 8005000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2301      	movs	r3, #1
 800500a:	6163      	str	r3, [r4, #20]
 800500c:	b002      	add	sp, #8
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	ab01      	add	r3, sp, #4
 8005012:	466a      	mov	r2, sp
 8005014:	f7ff ffc8 	bl	8004fa8 <__swhatbuf_r>
 8005018:	9900      	ldr	r1, [sp, #0]
 800501a:	4605      	mov	r5, r0
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f89d 	bl	800515c <_malloc_r>
 8005022:	b948      	cbnz	r0, 8005038 <__smakebuf_r+0x44>
 8005024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d4ef      	bmi.n	800500c <__smakebuf_r+0x18>
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	e7e3      	b.n	8005000 <__smakebuf_r+0xc>
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <__smakebuf_r+0x7c>)
 800503a:	62b3      	str	r3, [r6, #40]	; 0x28
 800503c:	89a3      	ldrh	r3, [r4, #12]
 800503e:	6020      	str	r0, [r4, #0]
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	9b00      	ldr	r3, [sp, #0]
 8005048:	6163      	str	r3, [r4, #20]
 800504a:	9b01      	ldr	r3, [sp, #4]
 800504c:	6120      	str	r0, [r4, #16]
 800504e:	b15b      	cbz	r3, 8005068 <__smakebuf_r+0x74>
 8005050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 febd 	bl	8005dd4 <_isatty_r>
 800505a:	b128      	cbz	r0, 8005068 <__smakebuf_r+0x74>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	89a0      	ldrh	r0, [r4, #12]
 800506a:	4305      	orrs	r5, r0
 800506c:	81a5      	strh	r5, [r4, #12]
 800506e:	e7cd      	b.n	800500c <__smakebuf_r+0x18>
 8005070:	08004e01 	.word	0x08004e01

08005074 <malloc>:
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <malloc+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f000 b86f 	b.w	800515c <_malloc_r>
 800507e:	bf00      	nop
 8005080:	20000034 	.word	0x20000034

08005084 <_free_r>:
 8005084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005086:	2900      	cmp	r1, #0
 8005088:	d044      	beq.n	8005114 <_free_r+0x90>
 800508a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508e:	9001      	str	r0, [sp, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f1a1 0404 	sub.w	r4, r1, #4
 8005096:	bfb8      	it	lt
 8005098:	18e4      	addlt	r4, r4, r3
 800509a:	f000 fee5 	bl	8005e68 <__malloc_lock>
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <_free_r+0x94>)
 80050a0:	9801      	ldr	r0, [sp, #4]
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	b933      	cbnz	r3, 80050b4 <_free_r+0x30>
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	6014      	str	r4, [r2, #0]
 80050aa:	b003      	add	sp, #12
 80050ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b0:	f000 bee0 	b.w	8005e74 <__malloc_unlock>
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	d908      	bls.n	80050ca <_free_r+0x46>
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf01      	itttt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	1949      	addeq	r1, r1, r5
 80050c6:	6021      	streq	r1, [r4, #0]
 80050c8:	e7ed      	b.n	80050a6 <_free_r+0x22>
 80050ca:	461a      	mov	r2, r3
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b10b      	cbz	r3, 80050d4 <_free_r+0x50>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d9fa      	bls.n	80050ca <_free_r+0x46>
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	1855      	adds	r5, r2, r1
 80050d8:	42a5      	cmp	r5, r4
 80050da:	d10b      	bne.n	80050f4 <_free_r+0x70>
 80050dc:	6824      	ldr	r4, [r4, #0]
 80050de:	4421      	add	r1, r4
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	d1e0      	bne.n	80050aa <_free_r+0x26>
 80050e8:	681c      	ldr	r4, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	4421      	add	r1, r4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	e7da      	b.n	80050aa <_free_r+0x26>
 80050f4:	d902      	bls.n	80050fc <_free_r+0x78>
 80050f6:	230c      	movs	r3, #12
 80050f8:	6003      	str	r3, [r0, #0]
 80050fa:	e7d6      	b.n	80050aa <_free_r+0x26>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf04      	itt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	bf04      	itt	eq
 800510c:	1949      	addeq	r1, r1, r5
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	6054      	str	r4, [r2, #4]
 8005112:	e7ca      	b.n	80050aa <_free_r+0x26>
 8005114:	b003      	add	sp, #12
 8005116:	bd30      	pop	{r4, r5, pc}
 8005118:	200000d8 	.word	0x200000d8

0800511c <sbrk_aligned>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4e0e      	ldr	r6, [pc, #56]	; (8005158 <sbrk_aligned+0x3c>)
 8005120:	460c      	mov	r4, r1
 8005122:	6831      	ldr	r1, [r6, #0]
 8005124:	4605      	mov	r5, r0
 8005126:	b911      	cbnz	r1, 800512e <sbrk_aligned+0x12>
 8005128:	f000 fd1e 	bl	8005b68 <_sbrk_r>
 800512c:	6030      	str	r0, [r6, #0]
 800512e:	4621      	mov	r1, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f000 fd19 	bl	8005b68 <_sbrk_r>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d00a      	beq.n	8005150 <sbrk_aligned+0x34>
 800513a:	1cc4      	adds	r4, r0, #3
 800513c:	f024 0403 	bic.w	r4, r4, #3
 8005140:	42a0      	cmp	r0, r4
 8005142:	d007      	beq.n	8005154 <sbrk_aligned+0x38>
 8005144:	1a21      	subs	r1, r4, r0
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fd0e 	bl	8005b68 <_sbrk_r>
 800514c:	3001      	adds	r0, #1
 800514e:	d101      	bne.n	8005154 <sbrk_aligned+0x38>
 8005150:	f04f 34ff 	mov.w	r4, #4294967295
 8005154:	4620      	mov	r0, r4
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	200000dc 	.word	0x200000dc

0800515c <_malloc_r>:
 800515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005160:	1ccd      	adds	r5, r1, #3
 8005162:	f025 0503 	bic.w	r5, r5, #3
 8005166:	3508      	adds	r5, #8
 8005168:	2d0c      	cmp	r5, #12
 800516a:	bf38      	it	cc
 800516c:	250c      	movcc	r5, #12
 800516e:	2d00      	cmp	r5, #0
 8005170:	4607      	mov	r7, r0
 8005172:	db01      	blt.n	8005178 <_malloc_r+0x1c>
 8005174:	42a9      	cmp	r1, r5
 8005176:	d905      	bls.n	8005184 <_malloc_r+0x28>
 8005178:	230c      	movs	r3, #12
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	2600      	movs	r6, #0
 800517e:	4630      	mov	r0, r6
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	4e2e      	ldr	r6, [pc, #184]	; (8005240 <_malloc_r+0xe4>)
 8005186:	f000 fe6f 	bl	8005e68 <__malloc_lock>
 800518a:	6833      	ldr	r3, [r6, #0]
 800518c:	461c      	mov	r4, r3
 800518e:	bb34      	cbnz	r4, 80051de <_malloc_r+0x82>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff ffc2 	bl	800511c <sbrk_aligned>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	4604      	mov	r4, r0
 800519c:	d14d      	bne.n	800523a <_malloc_r+0xde>
 800519e:	6834      	ldr	r4, [r6, #0]
 80051a0:	4626      	mov	r6, r4
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	d140      	bne.n	8005228 <_malloc_r+0xcc>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	4631      	mov	r1, r6
 80051aa:	4638      	mov	r0, r7
 80051ac:	eb04 0803 	add.w	r8, r4, r3
 80051b0:	f000 fcda 	bl	8005b68 <_sbrk_r>
 80051b4:	4580      	cmp	r8, r0
 80051b6:	d13a      	bne.n	800522e <_malloc_r+0xd2>
 80051b8:	6821      	ldr	r1, [r4, #0]
 80051ba:	3503      	adds	r5, #3
 80051bc:	1a6d      	subs	r5, r5, r1
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff ffa5 	bl	800511c <sbrk_aligned>
 80051d2:	3001      	adds	r0, #1
 80051d4:	d02b      	beq.n	800522e <_malloc_r+0xd2>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	442b      	add	r3, r5
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	e00e      	b.n	80051fc <_malloc_r+0xa0>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	1b52      	subs	r2, r2, r5
 80051e2:	d41e      	bmi.n	8005222 <_malloc_r+0xc6>
 80051e4:	2a0b      	cmp	r2, #11
 80051e6:	d916      	bls.n	8005216 <_malloc_r+0xba>
 80051e8:	1961      	adds	r1, r4, r5
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	bf18      	it	ne
 80051f0:	6059      	strne	r1, [r3, #4]
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	bf08      	it	eq
 80051f6:	6031      	streq	r1, [r6, #0]
 80051f8:	5162      	str	r2, [r4, r5]
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	4638      	mov	r0, r7
 80051fe:	f104 060b 	add.w	r6, r4, #11
 8005202:	f000 fe37 	bl	8005e74 <__malloc_unlock>
 8005206:	f026 0607 	bic.w	r6, r6, #7
 800520a:	1d23      	adds	r3, r4, #4
 800520c:	1af2      	subs	r2, r6, r3
 800520e:	d0b6      	beq.n	800517e <_malloc_r+0x22>
 8005210:	1b9b      	subs	r3, r3, r6
 8005212:	50a3      	str	r3, [r4, r2]
 8005214:	e7b3      	b.n	800517e <_malloc_r+0x22>
 8005216:	6862      	ldr	r2, [r4, #4]
 8005218:	42a3      	cmp	r3, r4
 800521a:	bf0c      	ite	eq
 800521c:	6032      	streq	r2, [r6, #0]
 800521e:	605a      	strne	r2, [r3, #4]
 8005220:	e7ec      	b.n	80051fc <_malloc_r+0xa0>
 8005222:	4623      	mov	r3, r4
 8005224:	6864      	ldr	r4, [r4, #4]
 8005226:	e7b2      	b.n	800518e <_malloc_r+0x32>
 8005228:	4634      	mov	r4, r6
 800522a:	6876      	ldr	r6, [r6, #4]
 800522c:	e7b9      	b.n	80051a2 <_malloc_r+0x46>
 800522e:	230c      	movs	r3, #12
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4638      	mov	r0, r7
 8005234:	f000 fe1e 	bl	8005e74 <__malloc_unlock>
 8005238:	e7a1      	b.n	800517e <_malloc_r+0x22>
 800523a:	6025      	str	r5, [r4, #0]
 800523c:	e7de      	b.n	80051fc <_malloc_r+0xa0>
 800523e:	bf00      	nop
 8005240:	200000d8 	.word	0x200000d8

08005244 <__ssputs_r>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	688e      	ldr	r6, [r1, #8]
 800524a:	429e      	cmp	r6, r3
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	461f      	mov	r7, r3
 8005254:	d838      	bhi.n	80052c8 <__ssputs_r+0x84>
 8005256:	898a      	ldrh	r2, [r1, #12]
 8005258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800525c:	d032      	beq.n	80052c4 <__ssputs_r+0x80>
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	6909      	ldr	r1, [r1, #16]
 8005262:	eba5 0901 	sub.w	r9, r5, r1
 8005266:	6965      	ldr	r5, [r4, #20]
 8005268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005270:	3301      	adds	r3, #1
 8005272:	444b      	add	r3, r9
 8005274:	106d      	asrs	r5, r5, #1
 8005276:	429d      	cmp	r5, r3
 8005278:	bf38      	it	cc
 800527a:	461d      	movcc	r5, r3
 800527c:	0553      	lsls	r3, r2, #21
 800527e:	d531      	bpl.n	80052e4 <__ssputs_r+0xa0>
 8005280:	4629      	mov	r1, r5
 8005282:	f7ff ff6b 	bl	800515c <_malloc_r>
 8005286:	4606      	mov	r6, r0
 8005288:	b950      	cbnz	r0, 80052a0 <__ssputs_r+0x5c>
 800528a:	230c      	movs	r3, #12
 800528c:	f8ca 3000 	str.w	r3, [sl]
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	6921      	ldr	r1, [r4, #16]
 80052a2:	464a      	mov	r2, r9
 80052a4:	f000 fdb8 	bl	8005e18 <memcpy>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	6126      	str	r6, [r4, #16]
 80052b6:	6165      	str	r5, [r4, #20]
 80052b8:	444e      	add	r6, r9
 80052ba:	eba5 0509 	sub.w	r5, r5, r9
 80052be:	6026      	str	r6, [r4, #0]
 80052c0:	60a5      	str	r5, [r4, #8]
 80052c2:	463e      	mov	r6, r7
 80052c4:	42be      	cmp	r6, r7
 80052c6:	d900      	bls.n	80052ca <__ssputs_r+0x86>
 80052c8:	463e      	mov	r6, r7
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	4632      	mov	r2, r6
 80052ce:	4641      	mov	r1, r8
 80052d0:	f000 fdb0 	bl	8005e34 <memmove>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	1b9b      	subs	r3, r3, r6
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4433      	add	r3, r6
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	e7db      	b.n	800529c <__ssputs_r+0x58>
 80052e4:	462a      	mov	r2, r5
 80052e6:	f000 fdcb 	bl	8005e80 <_realloc_r>
 80052ea:	4606      	mov	r6, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d1e1      	bne.n	80052b4 <__ssputs_r+0x70>
 80052f0:	6921      	ldr	r1, [r4, #16]
 80052f2:	4650      	mov	r0, sl
 80052f4:	f7ff fec6 	bl	8005084 <_free_r>
 80052f8:	e7c7      	b.n	800528a <__ssputs_r+0x46>
	...

080052fc <_svfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4698      	mov	r8, r3
 8005302:	898b      	ldrh	r3, [r1, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4607      	mov	r7, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4614      	mov	r4, r2
 800530e:	d50e      	bpl.n	800532e <_svfiprintf_r+0x32>
 8005310:	690b      	ldr	r3, [r1, #16]
 8005312:	b963      	cbnz	r3, 800532e <_svfiprintf_r+0x32>
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f7ff ff21 	bl	800515c <_malloc_r>
 800531a:	6028      	str	r0, [r5, #0]
 800531c:	6128      	str	r0, [r5, #16]
 800531e:	b920      	cbnz	r0, 800532a <_svfiprintf_r+0x2e>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e0d1      	b.n	80054ce <_svfiprintf_r+0x1d2>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054e8 <_svfiprintf_r+0x1ec>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x5c>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x50>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7a>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6d 	bl	8005244 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80aa 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a2 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005396:	931a      	str	r3, [sp, #104]	; 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	4851      	ldr	r0, [pc, #324]	; (80054e8 <_svfiprintf_r+0x1ec>)
 80053a2:	f7fa ff1d 	bl	80001e0 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xe6>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	; 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xf6>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	; 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94e      	bls.n	800547a <_svfiprintf_r+0x17e>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x110>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x110>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0x9c>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d135      	bne.n	8005484 <_svfiprintf_r+0x188>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	f04f 33ff 	movlt.w	r3, #4294967295
 8005428:	3402      	adds	r4, #2
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054f8 <_svfiprintf_r+0x1fc>
 8005430:	7821      	ldrb	r1, [r4, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	4650      	mov	r0, sl
 8005436:	f7fa fed3 	bl	80001e0 <memchr>
 800543a:	b140      	cbz	r0, 800544e <_svfiprintf_r+0x152>
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	eba0 000a 	sub.w	r0, r0, sl
 8005442:	fa03 f000 	lsl.w	r0, r3, r0
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	4303      	orrs	r3, r0
 800544a:	3401      	adds	r4, #1
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005452:	4826      	ldr	r0, [pc, #152]	; (80054ec <_svfiprintf_r+0x1f0>)
 8005454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005458:	2206      	movs	r2, #6
 800545a:	f7fa fec1 	bl	80001e0 <memchr>
 800545e:	2800      	cmp	r0, #0
 8005460:	d038      	beq.n	80054d4 <_svfiprintf_r+0x1d8>
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <_svfiprintf_r+0x1f4>)
 8005464:	bb1b      	cbnz	r3, 80054ae <_svfiprintf_r+0x1b2>
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	3307      	adds	r3, #7
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	3308      	adds	r3, #8
 8005470:	9303      	str	r3, [sp, #12]
 8005472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005474:	4433      	add	r3, r6
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
 8005478:	e767      	b.n	800534a <_svfiprintf_r+0x4e>
 800547a:	fb0c 3202 	mla	r2, ip, r2, r3
 800547e:	460c      	mov	r4, r1
 8005480:	2001      	movs	r0, #1
 8005482:	e7a5      	b.n	80053d0 <_svfiprintf_r+0xd4>
 8005484:	2300      	movs	r3, #0
 8005486:	3401      	adds	r4, #1
 8005488:	9305      	str	r3, [sp, #20]
 800548a:	4619      	mov	r1, r3
 800548c:	f04f 0c0a 	mov.w	ip, #10
 8005490:	4620      	mov	r0, r4
 8005492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005496:	3a30      	subs	r2, #48	; 0x30
 8005498:	2a09      	cmp	r2, #9
 800549a:	d903      	bls.n	80054a4 <_svfiprintf_r+0x1a8>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0c5      	beq.n	800542c <_svfiprintf_r+0x130>
 80054a0:	9105      	str	r1, [sp, #20]
 80054a2:	e7c3      	b.n	800542c <_svfiprintf_r+0x130>
 80054a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a8:	4604      	mov	r4, r0
 80054aa:	2301      	movs	r3, #1
 80054ac:	e7f0      	b.n	8005490 <_svfiprintf_r+0x194>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054b6:	a904      	add	r1, sp, #16
 80054b8:	4638      	mov	r0, r7
 80054ba:	f3af 8000 	nop.w
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	4606      	mov	r6, r0
 80054c2:	d1d6      	bne.n	8005472 <_svfiprintf_r+0x176>
 80054c4:	89ab      	ldrh	r3, [r5, #12]
 80054c6:	065b      	lsls	r3, r3, #25
 80054c8:	f53f af2c 	bmi.w	8005324 <_svfiprintf_r+0x28>
 80054cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ce:	b01d      	add	sp, #116	; 0x74
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	462a      	mov	r2, r5
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054dc:	a904      	add	r1, sp, #16
 80054de:	4638      	mov	r0, r7
 80054e0:	f000 f9d4 	bl	800588c <_printf_i>
 80054e4:	e7eb      	b.n	80054be <_svfiprintf_r+0x1c2>
 80054e6:	bf00      	nop
 80054e8:	08006380 	.word	0x08006380
 80054ec:	0800638a 	.word	0x0800638a
 80054f0:	00000000 	.word	0x00000000
 80054f4:	08005245 	.word	0x08005245
 80054f8:	08006386 	.word	0x08006386

080054fc <__sfputc_r>:
 80054fc:	6893      	ldr	r3, [r2, #8]
 80054fe:	3b01      	subs	r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	b410      	push	{r4}
 8005504:	6093      	str	r3, [r2, #8]
 8005506:	da08      	bge.n	800551a <__sfputc_r+0x1e>
 8005508:	6994      	ldr	r4, [r2, #24]
 800550a:	42a3      	cmp	r3, r4
 800550c:	db01      	blt.n	8005512 <__sfputc_r+0x16>
 800550e:	290a      	cmp	r1, #10
 8005510:	d103      	bne.n	800551a <__sfputc_r+0x1e>
 8005512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005516:	f000 bb7b 	b.w	8005c10 <__swbuf_r>
 800551a:	6813      	ldr	r3, [r2, #0]
 800551c:	1c58      	adds	r0, r3, #1
 800551e:	6010      	str	r0, [r2, #0]
 8005520:	7019      	strb	r1, [r3, #0]
 8005522:	4608      	mov	r0, r1
 8005524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005528:	4770      	bx	lr

0800552a <__sfputs_r>:
 800552a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552c:	4606      	mov	r6, r0
 800552e:	460f      	mov	r7, r1
 8005530:	4614      	mov	r4, r2
 8005532:	18d5      	adds	r5, r2, r3
 8005534:	42ac      	cmp	r4, r5
 8005536:	d101      	bne.n	800553c <__sfputs_r+0x12>
 8005538:	2000      	movs	r0, #0
 800553a:	e007      	b.n	800554c <__sfputs_r+0x22>
 800553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005540:	463a      	mov	r2, r7
 8005542:	4630      	mov	r0, r6
 8005544:	f7ff ffda 	bl	80054fc <__sfputc_r>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d1f3      	bne.n	8005534 <__sfputs_r+0xa>
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005550 <_vfiprintf_r>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	460d      	mov	r5, r1
 8005556:	b09d      	sub	sp, #116	; 0x74
 8005558:	4614      	mov	r4, r2
 800555a:	4698      	mov	r8, r3
 800555c:	4606      	mov	r6, r0
 800555e:	b118      	cbz	r0, 8005568 <_vfiprintf_r+0x18>
 8005560:	6983      	ldr	r3, [r0, #24]
 8005562:	b90b      	cbnz	r3, 8005568 <_vfiprintf_r+0x18>
 8005564:	f7ff fc80 	bl	8004e68 <__sinit>
 8005568:	4b89      	ldr	r3, [pc, #548]	; (8005790 <_vfiprintf_r+0x240>)
 800556a:	429d      	cmp	r5, r3
 800556c:	d11b      	bne.n	80055a6 <_vfiprintf_r+0x56>
 800556e:	6875      	ldr	r5, [r6, #4]
 8005570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	d405      	bmi.n	8005582 <_vfiprintf_r+0x32>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	059a      	lsls	r2, r3, #22
 800557a:	d402      	bmi.n	8005582 <_vfiprintf_r+0x32>
 800557c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800557e:	f7ff fd11 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	d501      	bpl.n	800558c <_vfiprintf_r+0x3c>
 8005588:	692b      	ldr	r3, [r5, #16]
 800558a:	b9eb      	cbnz	r3, 80055c8 <_vfiprintf_r+0x78>
 800558c:	4629      	mov	r1, r5
 800558e:	4630      	mov	r0, r6
 8005590:	f000 fb90 	bl	8005cb4 <__swsetup_r>
 8005594:	b1c0      	cbz	r0, 80055c8 <_vfiprintf_r+0x78>
 8005596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005598:	07dc      	lsls	r4, r3, #31
 800559a:	d50e      	bpl.n	80055ba <_vfiprintf_r+0x6a>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	b01d      	add	sp, #116	; 0x74
 80055a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a6:	4b7b      	ldr	r3, [pc, #492]	; (8005794 <_vfiprintf_r+0x244>)
 80055a8:	429d      	cmp	r5, r3
 80055aa:	d101      	bne.n	80055b0 <_vfiprintf_r+0x60>
 80055ac:	68b5      	ldr	r5, [r6, #8]
 80055ae:	e7df      	b.n	8005570 <_vfiprintf_r+0x20>
 80055b0:	4b79      	ldr	r3, [pc, #484]	; (8005798 <_vfiprintf_r+0x248>)
 80055b2:	429d      	cmp	r5, r3
 80055b4:	bf08      	it	eq
 80055b6:	68f5      	ldreq	r5, [r6, #12]
 80055b8:	e7da      	b.n	8005570 <_vfiprintf_r+0x20>
 80055ba:	89ab      	ldrh	r3, [r5, #12]
 80055bc:	0598      	lsls	r0, r3, #22
 80055be:	d4ed      	bmi.n	800559c <_vfiprintf_r+0x4c>
 80055c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055c2:	f7ff fcf0 	bl	8004fa6 <__retarget_lock_release_recursive>
 80055c6:	e7e9      	b.n	800559c <_vfiprintf_r+0x4c>
 80055c8:	2300      	movs	r3, #0
 80055ca:	9309      	str	r3, [sp, #36]	; 0x24
 80055cc:	2320      	movs	r3, #32
 80055ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055d6:	2330      	movs	r3, #48	; 0x30
 80055d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800579c <_vfiprintf_r+0x24c>
 80055dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055e0:	f04f 0901 	mov.w	r9, #1
 80055e4:	4623      	mov	r3, r4
 80055e6:	469a      	mov	sl, r3
 80055e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ec:	b10a      	cbz	r2, 80055f2 <_vfiprintf_r+0xa2>
 80055ee:	2a25      	cmp	r2, #37	; 0x25
 80055f0:	d1f9      	bne.n	80055e6 <_vfiprintf_r+0x96>
 80055f2:	ebba 0b04 	subs.w	fp, sl, r4
 80055f6:	d00b      	beq.n	8005610 <_vfiprintf_r+0xc0>
 80055f8:	465b      	mov	r3, fp
 80055fa:	4622      	mov	r2, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	4630      	mov	r0, r6
 8005600:	f7ff ff93 	bl	800552a <__sfputs_r>
 8005604:	3001      	adds	r0, #1
 8005606:	f000 80aa 	beq.w	800575e <_vfiprintf_r+0x20e>
 800560a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800560c:	445a      	add	r2, fp
 800560e:	9209      	str	r2, [sp, #36]	; 0x24
 8005610:	f89a 3000 	ldrb.w	r3, [sl]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80a2 	beq.w	800575e <_vfiprintf_r+0x20e>
 800561a:	2300      	movs	r3, #0
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005624:	f10a 0a01 	add.w	sl, sl, #1
 8005628:	9304      	str	r3, [sp, #16]
 800562a:	9307      	str	r3, [sp, #28]
 800562c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005630:	931a      	str	r3, [sp, #104]	; 0x68
 8005632:	4654      	mov	r4, sl
 8005634:	2205      	movs	r2, #5
 8005636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800563a:	4858      	ldr	r0, [pc, #352]	; (800579c <_vfiprintf_r+0x24c>)
 800563c:	f7fa fdd0 	bl	80001e0 <memchr>
 8005640:	9a04      	ldr	r2, [sp, #16]
 8005642:	b9d8      	cbnz	r0, 800567c <_vfiprintf_r+0x12c>
 8005644:	06d1      	lsls	r1, r2, #27
 8005646:	bf44      	itt	mi
 8005648:	2320      	movmi	r3, #32
 800564a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564e:	0713      	lsls	r3, r2, #28
 8005650:	bf44      	itt	mi
 8005652:	232b      	movmi	r3, #43	; 0x2b
 8005654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005658:	f89a 3000 	ldrb.w	r3, [sl]
 800565c:	2b2a      	cmp	r3, #42	; 0x2a
 800565e:	d015      	beq.n	800568c <_vfiprintf_r+0x13c>
 8005660:	9a07      	ldr	r2, [sp, #28]
 8005662:	4654      	mov	r4, sl
 8005664:	2000      	movs	r0, #0
 8005666:	f04f 0c0a 	mov.w	ip, #10
 800566a:	4621      	mov	r1, r4
 800566c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005670:	3b30      	subs	r3, #48	; 0x30
 8005672:	2b09      	cmp	r3, #9
 8005674:	d94e      	bls.n	8005714 <_vfiprintf_r+0x1c4>
 8005676:	b1b0      	cbz	r0, 80056a6 <_vfiprintf_r+0x156>
 8005678:	9207      	str	r2, [sp, #28]
 800567a:	e014      	b.n	80056a6 <_vfiprintf_r+0x156>
 800567c:	eba0 0308 	sub.w	r3, r0, r8
 8005680:	fa09 f303 	lsl.w	r3, r9, r3
 8005684:	4313      	orrs	r3, r2
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	46a2      	mov	sl, r4
 800568a:	e7d2      	b.n	8005632 <_vfiprintf_r+0xe2>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	9103      	str	r1, [sp, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfbb      	ittet	lt
 8005698:	425b      	neglt	r3, r3
 800569a:	f042 0202 	orrlt.w	r2, r2, #2
 800569e:	9307      	strge	r3, [sp, #28]
 80056a0:	9307      	strlt	r3, [sp, #28]
 80056a2:	bfb8      	it	lt
 80056a4:	9204      	strlt	r2, [sp, #16]
 80056a6:	7823      	ldrb	r3, [r4, #0]
 80056a8:	2b2e      	cmp	r3, #46	; 0x2e
 80056aa:	d10c      	bne.n	80056c6 <_vfiprintf_r+0x176>
 80056ac:	7863      	ldrb	r3, [r4, #1]
 80056ae:	2b2a      	cmp	r3, #42	; 0x2a
 80056b0:	d135      	bne.n	800571e <_vfiprintf_r+0x1ce>
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	9203      	str	r2, [sp, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfb8      	it	lt
 80056be:	f04f 33ff 	movlt.w	r3, #4294967295
 80056c2:	3402      	adds	r4, #2
 80056c4:	9305      	str	r3, [sp, #20]
 80056c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057ac <_vfiprintf_r+0x25c>
 80056ca:	7821      	ldrb	r1, [r4, #0]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4650      	mov	r0, sl
 80056d0:	f7fa fd86 	bl	80001e0 <memchr>
 80056d4:	b140      	cbz	r0, 80056e8 <_vfiprintf_r+0x198>
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	eba0 000a 	sub.w	r0, r0, sl
 80056dc:	fa03 f000 	lsl.w	r0, r3, r0
 80056e0:	9b04      	ldr	r3, [sp, #16]
 80056e2:	4303      	orrs	r3, r0
 80056e4:	3401      	adds	r4, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	482c      	ldr	r0, [pc, #176]	; (80057a0 <_vfiprintf_r+0x250>)
 80056ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056f2:	2206      	movs	r2, #6
 80056f4:	f7fa fd74 	bl	80001e0 <memchr>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d03f      	beq.n	800577c <_vfiprintf_r+0x22c>
 80056fc:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <_vfiprintf_r+0x254>)
 80056fe:	bb1b      	cbnz	r3, 8005748 <_vfiprintf_r+0x1f8>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	3307      	adds	r3, #7
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	3308      	adds	r3, #8
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570e:	443b      	add	r3, r7
 8005710:	9309      	str	r3, [sp, #36]	; 0x24
 8005712:	e767      	b.n	80055e4 <_vfiprintf_r+0x94>
 8005714:	fb0c 3202 	mla	r2, ip, r2, r3
 8005718:	460c      	mov	r4, r1
 800571a:	2001      	movs	r0, #1
 800571c:	e7a5      	b.n	800566a <_vfiprintf_r+0x11a>
 800571e:	2300      	movs	r3, #0
 8005720:	3401      	adds	r4, #1
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	4619      	mov	r1, r3
 8005726:	f04f 0c0a 	mov.w	ip, #10
 800572a:	4620      	mov	r0, r4
 800572c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005730:	3a30      	subs	r2, #48	; 0x30
 8005732:	2a09      	cmp	r2, #9
 8005734:	d903      	bls.n	800573e <_vfiprintf_r+0x1ee>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0c5      	beq.n	80056c6 <_vfiprintf_r+0x176>
 800573a:	9105      	str	r1, [sp, #20]
 800573c:	e7c3      	b.n	80056c6 <_vfiprintf_r+0x176>
 800573e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005742:	4604      	mov	r4, r0
 8005744:	2301      	movs	r3, #1
 8005746:	e7f0      	b.n	800572a <_vfiprintf_r+0x1da>
 8005748:	ab03      	add	r3, sp, #12
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	462a      	mov	r2, r5
 800574e:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <_vfiprintf_r+0x258>)
 8005750:	a904      	add	r1, sp, #16
 8005752:	4630      	mov	r0, r6
 8005754:	f3af 8000 	nop.w
 8005758:	4607      	mov	r7, r0
 800575a:	1c78      	adds	r0, r7, #1
 800575c:	d1d6      	bne.n	800570c <_vfiprintf_r+0x1bc>
 800575e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005760:	07d9      	lsls	r1, r3, #31
 8005762:	d405      	bmi.n	8005770 <_vfiprintf_r+0x220>
 8005764:	89ab      	ldrh	r3, [r5, #12]
 8005766:	059a      	lsls	r2, r3, #22
 8005768:	d402      	bmi.n	8005770 <_vfiprintf_r+0x220>
 800576a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800576c:	f7ff fc1b 	bl	8004fa6 <__retarget_lock_release_recursive>
 8005770:	89ab      	ldrh	r3, [r5, #12]
 8005772:	065b      	lsls	r3, r3, #25
 8005774:	f53f af12 	bmi.w	800559c <_vfiprintf_r+0x4c>
 8005778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577a:	e711      	b.n	80055a0 <_vfiprintf_r+0x50>
 800577c:	ab03      	add	r3, sp, #12
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	462a      	mov	r2, r5
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <_vfiprintf_r+0x258>)
 8005784:	a904      	add	r1, sp, #16
 8005786:	4630      	mov	r0, r6
 8005788:	f000 f880 	bl	800588c <_printf_i>
 800578c:	e7e4      	b.n	8005758 <_vfiprintf_r+0x208>
 800578e:	bf00      	nop
 8005790:	08006340 	.word	0x08006340
 8005794:	08006360 	.word	0x08006360
 8005798:	08006320 	.word	0x08006320
 800579c:	08006380 	.word	0x08006380
 80057a0:	0800638a 	.word	0x0800638a
 80057a4:	00000000 	.word	0x00000000
 80057a8:	0800552b 	.word	0x0800552b
 80057ac:	08006386 	.word	0x08006386

080057b0 <_printf_common>:
 80057b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	4616      	mov	r6, r2
 80057b6:	4699      	mov	r9, r3
 80057b8:	688a      	ldr	r2, [r1, #8]
 80057ba:	690b      	ldr	r3, [r1, #16]
 80057bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c0:	4293      	cmp	r3, r2
 80057c2:	bfb8      	it	lt
 80057c4:	4613      	movlt	r3, r2
 80057c6:	6033      	str	r3, [r6, #0]
 80057c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057cc:	4607      	mov	r7, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	b10a      	cbz	r2, 80057d6 <_printf_common+0x26>
 80057d2:	3301      	adds	r3, #1
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	0699      	lsls	r1, r3, #26
 80057da:	bf42      	ittt	mi
 80057dc:	6833      	ldrmi	r3, [r6, #0]
 80057de:	3302      	addmi	r3, #2
 80057e0:	6033      	strmi	r3, [r6, #0]
 80057e2:	6825      	ldr	r5, [r4, #0]
 80057e4:	f015 0506 	ands.w	r5, r5, #6
 80057e8:	d106      	bne.n	80057f8 <_printf_common+0x48>
 80057ea:	f104 0a19 	add.w	sl, r4, #25
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	6832      	ldr	r2, [r6, #0]
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	42ab      	cmp	r3, r5
 80057f6:	dc26      	bgt.n	8005846 <_printf_common+0x96>
 80057f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057fc:	1e13      	subs	r3, r2, #0
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	bf18      	it	ne
 8005802:	2301      	movne	r3, #1
 8005804:	0692      	lsls	r2, r2, #26
 8005806:	d42b      	bmi.n	8005860 <_printf_common+0xb0>
 8005808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800580c:	4649      	mov	r1, r9
 800580e:	4638      	mov	r0, r7
 8005810:	47c0      	blx	r8
 8005812:	3001      	adds	r0, #1
 8005814:	d01e      	beq.n	8005854 <_printf_common+0xa4>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	68e5      	ldr	r5, [r4, #12]
 800581a:	6832      	ldr	r2, [r6, #0]
 800581c:	f003 0306 	and.w	r3, r3, #6
 8005820:	2b04      	cmp	r3, #4
 8005822:	bf08      	it	eq
 8005824:	1aad      	subeq	r5, r5, r2
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	bf0c      	ite	eq
 800582c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005830:	2500      	movne	r5, #0
 8005832:	4293      	cmp	r3, r2
 8005834:	bfc4      	itt	gt
 8005836:	1a9b      	subgt	r3, r3, r2
 8005838:	18ed      	addgt	r5, r5, r3
 800583a:	2600      	movs	r6, #0
 800583c:	341a      	adds	r4, #26
 800583e:	42b5      	cmp	r5, r6
 8005840:	d11a      	bne.n	8005878 <_printf_common+0xc8>
 8005842:	2000      	movs	r0, #0
 8005844:	e008      	b.n	8005858 <_printf_common+0xa8>
 8005846:	2301      	movs	r3, #1
 8005848:	4652      	mov	r2, sl
 800584a:	4649      	mov	r1, r9
 800584c:	4638      	mov	r0, r7
 800584e:	47c0      	blx	r8
 8005850:	3001      	adds	r0, #1
 8005852:	d103      	bne.n	800585c <_printf_common+0xac>
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	3501      	adds	r5, #1
 800585e:	e7c6      	b.n	80057ee <_printf_common+0x3e>
 8005860:	18e1      	adds	r1, r4, r3
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	2030      	movs	r0, #48	; 0x30
 8005866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800586a:	4422      	add	r2, r4
 800586c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005874:	3302      	adds	r3, #2
 8005876:	e7c7      	b.n	8005808 <_printf_common+0x58>
 8005878:	2301      	movs	r3, #1
 800587a:	4622      	mov	r2, r4
 800587c:	4649      	mov	r1, r9
 800587e:	4638      	mov	r0, r7
 8005880:	47c0      	blx	r8
 8005882:	3001      	adds	r0, #1
 8005884:	d0e6      	beq.n	8005854 <_printf_common+0xa4>
 8005886:	3601      	adds	r6, #1
 8005888:	e7d9      	b.n	800583e <_printf_common+0x8e>
	...

0800588c <_printf_i>:
 800588c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	7e0f      	ldrb	r7, [r1, #24]
 8005892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005894:	2f78      	cmp	r7, #120	; 0x78
 8005896:	4691      	mov	r9, r2
 8005898:	4680      	mov	r8, r0
 800589a:	460c      	mov	r4, r1
 800589c:	469a      	mov	sl, r3
 800589e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058a2:	d807      	bhi.n	80058b4 <_printf_i+0x28>
 80058a4:	2f62      	cmp	r7, #98	; 0x62
 80058a6:	d80a      	bhi.n	80058be <_printf_i+0x32>
 80058a8:	2f00      	cmp	r7, #0
 80058aa:	f000 80d8 	beq.w	8005a5e <_printf_i+0x1d2>
 80058ae:	2f58      	cmp	r7, #88	; 0x58
 80058b0:	f000 80a3 	beq.w	80059fa <_printf_i+0x16e>
 80058b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058bc:	e03a      	b.n	8005934 <_printf_i+0xa8>
 80058be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058c2:	2b15      	cmp	r3, #21
 80058c4:	d8f6      	bhi.n	80058b4 <_printf_i+0x28>
 80058c6:	a101      	add	r1, pc, #4	; (adr r1, 80058cc <_printf_i+0x40>)
 80058c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058cc:	08005925 	.word	0x08005925
 80058d0:	08005939 	.word	0x08005939
 80058d4:	080058b5 	.word	0x080058b5
 80058d8:	080058b5 	.word	0x080058b5
 80058dc:	080058b5 	.word	0x080058b5
 80058e0:	080058b5 	.word	0x080058b5
 80058e4:	08005939 	.word	0x08005939
 80058e8:	080058b5 	.word	0x080058b5
 80058ec:	080058b5 	.word	0x080058b5
 80058f0:	080058b5 	.word	0x080058b5
 80058f4:	080058b5 	.word	0x080058b5
 80058f8:	08005a45 	.word	0x08005a45
 80058fc:	08005969 	.word	0x08005969
 8005900:	08005a27 	.word	0x08005a27
 8005904:	080058b5 	.word	0x080058b5
 8005908:	080058b5 	.word	0x080058b5
 800590c:	08005a67 	.word	0x08005a67
 8005910:	080058b5 	.word	0x080058b5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058b5 	.word	0x080058b5
 800591c:	080058b5 	.word	0x080058b5
 8005920:	08005a2f 	.word	0x08005a2f
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	1d1a      	adds	r2, r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	602a      	str	r2, [r5, #0]
 800592c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005934:	2301      	movs	r3, #1
 8005936:	e0a3      	b.n	8005a80 <_printf_i+0x1f4>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	6829      	ldr	r1, [r5, #0]
 800593c:	0606      	lsls	r6, r0, #24
 800593e:	f101 0304 	add.w	r3, r1, #4
 8005942:	d50a      	bpl.n	800595a <_printf_i+0xce>
 8005944:	680e      	ldr	r6, [r1, #0]
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	2e00      	cmp	r6, #0
 800594a:	da03      	bge.n	8005954 <_printf_i+0xc8>
 800594c:	232d      	movs	r3, #45	; 0x2d
 800594e:	4276      	negs	r6, r6
 8005950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005954:	485e      	ldr	r0, [pc, #376]	; (8005ad0 <_printf_i+0x244>)
 8005956:	230a      	movs	r3, #10
 8005958:	e019      	b.n	800598e <_printf_i+0x102>
 800595a:	680e      	ldr	r6, [r1, #0]
 800595c:	602b      	str	r3, [r5, #0]
 800595e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005962:	bf18      	it	ne
 8005964:	b236      	sxthne	r6, r6
 8005966:	e7ef      	b.n	8005948 <_printf_i+0xbc>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	1d19      	adds	r1, r3, #4
 800596e:	6029      	str	r1, [r5, #0]
 8005970:	0601      	lsls	r1, r0, #24
 8005972:	d501      	bpl.n	8005978 <_printf_i+0xec>
 8005974:	681e      	ldr	r6, [r3, #0]
 8005976:	e002      	b.n	800597e <_printf_i+0xf2>
 8005978:	0646      	lsls	r6, r0, #25
 800597a:	d5fb      	bpl.n	8005974 <_printf_i+0xe8>
 800597c:	881e      	ldrh	r6, [r3, #0]
 800597e:	4854      	ldr	r0, [pc, #336]	; (8005ad0 <_printf_i+0x244>)
 8005980:	2f6f      	cmp	r7, #111	; 0x6f
 8005982:	bf0c      	ite	eq
 8005984:	2308      	moveq	r3, #8
 8005986:	230a      	movne	r3, #10
 8005988:	2100      	movs	r1, #0
 800598a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800598e:	6865      	ldr	r5, [r4, #4]
 8005990:	60a5      	str	r5, [r4, #8]
 8005992:	2d00      	cmp	r5, #0
 8005994:	bfa2      	ittt	ge
 8005996:	6821      	ldrge	r1, [r4, #0]
 8005998:	f021 0104 	bicge.w	r1, r1, #4
 800599c:	6021      	strge	r1, [r4, #0]
 800599e:	b90e      	cbnz	r6, 80059a4 <_printf_i+0x118>
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	d04d      	beq.n	8005a40 <_printf_i+0x1b4>
 80059a4:	4615      	mov	r5, r2
 80059a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059aa:	fb03 6711 	mls	r7, r3, r1, r6
 80059ae:	5dc7      	ldrb	r7, [r0, r7]
 80059b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b4:	4637      	mov	r7, r6
 80059b6:	42bb      	cmp	r3, r7
 80059b8:	460e      	mov	r6, r1
 80059ba:	d9f4      	bls.n	80059a6 <_printf_i+0x11a>
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d10b      	bne.n	80059d8 <_printf_i+0x14c>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	07de      	lsls	r6, r3, #31
 80059c4:	d508      	bpl.n	80059d8 <_printf_i+0x14c>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	6861      	ldr	r1, [r4, #4]
 80059ca:	4299      	cmp	r1, r3
 80059cc:	bfde      	ittt	le
 80059ce:	2330      	movle	r3, #48	; 0x30
 80059d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059d8:	1b52      	subs	r2, r2, r5
 80059da:	6122      	str	r2, [r4, #16]
 80059dc:	f8cd a000 	str.w	sl, [sp]
 80059e0:	464b      	mov	r3, r9
 80059e2:	aa03      	add	r2, sp, #12
 80059e4:	4621      	mov	r1, r4
 80059e6:	4640      	mov	r0, r8
 80059e8:	f7ff fee2 	bl	80057b0 <_printf_common>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d14c      	bne.n	8005a8a <_printf_i+0x1fe>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	b004      	add	sp, #16
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	4835      	ldr	r0, [pc, #212]	; (8005ad0 <_printf_i+0x244>)
 80059fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a00:	6829      	ldr	r1, [r5, #0]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a08:	6029      	str	r1, [r5, #0]
 8005a0a:	061d      	lsls	r5, r3, #24
 8005a0c:	d514      	bpl.n	8005a38 <_printf_i+0x1ac>
 8005a0e:	07df      	lsls	r7, r3, #31
 8005a10:	bf44      	itt	mi
 8005a12:	f043 0320 	orrmi.w	r3, r3, #32
 8005a16:	6023      	strmi	r3, [r4, #0]
 8005a18:	b91e      	cbnz	r6, 8005a22 <_printf_i+0x196>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	f023 0320 	bic.w	r3, r3, #32
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	2310      	movs	r3, #16
 8005a24:	e7b0      	b.n	8005988 <_printf_i+0xfc>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	f043 0320 	orr.w	r3, r3, #32
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	2378      	movs	r3, #120	; 0x78
 8005a30:	4828      	ldr	r0, [pc, #160]	; (8005ad4 <_printf_i+0x248>)
 8005a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a36:	e7e3      	b.n	8005a00 <_printf_i+0x174>
 8005a38:	0659      	lsls	r1, r3, #25
 8005a3a:	bf48      	it	mi
 8005a3c:	b2b6      	uxthmi	r6, r6
 8005a3e:	e7e6      	b.n	8005a0e <_printf_i+0x182>
 8005a40:	4615      	mov	r5, r2
 8005a42:	e7bb      	b.n	80059bc <_printf_i+0x130>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	6826      	ldr	r6, [r4, #0]
 8005a48:	6961      	ldr	r1, [r4, #20]
 8005a4a:	1d18      	adds	r0, r3, #4
 8005a4c:	6028      	str	r0, [r5, #0]
 8005a4e:	0635      	lsls	r5, r6, #24
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0x1cc>
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0x1d2>
 8005a58:	0670      	lsls	r0, r6, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0x1c8>
 8005a5c:	8019      	strh	r1, [r3, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	4615      	mov	r5, r2
 8005a64:	e7ba      	b.n	80059dc <_printf_i+0x150>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	1d1a      	adds	r2, r3, #4
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7fa fbb4 	bl	80001e0 <memchr>
 8005a78:	b108      	cbz	r0, 8005a7e <_printf_i+0x1f2>
 8005a7a:	1b40      	subs	r0, r0, r5
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	e7a8      	b.n	80059dc <_printf_i+0x150>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	47d0      	blx	sl
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0ab      	beq.n	80059f0 <_printf_i+0x164>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	079b      	lsls	r3, r3, #30
 8005a9c:	d413      	bmi.n	8005ac6 <_printf_i+0x23a>
 8005a9e:	68e0      	ldr	r0, [r4, #12]
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	bfb8      	it	lt
 8005aa6:	4618      	movlt	r0, r3
 8005aa8:	e7a4      	b.n	80059f4 <_printf_i+0x168>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4632      	mov	r2, r6
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	47d0      	blx	sl
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d09b      	beq.n	80059f0 <_printf_i+0x164>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	9903      	ldr	r1, [sp, #12]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	dcf2      	bgt.n	8005aaa <_printf_i+0x21e>
 8005ac4:	e7eb      	b.n	8005a9e <_printf_i+0x212>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	f104 0619 	add.w	r6, r4, #25
 8005acc:	e7f5      	b.n	8005aba <_printf_i+0x22e>
 8005ace:	bf00      	nop
 8005ad0:	08006391 	.word	0x08006391
 8005ad4:	080063a2 	.word	0x080063a2

08005ad8 <_putc_r>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	460d      	mov	r5, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	4606      	mov	r6, r0
 8005ae0:	b118      	cbz	r0, 8005aea <_putc_r+0x12>
 8005ae2:	6983      	ldr	r3, [r0, #24]
 8005ae4:	b90b      	cbnz	r3, 8005aea <_putc_r+0x12>
 8005ae6:	f7ff f9bf 	bl	8004e68 <__sinit>
 8005aea:	4b1c      	ldr	r3, [pc, #112]	; (8005b5c <_putc_r+0x84>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d124      	bne.n	8005b3a <_putc_r+0x62>
 8005af0:	6874      	ldr	r4, [r6, #4]
 8005af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af4:	07d8      	lsls	r0, r3, #31
 8005af6:	d405      	bmi.n	8005b04 <_putc_r+0x2c>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	0599      	lsls	r1, r3, #22
 8005afc:	d402      	bmi.n	8005b04 <_putc_r+0x2c>
 8005afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b00:	f7ff fa50 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8005b04:	68a3      	ldr	r3, [r4, #8]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	60a3      	str	r3, [r4, #8]
 8005b0c:	da05      	bge.n	8005b1a <_putc_r+0x42>
 8005b0e:	69a2      	ldr	r2, [r4, #24]
 8005b10:	4293      	cmp	r3, r2
 8005b12:	db1c      	blt.n	8005b4e <_putc_r+0x76>
 8005b14:	b2eb      	uxtb	r3, r5
 8005b16:	2b0a      	cmp	r3, #10
 8005b18:	d019      	beq.n	8005b4e <_putc_r+0x76>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	701d      	strb	r5, [r3, #0]
 8005b22:	b2ed      	uxtb	r5, r5
 8005b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d405      	bmi.n	8005b36 <_putc_r+0x5e>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	059b      	lsls	r3, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_putc_r+0x5e>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f7ff fa38 	bl	8004fa6 <__retarget_lock_release_recursive>
 8005b36:	4628      	mov	r0, r5
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <_putc_r+0x88>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	d101      	bne.n	8005b44 <_putc_r+0x6c>
 8005b40:	68b4      	ldr	r4, [r6, #8]
 8005b42:	e7d6      	b.n	8005af2 <_putc_r+0x1a>
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <_putc_r+0x8c>)
 8005b46:	429c      	cmp	r4, r3
 8005b48:	bf08      	it	eq
 8005b4a:	68f4      	ldreq	r4, [r6, #12]
 8005b4c:	e7d1      	b.n	8005af2 <_putc_r+0x1a>
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4622      	mov	r2, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 f85c 	bl	8005c10 <__swbuf_r>
 8005b58:	4605      	mov	r5, r0
 8005b5a:	e7e3      	b.n	8005b24 <_putc_r+0x4c>
 8005b5c:	08006340 	.word	0x08006340
 8005b60:	08006360 	.word	0x08006360
 8005b64:	08006320 	.word	0x08006320

08005b68 <_sbrk_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	; (8005b84 <_sbrk_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fe fd36 	bl	80045e4 <_sbrk>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_sbrk_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_sbrk_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	200000e0 	.word	0x200000e0

08005b88 <__sread>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	f000 f9a6 	bl	8005ee0 <_read_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	bfab      	itete	ge
 8005b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b9c:	181b      	addge	r3, r3, r0
 8005b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ba2:	bfac      	ite	ge
 8005ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ba6:	81a3      	strhlt	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__swrite>:
 8005baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	461f      	mov	r7, r3
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4616      	mov	r6, r2
 8005bba:	d505      	bpl.n	8005bc8 <__swrite+0x1e>
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f916 	bl	8005df4 <_lseek_r>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	f7fa bf65 	b.w	8000aac <_write_r>

08005be2 <__sseek>:
 8005be2:	b510      	push	{r4, lr}
 8005be4:	460c      	mov	r4, r1
 8005be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bea:	f000 f903 	bl	8005df4 <_lseek_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	bf15      	itete	ne
 8005bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bfe:	81a3      	strheq	r3, [r4, #12]
 8005c00:	bf18      	it	ne
 8005c02:	81a3      	strhne	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__sclose>:
 8005c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0a:	f000 b8c1 	b.w	8005d90 <_close_r>
	...

08005c10 <__swbuf_r>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	460e      	mov	r6, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	4605      	mov	r5, r0
 8005c18:	b118      	cbz	r0, 8005c22 <__swbuf_r+0x12>
 8005c1a:	6983      	ldr	r3, [r0, #24]
 8005c1c:	b90b      	cbnz	r3, 8005c22 <__swbuf_r+0x12>
 8005c1e:	f7ff f923 	bl	8004e68 <__sinit>
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <__swbuf_r+0x98>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d12b      	bne.n	8005c80 <__swbuf_r+0x70>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	69a3      	ldr	r3, [r4, #24]
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	071a      	lsls	r2, r3, #28
 8005c32:	d52f      	bpl.n	8005c94 <__swbuf_r+0x84>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	b36b      	cbz	r3, 8005c94 <__swbuf_r+0x84>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	1ac0      	subs	r0, r0, r3
 8005c3e:	6963      	ldr	r3, [r4, #20]
 8005c40:	b2f6      	uxtb	r6, r6
 8005c42:	4283      	cmp	r3, r0
 8005c44:	4637      	mov	r7, r6
 8005c46:	dc04      	bgt.n	8005c52 <__swbuf_r+0x42>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f7ff f878 	bl	8004d40 <_fflush_r>
 8005c50:	bb30      	cbnz	r0, 8005ca0 <__swbuf_r+0x90>
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60a3      	str	r3, [r4, #8]
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	701e      	strb	r6, [r3, #0]
 8005c60:	6963      	ldr	r3, [r4, #20]
 8005c62:	3001      	adds	r0, #1
 8005c64:	4283      	cmp	r3, r0
 8005c66:	d004      	beq.n	8005c72 <__swbuf_r+0x62>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	07db      	lsls	r3, r3, #31
 8005c6c:	d506      	bpl.n	8005c7c <__swbuf_r+0x6c>
 8005c6e:	2e0a      	cmp	r6, #10
 8005c70:	d104      	bne.n	8005c7c <__swbuf_r+0x6c>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7ff f863 	bl	8004d40 <_fflush_r>
 8005c7a:	b988      	cbnz	r0, 8005ca0 <__swbuf_r+0x90>
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <__swbuf_r+0x9c>)
 8005c82:	429c      	cmp	r4, r3
 8005c84:	d101      	bne.n	8005c8a <__swbuf_r+0x7a>
 8005c86:	68ac      	ldr	r4, [r5, #8]
 8005c88:	e7cf      	b.n	8005c2a <__swbuf_r+0x1a>
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <__swbuf_r+0xa0>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	bf08      	it	eq
 8005c90:	68ec      	ldreq	r4, [r5, #12]
 8005c92:	e7ca      	b.n	8005c2a <__swbuf_r+0x1a>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f80c 	bl	8005cb4 <__swsetup_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d0cb      	beq.n	8005c38 <__swbuf_r+0x28>
 8005ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca4:	e7ea      	b.n	8005c7c <__swbuf_r+0x6c>
 8005ca6:	bf00      	nop
 8005ca8:	08006340 	.word	0x08006340
 8005cac:	08006360 	.word	0x08006360
 8005cb0:	08006320 	.word	0x08006320

08005cb4 <__swsetup_r>:
 8005cb4:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <__swsetup_r+0xcc>)
 8005cb6:	b570      	push	{r4, r5, r6, lr}
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	4606      	mov	r6, r0
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b125      	cbz	r5, 8005cca <__swsetup_r+0x16>
 8005cc0:	69ab      	ldr	r3, [r5, #24]
 8005cc2:	b913      	cbnz	r3, 8005cca <__swsetup_r+0x16>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f7ff f8cf 	bl	8004e68 <__sinit>
 8005cca:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <__swsetup_r+0xd0>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d10f      	bne.n	8005cf0 <__swsetup_r+0x3c>
 8005cd0:	686c      	ldr	r4, [r5, #4]
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cd8:	0719      	lsls	r1, r3, #28
 8005cda:	d42c      	bmi.n	8005d36 <__swsetup_r+0x82>
 8005cdc:	06dd      	lsls	r5, r3, #27
 8005cde:	d411      	bmi.n	8005d04 <__swsetup_r+0x50>
 8005ce0:	2309      	movs	r3, #9
 8005ce2:	6033      	str	r3, [r6, #0]
 8005ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295
 8005cee:	e03e      	b.n	8005d6e <__swsetup_r+0xba>
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <__swsetup_r+0xd4>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	d101      	bne.n	8005cfa <__swsetup_r+0x46>
 8005cf6:	68ac      	ldr	r4, [r5, #8]
 8005cf8:	e7eb      	b.n	8005cd2 <__swsetup_r+0x1e>
 8005cfa:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <__swsetup_r+0xd8>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	bf08      	it	eq
 8005d00:	68ec      	ldreq	r4, [r5, #12]
 8005d02:	e7e6      	b.n	8005cd2 <__swsetup_r+0x1e>
 8005d04:	0758      	lsls	r0, r3, #29
 8005d06:	d512      	bpl.n	8005d2e <__swsetup_r+0x7a>
 8005d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0a:	b141      	cbz	r1, 8005d1e <__swsetup_r+0x6a>
 8005d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d002      	beq.n	8005d1a <__swsetup_r+0x66>
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff f9b5 	bl	8005084 <_free_r>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	2300      	movs	r3, #0
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0308 	orr.w	r3, r3, #8
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	b94b      	cbnz	r3, 8005d4e <__swsetup_r+0x9a>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d44:	d003      	beq.n	8005d4e <__swsetup_r+0x9a>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff f953 	bl	8004ff4 <__smakebuf_r>
 8005d4e:	89a0      	ldrh	r0, [r4, #12]
 8005d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d54:	f010 0301 	ands.w	r3, r0, #1
 8005d58:	d00a      	beq.n	8005d70 <__swsetup_r+0xbc>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60a3      	str	r3, [r4, #8]
 8005d5e:	6963      	ldr	r3, [r4, #20]
 8005d60:	425b      	negs	r3, r3
 8005d62:	61a3      	str	r3, [r4, #24]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b943      	cbnz	r3, 8005d7a <__swsetup_r+0xc6>
 8005d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d6c:	d1ba      	bne.n	8005ce4 <__swsetup_r+0x30>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	0781      	lsls	r1, r0, #30
 8005d72:	bf58      	it	pl
 8005d74:	6963      	ldrpl	r3, [r4, #20]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	e7f4      	b.n	8005d64 <__swsetup_r+0xb0>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e7f7      	b.n	8005d6e <__swsetup_r+0xba>
 8005d7e:	bf00      	nop
 8005d80:	20000034 	.word	0x20000034
 8005d84:	08006340 	.word	0x08006340
 8005d88:	08006360 	.word	0x08006360
 8005d8c:	08006320 	.word	0x08006320

08005d90 <_close_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_close_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fe fbed 	bl	800457a <_close>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_close_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_close_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	200000e0 	.word	0x200000e0

08005db0 <_fstat_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_fstat_r+0x20>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	4611      	mov	r1, r2
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	f7fe fbe8 	bl	8004592 <_fstat>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d102      	bne.n	8005dcc <_fstat_r+0x1c>
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	b103      	cbz	r3, 8005dcc <_fstat_r+0x1c>
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	bd38      	pop	{r3, r4, r5, pc}
 8005dce:	bf00      	nop
 8005dd0:	200000e0 	.word	0x200000e0

08005dd4 <_isatty_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	; (8005df0 <_isatty_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fe fbe7 	bl	80045b2 <_isatty>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_isatty_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_isatty_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	200000e0 	.word	0x200000e0

08005df4 <_lseek_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	; (8005e14 <_lseek_r+0x20>)
 8005df8:	4604      	mov	r4, r0
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7fe fbe0 	bl	80045c8 <_lseek>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_lseek_r+0x1e>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_lseek_r+0x1e>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200000e0 	.word	0x200000e0

08005e18 <memcpy>:
 8005e18:	440a      	add	r2, r1
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e20:	d100      	bne.n	8005e24 <memcpy+0xc>
 8005e22:	4770      	bx	lr
 8005e24:	b510      	push	{r4, lr}
 8005e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2e:	4291      	cmp	r1, r2
 8005e30:	d1f9      	bne.n	8005e26 <memcpy+0xe>
 8005e32:	bd10      	pop	{r4, pc}

08005e34 <memmove>:
 8005e34:	4288      	cmp	r0, r1
 8005e36:	b510      	push	{r4, lr}
 8005e38:	eb01 0402 	add.w	r4, r1, r2
 8005e3c:	d902      	bls.n	8005e44 <memmove+0x10>
 8005e3e:	4284      	cmp	r4, r0
 8005e40:	4623      	mov	r3, r4
 8005e42:	d807      	bhi.n	8005e54 <memmove+0x20>
 8005e44:	1e43      	subs	r3, r0, #1
 8005e46:	42a1      	cmp	r1, r4
 8005e48:	d008      	beq.n	8005e5c <memmove+0x28>
 8005e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e52:	e7f8      	b.n	8005e46 <memmove+0x12>
 8005e54:	4402      	add	r2, r0
 8005e56:	4601      	mov	r1, r0
 8005e58:	428a      	cmp	r2, r1
 8005e5a:	d100      	bne.n	8005e5e <memmove+0x2a>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e66:	e7f7      	b.n	8005e58 <memmove+0x24>

08005e68 <__malloc_lock>:
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__malloc_lock+0x8>)
 8005e6a:	f7ff b89b 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8005e6e:	bf00      	nop
 8005e70:	200000d4 	.word	0x200000d4

08005e74 <__malloc_unlock>:
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <__malloc_unlock+0x8>)
 8005e76:	f7ff b896 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200000d4 	.word	0x200000d4

08005e80 <_realloc_r>:
 8005e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e84:	4680      	mov	r8, r0
 8005e86:	4614      	mov	r4, r2
 8005e88:	460e      	mov	r6, r1
 8005e8a:	b921      	cbnz	r1, 8005e96 <_realloc_r+0x16>
 8005e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	4611      	mov	r1, r2
 8005e92:	f7ff b963 	b.w	800515c <_malloc_r>
 8005e96:	b92a      	cbnz	r2, 8005ea4 <_realloc_r+0x24>
 8005e98:	f7ff f8f4 	bl	8005084 <_free_r>
 8005e9c:	4625      	mov	r5, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea4:	f000 f82e 	bl	8005f04 <_malloc_usable_size_r>
 8005ea8:	4284      	cmp	r4, r0
 8005eaa:	4607      	mov	r7, r0
 8005eac:	d802      	bhi.n	8005eb4 <_realloc_r+0x34>
 8005eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eb2:	d812      	bhi.n	8005eda <_realloc_r+0x5a>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff f950 	bl	800515c <_malloc_r>
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0ed      	beq.n	8005e9e <_realloc_r+0x1e>
 8005ec2:	42bc      	cmp	r4, r7
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	bf28      	it	cs
 8005eca:	463a      	movcs	r2, r7
 8005ecc:	f7ff ffa4 	bl	8005e18 <memcpy>
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7ff f8d6 	bl	8005084 <_free_r>
 8005ed8:	e7e1      	b.n	8005e9e <_realloc_r+0x1e>
 8005eda:	4635      	mov	r5, r6
 8005edc:	e7df      	b.n	8005e9e <_realloc_r+0x1e>
	...

08005ee0 <_read_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_read_r+0x20>)
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4611      	mov	r1, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	602a      	str	r2, [r5, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f7fe fb26 	bl	8004540 <_read>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_read_r+0x1e>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_read_r+0x1e>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200000e0 	.word	0x200000e0

08005f04 <_malloc_usable_size_r>:
 8005f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f08:	1f18      	subs	r0, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfbc      	itt	lt
 8005f0e:	580b      	ldrlt	r3, [r1, r0]
 8005f10:	18c0      	addlt	r0, r0, r3
 8005f12:	4770      	bx	lr

08005f14 <_init>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr

08005f20 <_fini>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr
